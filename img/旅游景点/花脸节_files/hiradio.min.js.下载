"undefined" != typeof window && function(e, t) {
    "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.HiRadio = t() : e.HiRadio = t()
}(this, (function() {
        return function(e) {
            var t = {};
            function r(i) {
                if (t[i])
                    return t[i].exports;
                var a = t[i] = {
                    i: i,
                    l: !1,
                    exports: {}
                };
                return e[i].call(a.exports, a, a.exports, r),
                    a.l = !0,
                    a.exports
            }
            return r.m = e,
                r.c = t,
                r.d = function(e, t, i) {
                    r.o(e, t) || Object.defineProperty(e, t, {
                        enumerable: !0,
                        get: i
                    })
                }
                ,
                r.r = function(e) {
                    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                        value: "Module"
                    }),
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        })
                }
                ,
                r.t = function(e, t) {
                    if (1 & t && (e = r(e)),
                        8 & t)
                        return e;
                    if (4 & t && "object" == typeof e && e && e.__esModule)
                        return e;
                    var i = Object.create(null);
                    if (r.r(i),
                            Object.defineProperty(i, "default", {
                                enumerable: !0,
                                value: e
                            }),
                        2 & t && "string" != typeof e)
                        for (var a in e)
                            r.d(i, a, function(t) {
                                return e[t]
                            }
                                .bind(null, a));
                    return i
                }
                ,
                r.n = function(e) {
                    var t = e && e.__esModule ? function() {
                            return e.default
                        }
                        : function() {
                            return e
                        }
                    ;
                    return r.d(t, "a", t),
                        t
                }
                ,
                r.o = function(e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t)
                }
                ,
                r.p = "/dist/",
                r(r.s = 13)
        }([function(e, t, r) {
            "use strict";
            r.d(t, "a", (function() {
                    return u
                }
            )),
                r.d(t, "b", (function() {
                        return f
                    }
                ));
            var i = r(5);
            function a() {}
            var n = {
                trace: a,
                debug: a,
                log: a,
                warn: a,
                info: a,
                error: a
            }
                , o = n;
            function s(e, t) {
                return t = "[" + e + "] > " + t
            }
            var d = Object(i.a)();
            function l(e) {
                for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                    r[i - 1] = arguments[i];
                r.forEach((function(t) {
                        o[t] = e[t] ? e[t].bind(e) : function(e) {
                            var t = d.console[e];
                            return t ? function() {
                                    for (var r = arguments.length, i = new Array(r), a = 0; a < r; a++)
                                        i[a] = arguments[a];
                                    i[0] && (i[0] = s(e, i[0])),
                                        t.apply(d.console, i)
                                }
                                : a
                        }(t)
                    }
                ))
            }
            var u = function(e) {
                if (d.console && !0 === e || "object" == typeof e) {
                    l(e, "trace", "debug", "log", "info", "warn", "error");
                    try {
                        o.log()
                    } catch (e) {
                        o = n
                    }
                } else
                    o = n
            }
                , f = o
        }
            , function(e, t, r) {
                "use strict";
                t.a = {
                    MEDIA_ATTACHING: "hiRadioMediaAttaching",
                    MEDIA_ATTACHED: "hiRadioMediaAttached",
                    MEDIA_DETACHING: "hiRadioMediaDetaching",
                    MEDIA_DETACHED: "hiRadioMediaDetached",
                    BUFFER_RESET: "hiRadioBufferReset",
                    BUFFER_CODECS: "hiRadioBufferCodecs",
                    BUFFER_CREATED: "hiRadioBufferCreated",
                    BUFFER_APPENDING: "hiRadioBufferAppending",
                    BUFFER_APPENDED: "hiRadioBufferAppended",
                    BUFFER_EOS: "hiRadioBufferEos",
                    BUFFER_FLUSHING: "hiRadioBufferFlushing",
                    BUFFER_FLUSHED: "hiRadioBufferFlushed",
                    MANIFEST_LOADING: "hiRadioManifestLoading",
                    MANIFEST_LOADED: "hiRadioManifestLoaded",
                    MANIFEST_PARSED: "hiRadioManifestParsed",
                    LEVEL_SWITCHING: "hiRadioLevelSwitching",
                    LEVEL_SWITCHED: "hiRadioLevelSwitched",
                    LEVEL_LOADING: "hiRadioLevelLoading",
                    LEVEL_LOADED: "hiRadioLevelLoaded",
                    LEVEL_UPDATED: "hiRadioLevelUpdated",
                    LEVEL_PTS_UPDATED: "hiRadioLevelPtsUpdated",
                    AUDIO_TRACKS_UPDATED: "hiRadioAudioTracksUpdated",
                    AUDIO_TRACK_SWITCHING: "hiRadioAudioTrackSwitching",
                    AUDIO_TRACK_SWITCHED: "hiRadioAudioTrackSwitched",
                    AUDIO_TRACK_LOADING: "hiRadioAudioTrackLoading",
                    AUDIO_TRACK_LOADED: "hiRadioAudioTrackLoaded",
                    INIT_PTS_FOUND: "hiRadioInitPtsFound",
                    FRAG_LOADING: "hiRadioFragLoading",
                    FRAG_LOAD_PROGRESS: "hiRadioFragLoadProgress",
                    FRAG_LOAD_EMERGENCY_ABORTED: "hiRadioFragLoadEmergencyAborted",
                    FRAG_LOADED: "hiRadioFragLoaded",
                    FRAG_DECRYPTED: "hiRadioFragDecrypted",
                    FRAG_PARSING_INIT_SEGMENT: "hiRadioFragParsingInitSegment",
                    FRAG_PARSING_USERDATA: "hiRadioFragParsingUserdata",
                    FRAG_PARSING_METADATA: "hiRadioFragParsingMetadata",
                    FRAG_PARSING_DATA: "hiRadioFragParsingData",
                    FRAG_PARSED: "hiRadioFragParsed",
                    FRAG_BUFFERED: "hiRadioFragBuffered",
                    FRAG_CHANGED: "hiRadioFragChanged",
                    FPS_DROP: "hiRadioFpsDrop",
                    FPS_DROP_LEVEL_CAPPING: "hiRadioFpsDropLevelCapping",
                    ERROR: "hiRadioError",
                    DESTROYING: "hiRadioDestroying",
                    KEY_LOADING: "hiRadioKeyLoading",
                    KEY_LOADED: "hiRadioKeyLoaded",
                    STREAM_STATE_TRANSITION: "hiRadioStreamStateTransition",
                    AUDIO_PAUSE: "pause",
                    AUDIO_PLAY: "play",
                    AUDIO_PLAYING: "playing",
                    AUDIO_ENDED: "ended"
                }
            }
            , function(e, t, r) {
                "use strict";
                var i, a;
                r.d(t, "b", (function() {
                        return i
                    }
                )),
                    r.d(t, "a", (function() {
                            return a
                        }
                    )),
                    function(e) {
                        e.NETWORK_ERROR = "networkError",
                            e.MEDIA_ERROR = "mediaError",
                            e.KEY_SYSTEM_ERROR = "keySystemError",
                            e.MUX_ERROR = "muxError",
                            e.OTHER_ERROR = "otherError"
                    }(i || (i = {})),
                    function(e) {
                        e.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys",
                            e.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess",
                            e.KEY_SYSTEM_NO_SESSION = "keySystemNoSession",
                            e.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed",
                            e.KEY_SYSTEM_NO_INIT_DATA = "keySystemNoInitData",
                            e.MANIFEST_LOAD_ERROR = "manifestLoadError",
                            e.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut",
                            e.MANIFEST_PARSING_ERROR = "manifestParsingError",
                            e.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError",
                            e.LEVEL_LOAD_ERROR = "levelLoadError",
                            e.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut",
                            e.LEVEL_SWITCH_ERROR = "levelSwitchError",
                            e.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError",
                            e.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut",
                            e.FRAG_LOAD_ERROR = "fragLoadError",
                            e.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut",
                            e.FRAG_DECRYPT_ERROR = "fragDecryptError",
                            e.FRAG_PARSING_ERROR = "fragParsingError",
                            e.REMUX_ALLOC_ERROR = "remuxAllocError",
                            e.KEY_LOAD_ERROR = "keyLoadError",
                            e.KEY_LOAD_TIMEOUT = "keyLoadTimeOut",
                            e.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError",
                            e.BUFFER_APPEND_ERROR = "bufferAppendError",
                            e.BUFFER_APPENDING_ERROR = "bufferAppendingError",
                            e.BUFFER_STALLED_ERROR = "bufferStalledError",
                            e.BUFFER_FULL_ERROR = "bufferFullError",
                            e.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole",
                            e.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall",
                            e.INTERNAL_EXCEPTION = "internalException"
                    }(a || (a = {}))
            }
            , function(e, t, r) {
                "use strict";
                r.d(t, "a", (function() {
                        return i
                    }
                ));
                var i = Number.isFinite || function(e) {
                    return "number" == typeof e && isFinite(e)
                }
            }
            , function(e, t, r) {
                "use strict";
                var i, a = r(5), n = function() {
                    function e() {}
                    return e.isHeader = function(e, t) {
                        return t + 10 <= e.length && 73 === e[t] && 68 === e[t + 1] && 51 === e[t + 2] && e[t + 3] < 255 && e[t + 4] < 255 && e[t + 6] < 128 && e[t + 7] < 128 && e[t + 8] < 128 && e[t + 9] < 128
                    }
                        ,
                        e.isFooter = function(e, t) {
                            return t + 10 <= e.length && 51 === e[t] && 68 === e[t + 1] && 73 === e[t + 2] && e[t + 3] < 255 && e[t + 4] < 255 && e[t + 6] < 128 && e[t + 7] < 128 && e[t + 8] < 128 && e[t + 9] < 128
                        }
                        ,
                        e.getID3Data = function(t, r) {
                            for (var i = r, a = 0; e.isHeader(t, r); ) {
                                a += 10,
                                    a += e._readSize(t, r + 6),
                                e.isFooter(t, r + 10) && (a += 10),
                                    r += a
                            }
                            if (a > 0)
                                return t.subarray(i, i + a)
                        }
                        ,
                        e._readSize = function(e, t) {
                            var r = 0;
                            return r = (127 & e[t]) << 21,
                                r |= (127 & e[t + 1]) << 14,
                                r |= (127 & e[t + 2]) << 7,
                                r |= 127 & e[t + 3]
                        }
                        ,
                        e.getTimeStamp = function(t) {
                            for (var r = e.getID3Frames(t), i = 0; i < r.length; i++) {
                                var a = r[i];
                                if (e.isTimeStampFrame(a))
                                    return e._readTimeStamp(a)
                            }
                        }
                        ,
                        e.isTimeStampFrame = function(e) {
                            return e && "PRIV" === e.key && "com.apple.streaming.transportStreamTimestamp" === e.info
                        }
                        ,
                        e._getFrameData = function(t) {
                            var r = String.fromCharCode(t[0], t[1], t[2], t[3])
                                , i = e._readSize(t, 4);
                            return {
                                type: r,
                                size: i,
                                data: t.subarray(10, 10 + i)
                            }
                        }
                        ,
                        e.getID3Frames = function(t) {
                            for (var r = 0, i = []; e.isHeader(t, r); ) {
                                for (var a = e._readSize(t, r + 6), n = (r += 10) + a; r + 8 < n; ) {
                                    var o = e._getFrameData(t.subarray(r))
                                        , s = e._decodeFrame(o);
                                    s && i.push(s),
                                        r += o.size + 10
                                }
                                e.isFooter(t, r) && (r += 10)
                            }
                            return i
                        }
                        ,
                        e._decodeFrame = function(t) {
                            return "PRIV" === t.type ? e._decodePrivFrame(t) : "T" === t.type[0] ? e._decodeTextFrame(t) : "W" === t.type[0] ? e._decodeURLFrame(t) : void 0
                        }
                        ,
                        e._readTimeStamp = function(e) {
                            if (8 === e.data.byteLength) {
                                var t = new Uint8Array(e.data)
                                    , r = 1 & t[3]
                                    , i = (t[4] << 23) + (t[5] << 15) + (t[6] << 7) + t[7];
                                return i /= 45,
                                r && (i += 47721858.84),
                                    Math.round(i)
                            }
                        }
                        ,
                        e._decodePrivFrame = function(t) {
                            if (!(t.size < 2)) {
                                var r = e._utf8ArrayToStr(t.data, !0)
                                    , i = new Uint8Array(t.data.subarray(r.length + 1));
                                return {
                                    key: t.type,
                                    info: r,
                                    data: i.buffer
                                }
                            }
                        }
                        ,
                        e._decodeTextFrame = function(t) {
                            if (!(t.size < 2)) {
                                if ("TXXX" === t.type) {
                                    var r = 1
                                        , i = e._utf8ArrayToStr(t.data.subarray(r), !0);
                                    r += i.length + 1;
                                    var a = e._utf8ArrayToStr(t.data.subarray(r));
                                    return {
                                        key: t.type,
                                        info: i,
                                        data: a
                                    }
                                }
                                var n = e._utf8ArrayToStr(t.data.subarray(1));
                                return {
                                    key: t.type,
                                    data: n
                                }
                            }
                        }
                        ,
                        e._decodeURLFrame = function(t) {
                            if ("WXXX" === t.type) {
                                if (t.size < 2)
                                    return;
                                var r = 1
                                    , i = e._utf8ArrayToStr(t.data.subarray(r));
                                r += i.length + 1;
                                var a = e._utf8ArrayToStr(t.data.subarray(r));
                                return {
                                    key: t.type,
                                    info: i,
                                    data: a
                                }
                            }
                            var n = e._utf8ArrayToStr(t.data);
                            return {
                                key: t.type,
                                data: n
                            }
                        }
                        ,
                        e._utf8ArrayToStr = function(e, t) {
                            void 0 === t && (t = !1);
                            var r = o();
                            if (r) {
                                var i = r.decode(e);
                                if (t) {
                                    var a = i.indexOf("\0");
                                    return -1 !== a ? i.substring(0, a) : i
                                }
                                return i.replace(/\0/g, "")
                            }
                            for (var n, s, d, l = e.length, u = "", f = 0; f < l; ) {
                                if (0 === (n = e[f++]) && t)
                                    return u;
                                if (0 !== n && 3 !== n)
                                    switch (n >> 4) {
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                        case 5:
                                        case 6:
                                        case 7:
                                            u += String.fromCharCode(n);
                                            break;
                                        case 12:
                                        case 13:
                                            s = e[f++],
                                                u += String.fromCharCode((31 & n) << 6 | 63 & s);
                                            break;
                                        case 14:
                                            s = e[f++],
                                                d = e[f++],
                                                u += String.fromCharCode((15 & n) << 12 | (63 & s) << 6 | (63 & d) << 0)
                                    }
                            }
                            return u
                        }
                        ,
                        e
                }();
                function o() {
                    var e = Object(a.a)();
                    return i || void 0 === e.TextDecoder || (i = new e.TextDecoder("utf-8")),
                        i
                }
                n._utf8ArrayToStr;
                t.a = n
            }
            , function(e, t, r) {
                "use strict";
                function i() {
                    return "undefined" == typeof window ? self : window
                }
                r.d(t, "a", (function() {
                        return i
                    }
                ))
            }
            , function(e, t, r) {
                var i, a, n, o, s;
                i = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,
                    a = /^([^\/?#]*)(.*)$/,
                    n = /(?:\/|^)\.(?=\/)/g,
                    o = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,
                    s = {
                        buildAbsoluteURL: function(e, t, r) {
                            if (r = r || {},
                                    e = e.trim(),
                                    !(t = t.trim())) {
                                if (!r.alwaysNormalize)
                                    return e;
                                var i = s.parseURL(e);
                                if (!i)
                                    throw new Error("Error trying to parse base URL.");
                                return i.path = s.normalizePath(i.path),
                                    s.buildURLFromParts(i)
                            }
                            var n = s.parseURL(t);
                            if (!n)
                                throw new Error("Error trying to parse relative URL.");
                            if (n.scheme)
                                return r.alwaysNormalize ? (n.path = s.normalizePath(n.path),
                                    s.buildURLFromParts(n)) : t;
                            var o = s.parseURL(e);
                            if (!o)
                                throw new Error("Error trying to parse base URL.");
                            if (!o.netLoc && o.path && "/" !== o.path[0]) {
                                var d = a.exec(o.path);
                                o.netLoc = d[1],
                                    o.path = d[2]
                            }
                            o.netLoc && !o.path && (o.path = "/");
                            var l = {
                                scheme: o.scheme,
                                netLoc: n.netLoc,
                                path: null,
                                params: n.params,
                                query: n.query,
                                fragment: n.fragment
                            };
                            if (!n.netLoc && (l.netLoc = o.netLoc,
                                "/" !== n.path[0]))
                                if (n.path) {
                                    var u = o.path
                                        , f = u.substring(0, u.lastIndexOf("/") + 1) + n.path;
                                    l.path = s.normalizePath(f)
                                } else
                                    l.path = o.path,
                                    n.params || (l.params = o.params,
                                    n.query || (l.query = o.query));
                            return null === l.path && (l.path = r.alwaysNormalize ? s.normalizePath(n.path) : n.path),
                                s.buildURLFromParts(l)
                        },
                        parseURL: function(e) {
                            var t = i.exec(e);
                            return t ? {
                                scheme: t[1] || "",
                                netLoc: t[2] || "",
                                path: t[3] || "",
                                params: t[4] || "",
                                query: t[5] || "",
                                fragment: t[6] || ""
                            } : null
                        },
                        normalizePath: function(e) {
                            for (e = e.split("").reverse().join("").replace(n, ""); e.length !== (e = e.replace(o, "")).length; )
                                ;
                            return e.split("").reverse().join("")
                        },
                        buildURLFromParts: function(e) {
                            return e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment
                        }
                    },
                    e.exports = s
            }
            , function(e, t, r) {
                "use strict";
                var i = Object.prototype.hasOwnProperty
                    , a = "~";
                function n() {}
                function o(e, t, r) {
                    this.fn = e,
                        this.context = t,
                        this.once = r || !1
                }
                function s(e, t, r, i, n) {
                    if ("function" != typeof r)
                        throw new TypeError("The listener must be a function");
                    var s = new o(r,i || e,n)
                        , d = a ? a + t : t;
                    return e._events[d] ? e._events[d].fn ? e._events[d] = [e._events[d], s] : e._events[d].push(s) : (e._events[d] = s,
                        e._eventsCount++),
                        e
                }
                function d(e, t) {
                    0 == --e._eventsCount ? e._events = new n : delete e._events[t]
                }
                function l() {
                    this._events = new n,
                        this._eventsCount = 0
                }
                Object.create && (n.prototype = Object.create(null),
                (new n).__proto__ || (a = !1)),
                    l.prototype.eventNames = function() {
                        var e, t, r = [];
                        if (0 === this._eventsCount)
                            return r;
                        for (t in e = this._events)
                            i.call(e, t) && r.push(a ? t.slice(1) : t);
                        return Object.getOwnPropertySymbols ? r.concat(Object.getOwnPropertySymbols(e)) : r
                    }
                    ,
                    l.prototype.listeners = function(e) {
                        var t = a ? a + e : e
                            , r = this._events[t];
                        if (!r)
                            return [];
                        if (r.fn)
                            return [r.fn];
                        for (var i = 0, n = r.length, o = new Array(n); i < n; i++)
                            o[i] = r[i].fn;
                        return o
                    }
                    ,
                    l.prototype.listenerCount = function(e) {
                        var t = a ? a + e : e
                            , r = this._events[t];
                        return r ? r.fn ? 1 : r.length : 0
                    }
                    ,
                    l.prototype.emit = function(e, t, r, i, n, o) {
                        var s = a ? a + e : e;
                        if (!this._events[s])
                            return !1;
                        var d, l, u = this._events[s], f = arguments.length;
                        if (u.fn) {
                            switch (u.once && this.removeListener(e, u.fn, void 0, !0),
                                f) {
                                case 1:
                                    return u.fn.call(u.context),
                                        !0;
                                case 2:
                                    return u.fn.call(u.context, t),
                                        !0;
                                case 3:
                                    return u.fn.call(u.context, t, r),
                                        !0;
                                case 4:
                                    return u.fn.call(u.context, t, r, i),
                                        !0;
                                case 5:
                                    return u.fn.call(u.context, t, r, i, n),
                                        !0;
                                case 6:
                                    return u.fn.call(u.context, t, r, i, n, o),
                                        !0
                            }
                            for (l = 1,
                                     d = new Array(f - 1); l < f; l++)
                                d[l - 1] = arguments[l];
                            u.fn.apply(u.context, d)
                        } else {
                            var h, c = u.length;
                            for (l = 0; l < c; l++)
                                switch (u[l].once && this.removeListener(e, u[l].fn, void 0, !0),
                                    f) {
                                    case 1:
                                        u[l].fn.call(u[l].context);
                                        break;
                                    case 2:
                                        u[l].fn.call(u[l].context, t);
                                        break;
                                    case 3:
                                        u[l].fn.call(u[l].context, t, r);
                                        break;
                                    case 4:
                                        u[l].fn.call(u[l].context, t, r, i);
                                        break;
                                    default:
                                        if (!d)
                                            for (h = 1,
                                                     d = new Array(f - 1); h < f; h++)
                                                d[h - 1] = arguments[h];
                                        u[l].fn.apply(u[l].context, d)
                                }
                        }
                        return !0
                    }
                    ,
                    l.prototype.on = function(e, t, r) {
                        return s(this, e, t, r, !1)
                    }
                    ,
                    l.prototype.once = function(e, t, r) {
                        return s(this, e, t, r, !0)
                    }
                    ,
                    l.prototype.removeListener = function(e, t, r, i) {
                        var n = a ? a + e : e;
                        if (!this._events[n])
                            return this;
                        if (!t)
                            return d(this, n),
                                this;
                        var o = this._events[n];
                        if (o.fn)
                            o.fn !== t || i && !o.once || r && o.context !== r || d(this, n);
                        else {
                            for (var s = 0, l = [], u = o.length; s < u; s++)
                                (o[s].fn !== t || i && !o[s].once || r && o[s].context !== r) && l.push(o[s]);
                            l.length ? this._events[n] = 1 === l.length ? l[0] : l : d(this, n)
                        }
                        return this
                    }
                    ,
                    l.prototype.removeAllListeners = function(e) {
                        var t;
                        return e ? (t = a ? a + e : e,
                        this._events[t] && d(this, t)) : (this._events = new n,
                            this._eventsCount = 0),
                            this
                    }
                    ,
                    l.prototype.off = l.prototype.removeListener,
                    l.prototype.addListener = l.prototype.on,
                    l.prefixed = a,
                    l.EventEmitter = l,
                    e.exports = l
            }
            , function(e, t, r) {
                "use strict";
                var i = r(1)
                    , a = r(2)
                    , n = function() {
                    function e(e, t) {
                        this.subtle = e,
                            this.aesIV = t
                    }
                    return e.prototype.decrypt = function(e, t) {
                        return this.subtle.decrypt({
                            name: "AES-CBC",
                            iv: this.aesIV
                        }, t, e)
                    }
                        ,
                        e
                }()
                    , o = function() {
                    function e(e, t) {
                        this.subtle = e,
                            this.key = t
                    }
                    return e.prototype.expandKey = function() {
                        return this.subtle.importKey("raw", this.key, {
                            name: "AES-CBC"
                        }, !1, ["encrypt", "decrypt"])
                    }
                        ,
                        e
                }();
                var s = function() {
                    function e() {
                        this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
                            this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)],
                            this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)],
                            this.sBox = new Uint32Array(256),
                            this.invSBox = new Uint32Array(256),
                            this.key = new Uint32Array(0),
                            this.initTable()
                    }
                    var t = e.prototype;
                    return t.uint8ArrayToUint32Array_ = function(e) {
                        for (var t = new DataView(e), r = new Uint32Array(4), i = 0; i < 4; i++)
                            r[i] = t.getUint32(4 * i);
                        return r
                    }
                        ,
                        t.initTable = function() {
                            var e = this.sBox
                                , t = this.invSBox
                                , r = this.subMix
                                , i = r[0]
                                , a = r[1]
                                , n = r[2]
                                , o = r[3]
                                , s = this.invSubMix
                                , d = s[0]
                                , l = s[1]
                                , u = s[2]
                                , f = s[3]
                                , h = new Uint32Array(256)
                                , c = 0
                                , p = 0
                                , v = 0;
                            for (v = 0; v < 256; v++)
                                h[v] = v < 128 ? v << 1 : v << 1 ^ 283;
                            for (v = 0; v < 256; v++) {
                                var g = p ^ p << 1 ^ p << 2 ^ p << 3 ^ p << 4;
                                g = g >>> 8 ^ 255 & g ^ 99,
                                    e[c] = g,
                                    t[g] = c;
                                var m = h[c]
                                    , y = h[m]
                                    , b = h[y]
                                    , E = 257 * h[g] ^ 16843008 * g;
                                i[c] = E << 24 | E >>> 8,
                                    a[c] = E << 16 | E >>> 16,
                                    n[c] = E << 8 | E >>> 24,
                                    o[c] = E,
                                    E = 16843009 * b ^ 65537 * y ^ 257 * m ^ 16843008 * c,
                                    d[g] = E << 24 | E >>> 8,
                                    l[g] = E << 16 | E >>> 16,
                                    u[g] = E << 8 | E >>> 24,
                                    f[g] = E,
                                    c ? (c = m ^ h[h[h[b ^ m]]],
                                        p ^= h[h[p]]) : c = p = 1
                            }
                        }
                        ,
                        t.expandKey = function(e) {
                            for (var t = this.uint8ArrayToUint32Array_(e), r = !0, i = 0; i < t.length && r; )
                                r = t[i] === this.key[i],
                                    i++;
                            if (!r) {
                                this.key = t;
                                var a = this.keySize = t.length;
                                if (4 !== a && 6 !== a && 8 !== a)
                                    throw new Error("Invalid aes key size=" + a);
                                var n, o, s, d, l = this.ksRows = 4 * (a + 6 + 1), u = this.keySchedule = new Uint32Array(l), f = this.invKeySchedule = new Uint32Array(l), h = this.sBox, c = this.rcon, p = this.invSubMix, v = p[0], g = p[1], m = p[2], y = p[3];
                                for (n = 0; n < l; n++)
                                    n < a ? s = u[n] = t[n] : (d = s,
                                        n % a == 0 ? (d = h[(d = d << 8 | d >>> 24) >>> 24] << 24 | h[d >>> 16 & 255] << 16 | h[d >>> 8 & 255] << 8 | h[255 & d],
                                            d ^= c[n / a | 0] << 24) : a > 6 && n % a == 4 && (d = h[d >>> 24] << 24 | h[d >>> 16 & 255] << 16 | h[d >>> 8 & 255] << 8 | h[255 & d]),
                                        u[n] = s = (u[n - a] ^ d) >>> 0);
                                for (o = 0; o < l; o++)
                                    n = l - o,
                                        d = 3 & o ? u[n] : u[n - 4],
                                        f[o] = o < 4 || n <= 4 ? d : v[h[d >>> 24]] ^ g[h[d >>> 16 & 255]] ^ m[h[d >>> 8 & 255]] ^ y[h[255 & d]],
                                        f[o] = f[o] >>> 0
                            }
                        }
                        ,
                        t.networkToHostOrderSwap = function(e) {
                            return e << 24 | (65280 & e) << 8 | (16711680 & e) >> 8 | e >>> 24
                        }
                        ,
                        t.decrypt = function(e, t, r, i) {
                            for (var a, n, o, s, d, l, u, f, h, c, p, v, g, m, y, b, E, R = this.keySize + 6, _ = this.invKeySchedule, T = this.invSBox, S = this.invSubMix, A = S[0], L = S[1], D = S[2], w = S[3], I = this.uint8ArrayToUint32Array_(r), O = I[0], x = I[1], P = I[2], k = I[3], C = new Int32Array(e), F = new Int32Array(C.length), M = this.networkToHostOrderSwap; t < C.length; ) {
                                for (h = M(C[t]),
                                         c = M(C[t + 1]),
                                         p = M(C[t + 2]),
                                         v = M(C[t + 3]),
                                         d = h ^ _[0],
                                         l = v ^ _[1],
                                         u = p ^ _[2],
                                         f = c ^ _[3],
                                         g = 4,
                                         m = 1; m < R; m++)
                                    a = A[d >>> 24] ^ L[l >> 16 & 255] ^ D[u >> 8 & 255] ^ w[255 & f] ^ _[g],
                                        n = A[l >>> 24] ^ L[u >> 16 & 255] ^ D[f >> 8 & 255] ^ w[255 & d] ^ _[g + 1],
                                        o = A[u >>> 24] ^ L[f >> 16 & 255] ^ D[d >> 8 & 255] ^ w[255 & l] ^ _[g + 2],
                                        s = A[f >>> 24] ^ L[d >> 16 & 255] ^ D[l >> 8 & 255] ^ w[255 & u] ^ _[g + 3],
                                        d = a,
                                        l = n,
                                        u = o,
                                        f = s,
                                        g += 4;
                                a = T[d >>> 24] << 24 ^ T[l >> 16 & 255] << 16 ^ T[u >> 8 & 255] << 8 ^ T[255 & f] ^ _[g],
                                    n = T[l >>> 24] << 24 ^ T[u >> 16 & 255] << 16 ^ T[f >> 8 & 255] << 8 ^ T[255 & d] ^ _[g + 1],
                                    o = T[u >>> 24] << 24 ^ T[f >> 16 & 255] << 16 ^ T[d >> 8 & 255] << 8 ^ T[255 & l] ^ _[g + 2],
                                    s = T[f >>> 24] << 24 ^ T[d >> 16 & 255] << 16 ^ T[l >> 8 & 255] << 8 ^ T[255 & u] ^ _[g + 3],
                                    g += 3,
                                    F[t] = M(a ^ O),
                                    F[t + 1] = M(s ^ x),
                                    F[t + 2] = M(o ^ P),
                                    F[t + 3] = M(n ^ k),
                                    O = h,
                                    x = c,
                                    P = p,
                                    k = v,
                                    t += 4
                            }
                            return i ? (y = F.buffer,
                                b = y.byteLength,
                                (E = b && new DataView(y).getUint8(b - 1)) ? y.slice(0, b - E) : y) : F.buffer
                        }
                        ,
                        t.destroy = function() {
                            this.key = void 0,
                                this.keySize = void 0,
                                this.ksRows = void 0,
                                this.sBox = void 0,
                                this.invSBox = void 0,
                                this.subMix = void 0,
                                this.invSubMix = void 0,
                                this.keySchedule = void 0,
                                this.invKeySchedule = void 0,
                                this.rcon = void 0
                        }
                        ,
                        e
                }()
                    , d = r(0)
                    , l = r(5)
                    , u = Object(l.a)()
                    , f = function() {
                    function e(e, t, r) {
                        var i = (void 0 === r ? {} : r).removePKCS7Padding
                            , a = void 0 === i || i;
                        if (this.logEnabled = !0,
                                this.observer = e,
                                this.config = t,
                                this.removePKCS7Padding = a,
                                a)
                            try {
                                var n = u.crypto;
                                n && (this.subtle = n.subtle || n.webkitSubtle)
                            } catch (e) {}
                        this.disableWebCrypto = !this.subtle
                    }
                    var t = e.prototype;
                    return t.isSync = function() {
                        return this.disableWebCrypto && this.config.enableSoftwareAES
                    }
                        ,
                        t.decrypt = function(e, t, r, i) {
                            var a = this;
                            if (this.disableWebCrypto && this.config.enableSoftwareAES) {
                                this.logEnabled && (d.b.log("JS AES decrypt"),
                                    this.logEnabled = !1);
                                var l = this.decryptor;
                                l || (this.decryptor = l = new s),
                                    l.expandKey(t),
                                    i(l.decrypt(e, 0, r, this.removePKCS7Padding))
                            } else {
                                this.logEnabled && (d.b.log("WebCrypto AES decrypt"),
                                    this.logEnabled = !1);
                                var u = this.subtle;
                                this.key !== t && (this.key = t,
                                    this.fastAesKey = new o(u,t)),
                                    this.fastAesKey.expandKey().then((function(o) {
                                            new n(u,r).decrypt(e, o).catch((function(n) {
                                                    a.onWebCryptoError(n, e, t, r, i)
                                                }
                                            )).then((function(e) {
                                                    i(e)
                                                }
                                            ))
                                        }
                                    )).catch((function(n) {
                                            a.onWebCryptoError(n, e, t, r, i)
                                        }
                                    ))
                            }
                        }
                        ,
                        t.onWebCryptoError = function(e, t, r, n, o) {
                            this.config.enableSoftwareAES ? (d.b.log("WebCrypto Error, disable WebCrypto API"),
                                this.disableWebCrypto = !0,
                                this.logEnabled = !0,
                                this.decrypt(t, r, n, o)) : (d.b.error("decrypting error : " + e.message),
                                this.observer.trigger(i.a.ERROR, {
                                    type: a.b.MEDIA_ERROR,
                                    details: a.a.FRAG_DECRYPT_ERROR,
                                    fatal: !0,
                                    reason: e.message
                                }))
                        }
                        ,
                        t.destroy = function() {
                            var e = this.decryptor;
                            e && (e.destroy(),
                                this.decryptor = void 0)
                        }
                        ,
                        e
                }()
                    , h = r(3);
                function c(e, t) {
                    return 255 === e[t] && 240 == (246 & e[t + 1])
                }
                function p(e, t) {
                    return 1 & e[t + 1] ? 7 : 9
                }
                function v(e, t) {
                    return (3 & e[t + 3]) << 11 | e[t + 4] << 3 | (224 & e[t + 5]) >>> 5
                }
                function g(e, t) {
                    return !!(t + 1 < e.length && c(e, t))
                }
                function m(e, t) {
                    if (g(e, t)) {
                        var r = p(e, t);
                        t + 5 < e.length && (r = v(e, t));
                        var i = t + r;
                        if (i === e.length || i + 1 < e.length && c(e, i))
                            return !0
                    }
                    return !1
                }
                function y(e, t, r, n, o) {
                    if (!e.samplerate) {
                        var s = function(e, t, r, n) {
                            var o, s, l, u, f, h = navigator.userAgent.toLowerCase(), c = n, p = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
                            if (o = 1 + ((192 & t[r + 2]) >>> 6),
                                    !((s = (60 & t[r + 2]) >>> 2) > p.length - 1))
                                return u = (1 & t[r + 2]) << 2,
                                    u |= (192 & t[r + 3]) >>> 6,
                                    d.b.log("manifest codec:" + n + ",ADTS data:type:" + o + ",sampleingIndex:" + s + "[" + p[s] + "Hz],channelConfig:" + u),
                                    /firefox/i.test(h) ? s >= 6 ? (o = 5,
                                        f = new Array(4),
                                        l = s - 3) : (o = 2,
                                        f = new Array(2),
                                        l = s) : -1 !== h.indexOf("android") ? (o = 2,
                                        f = new Array(2),
                                        l = s) : (o = 5,
                                        f = new Array(4),
                                        n && (-1 !== n.indexOf("mp4a.40.29") || -1 !== n.indexOf("mp4a.40.5")) || !n && s >= 6 ? l = s - 3 : ((n && -1 !== n.indexOf("mp4a.40.2") && (s >= 6 && 1 === u || /vivaldi/i.test(h)) || !n && 1 === u) && (o = 2,
                                            f = new Array(2)),
                                            l = s)),
                                    f[0] = o << 3,
                                    f[0] |= (14 & s) >> 1,
                                    f[1] |= (1 & s) << 7,
                                    f[1] |= u << 3,
                                5 === o && (f[1] |= (14 & l) >> 1,
                                    f[2] = (1 & l) << 7,
                                    f[2] |= 8,
                                    f[3] = 0),
                                    {
                                        config: f,
                                        samplerate: p[s],
                                        channelCount: u,
                                        codec: "mp4a.40." + o,
                                        manifestCodec: c
                                    };
                            e.trigger(i.a.ERROR, {
                                type: a.b.MEDIA_ERROR,
                                details: a.a.FRAG_PARSING_ERROR,
                                fatal: !0,
                                reason: "invalid ADTS sampling index:" + s
                            })
                        }(t, r, n, o);
                        e.config = s.config,
                            e.samplerate = s.samplerate,
                            e.channelCount = s.channelCount,
                            e.codec = s.codec,
                            e.manifestCodec = s.manifestCodec,
                            d.b.log("parsed codec:" + e.codec + ",rate:" + s.samplerate + ",nb channel:" + s.channelCount)
                    }
                }
                function b(e) {
                    return 9216e4 / e
                }
                function E(e, t, r, i, a) {
                    var n = function(e, t, r, i, a) {
                        var n, o, s = e.length;
                        if (n = p(e, t),
                                o = v(e, t),
                            (o -= n) > 0 && t + n + o <= s)
                            return {
                                headerLength: n,
                                frameLength: o,
                                stamp: r + i * a
                            }
                    }(t, r, i, a, b(e.samplerate));
                    if (n) {
                        var o = n.stamp
                            , s = n.headerLength
                            , d = n.frameLength
                            , l = {
                            unit: t.subarray(r + s, r + s + d),
                            pts: o,
                            dts: o
                        };
                        return e.samples.push(l),
                            {
                                sample: l,
                                length: d + s
                            }
                    }
                }
                var R = r(4)
                    , _ = function() {
                    function e(e, t, r) {
                        this.observer = e,
                            this.config = r,
                            this.remuxer = t
                    }
                    var t = e.prototype;
                    return t.resetInitSegment = function(e, t, r) {
                        this._audioTrack = {
                            container: "audio/adts",
                            type: "audio",
                            id: 0,
                            sequenceNumber: 0,
                            isAAC: !0,
                            samples: [],
                            len: 0,
                            manifestCodec: t,
                            duration: r,
                            inputTimeScale: 9e4
                        }
                    }
                        ,
                        t.resetTimeStamp = function() {}
                        ,
                        e.probe = function(e) {
                            if (!e)
                                return !1;
                            for (var t = (R.a.getID3Data(e, 0) || []).length, r = e.length; t < r; t++)
                                if (m(e, t))
                                    return d.b.log("ADTS sync word found !"),
                                        !0;
                            return !1
                        }
                        ,
                        t.append = function(e, t, r, i) {
                            for (var a = this._audioTrack, n = R.a.getID3Data(e, 0) || [], o = R.a.getTimeStamp(n), s = Object(h.a)(o) ? 90 * o : 9e4 * t, l = 0, u = s, f = e.length, c = n.length, p = [{
                                pts: u,
                                dts: u,
                                data: n
                            }]; c < f - 1; )
                                if (g(e, c) && c + 5 < f) {
                                    y(a, this.observer, e, c, a.manifestCodec);
                                    var v = E(a, e, c, s, l);
                                    if (!v) {
                                        d.b.log("Unable to parse AAC frame");
                                        break
                                    }
                                    c += v.length,
                                        u = v.sample.pts,
                                        l++
                                } else
                                    R.a.isHeader(e, c) ? (n = R.a.getID3Data(e, c),
                                        p.push({
                                            pts: u,
                                            dts: u,
                                            data: n
                                        }),
                                        c += n.length) : c++;
                            this.remuxer.remux(a, {
                                samples: []
                            }, {
                                samples: p,
                                inputTimeScale: 9e4
                            }, {
                                samples: []
                            }, t, r, i)
                        }
                        ,
                        t.destroy = function() {}
                        ,
                        e
                }()
                    , T = r(9)
                    , S = {
                    BitratesMap: [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],
                    SamplingRateMap: [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3],
                    SamplesCoefficients: [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]],
                    BytesInSlot: [0, 1, 1, 4],
                    appendFrame: function(e, t, r, i, a) {
                        if (!(r + 24 > t.length)) {
                            var n = this.parseHeader(t, r);
                            if (n && r + n.frameLength <= t.length) {
                                var o = i + a * (9e4 * n.samplesPerFrame / n.sampleRate)
                                    , s = {
                                    unit: t.subarray(r, r + n.frameLength),
                                    pts: o,
                                    dts: o
                                };
                                return e.config = [],
                                    e.channelCount = n.channelCount,
                                    e.samplerate = n.sampleRate,
                                    e.samples.push(s),
                                    {
                                        sample: s,
                                        length: n.frameLength
                                    }
                            }
                        }
                    },
                    parseHeader: function(e, t) {
                        var r = e[t + 1] >> 3 & 3
                            , i = e[t + 1] >> 1 & 3
                            , a = e[t + 2] >> 4 & 15
                            , n = e[t + 2] >> 2 & 3
                            , o = e[t + 2] >> 1 & 1;
                        if (1 !== r && 0 !== a && 15 !== a && 3 !== n) {
                            var s = 3 === r ? 3 - i : 3 === i ? 3 : 4
                                , d = 1e3 * S.BitratesMap[14 * s + a - 1]
                                , l = 3 === r ? 0 : 2 === r ? 1 : 2
                                , u = S.SamplingRateMap[3 * l + n]
                                , f = e[t + 3] >> 6 == 3 ? 1 : 2
                                , h = S.SamplesCoefficients[r][i]
                                , c = S.BytesInSlot[i]
                                , p = 8 * h * c;
                            return {
                                sampleRate: u,
                                channelCount: f,
                                frameLength: parseInt(h * d / u + o, 10) * c,
                                samplesPerFrame: p
                            }
                        }
                    },
                    isHeaderPattern: function(e, t) {
                        return 255 === e[t] && 224 == (224 & e[t + 1]) && 0 != (6 & e[t + 1])
                    },
                    isHeader: function(e, t) {
                        return !!(t + 1 < e.length && this.isHeaderPattern(e, t))
                    },
                    probe: function(e, t) {
                        if (t + 1 < e.length && this.isHeaderPattern(e, t)) {
                            var r = this.parseHeader(e, t)
                                , i = 4;
                            r && r.frameLength && (i = r.frameLength);
                            var a = t + i;
                            if (a === e.length || a + 1 < e.length && this.isHeaderPattern(e, a))
                                return !0
                        }
                        return !1
                    }
                }
                    , A = S
                    , L = function() {
                    function e(e, t, r, i) {
                        this.decryptdata = r,
                            this.discardEPB = i,
                            this.decrypter = new f(e,t,{
                                removePKCS7Padding: !1
                            })
                    }
                    var t = e.prototype;
                    return t.decryptBuffer = function(e, t) {
                        this.decrypter.decrypt(e, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, t)
                    }
                        ,
                        t.decryptAacSample = function(e, t, r, i) {
                            var a = e[t].unit
                                , n = a.subarray(16, a.length - a.length % 16)
                                , o = n.buffer.slice(n.byteOffset, n.byteOffset + n.length)
                                , s = this;
                            this.decryptBuffer(o, (function(n) {
                                    n = new Uint8Array(n),
                                        a.set(n, 16),
                                    i || s.decryptAacSamples(e, t + 1, r)
                                }
                            ))
                        }
                        ,
                        t.decryptAacSamples = function(e, t, r) {
                            for (; ; t++) {
                                if (t >= e.length)
                                    return void r();
                                if (!(e[t].unit.length < 32)) {
                                    var i = this.decrypter.isSync();
                                    if (this.decryptAacSample(e, t, r, i),
                                            !i)
                                        return
                                }
                            }
                        }
                        ,
                        t.getAvcEncryptedData = function(e) {
                            for (var t = 16 * Math.floor((e.length - 48) / 160) + 16, r = new Int8Array(t), i = 0, a = 32; a <= e.length - 16; a += 160,
                                i += 16)
                                r.set(e.subarray(a, a + 16), i);
                            return r
                        }
                        ,
                        t.getAvcDecryptedUnit = function(e, t) {
                            t = new Uint8Array(t);
                            for (var r = 0, i = 32; i <= e.length - 16; i += 160,
                                r += 16)
                                e.set(t.subarray(r, r + 16), i);
                            return e
                        }
                        ,
                        t.decryptAvcSample = function(e, t, r, i, a, n) {
                            var o = this.discardEPB(a.data)
                                , s = this.getAvcEncryptedData(o)
                                , d = this;
                            this.decryptBuffer(s.buffer, (function(s) {
                                    a.data = d.getAvcDecryptedUnit(o, s),
                                    n || d.decryptAvcSamples(e, t, r + 1, i)
                                }
                            ))
                        }
                        ,
                        t.decryptAvcSamples = function(e, t, r, i) {
                            for (; ; t++,
                                         r = 0) {
                                if (t >= e.length)
                                    return void i();
                                for (var a = e[t].units; !(r >= a.length); r++) {
                                    var n = a[r];
                                    if (!(n.length <= 48 || 1 !== n.type && 5 !== n.type)) {
                                        var o = this.decrypter.isSync();
                                        if (this.decryptAvcSample(e, t, r, i, n, o),
                                                !o)
                                            return
                                    }
                                }
                            }
                        }
                        ,
                        e
                }()
                    , D = {
                    video: 1,
                    audio: 2,
                    id3: 3,
                    text: 4
                }
                    , w = function() {
                    function e(e, t, r, i) {
                        this.observer = e,
                            this.config = r,
                            this.typeSupported = i,
                            this.remuxer = t,
                            this.sampleAes = null
                    }
                    var t = e.prototype;
                    return t.setDecryptData = function(e) {
                        null != e && null != e.key && "SAMPLE-AES" === e.method ? this.sampleAes = new L(this.observer,this.config,e,this.discardEPB) : this.sampleAes = null
                    }
                        ,
                        e.probe = function(t) {
                            var r = e._syncOffset(t);
                            return !(r < 0) && (r && d.b.warn("MPEG2-TS detected but first sync word found @ offset " + r + ", junk ahead ?"),
                                !0)
                        }
                        ,
                        e._syncOffset = function(e) {
                            for (var t = Math.min(1e3, e.length - 564), r = 0; r < t; ) {
                                if (71 === e[r] && 71 === e[r + 188] && 71 === e[r + 376])
                                    return r;
                                r++
                            }
                            return -1
                        }
                        ,
                        e.createTrack = function(e, t) {
                            return {
                                container: "video" === e || "audio" === e ? "video/mp2t" : void 0,
                                type: e,
                                id: D[e],
                                pid: -1,
                                inputTimeScale: 9e4,
                                sequenceNumber: 0,
                                samples: [],
                                dropped: "video" === e ? 0 : void 0,
                                isAAC: "audio" === e || void 0,
                                duration: "audio" === e ? t : void 0
                            }
                        }
                        ,
                        t.resetInitSegment = function(t, r, i) {
                            this.pmtParsed = !1,
                                this._pmtId = -1,
                                this._audioTrack = e.createTrack("audio", i),
                                this._id3Track = e.createTrack("id3", i),
                                this._txtTrack = e.createTrack("text", i),
                                this.aacOverFlow = null,
                                this.aacLastPTS = null,
                                this.audioCodec = r,
                                this._duration = i
                        }
                        ,
                        t.resetTimeStamp = function() {}
                        ,
                        t.append = function(t, r, n, o) {
                            var s, l, u, f, h, c = t.length, p = !1;
                            this.contiguous = n;
                            var v = this.pmtParsed
                                , g = this._audioTrack
                                , m = this._id3Track
                                , y = g.pid
                                , b = m.pid
                                , E = this._pmtId
                                , R = g.pesData
                                , _ = m.pesData
                                , T = this._parsePAT
                                , S = this._parsePMT
                                , A = this._parsePES
                                , L = this._parseAACPES.bind(this)
                                , D = this._parseMPEGPES.bind(this)
                                , w = this._parseID3PES.bind(this)
                                , I = e._syncOffset(t);
                            for (c -= (c + I) % 188,
                                     s = I; s < c; s += 188)
                                if (71 === t[s]) {
                                    if (l = !!(64 & t[s + 1]),
                                            u = ((31 & t[s + 1]) << 8) + t[s + 2],
                                        (48 & t[s + 3]) >> 4 > 1) {
                                        if ((f = s + 5 + t[s + 4]) === s + 188)
                                            continue
                                    } else
                                        f = s + 4;
                                    switch (u) {
                                        case y:
                                            l && (R && (h = A(R)) && void 0 !== h.pts && (g.isAAC ? L(h) : D(h)),
                                                R = {
                                                    data: [],
                                                    size: 0
                                                }),
                                            R && (R.data.push(t.subarray(f, s + 188)),
                                                R.size += s + 188 - f);
                                            break;
                                        case b:
                                            l && (_ && (h = A(_)) && void 0 !== h.pts && w(h),
                                                _ = {
                                                    data: [],
                                                    size: 0
                                                }),
                                            _ && (_.data.push(t.subarray(f, s + 188)),
                                                _.size += s + 188 - f);
                                            break;
                                        case 0:
                                            l && (f += t[f] + 1),
                                                E = this._pmtId = T(t, f);
                                            break;
                                        case E:
                                            l && (f += t[f] + 1);
                                            var O = S(t, f, !0 === this.typeSupported.mpeg || !0 === this.typeSupported.mp3, null != this.sampleAes);
                                            (y = O.audio) > 0 && (g.pid = y,
                                                g.isAAC = O.isAAC),
                                            (b = O.id3) > 0 && (m.pid = b),
                                            p && !v && (d.b.log("reparse from beginning"),
                                                p = !1,
                                                s = I - 188),
                                                v = this.pmtParsed = !0;
                                            break;
                                        case 17:
                                        case 8191:
                                            break;
                                        default:
                                            p = !0
                                    }
                                } else
                                    this.observer.trigger(i.a.ERROR, {
                                        type: a.b.MEDIA_ERROR,
                                        details: a.a.FRAG_PARSING_ERROR,
                                        fatal: !1,
                                        reason: "TS packet did not start with 0x47"
                                    });
                            R && (h = A(R)) && void 0 !== h.pts ? (g.isAAC ? L(h) : D(h),
                                g.pesData = null) : (R && R.size && d.b.log("last AAC PES packet truncated,might overlap between fragments"),
                                g.pesData = R),
                                _ && (h = A(_)) && void 0 !== h.pts ? (w(h),
                                    m.pesData = null) : m.pesData = _,
                                null == this.sampleAes ? this.remuxer.remux(g, m, this._txtTrack, r, n, o) : this.decryptAndRemux(g, m, this._txtTrack, r, n, o)
                        }
                        ,
                        t.decryptAndRemux = function(e, t, r, i, a, n) {
                            if (e.samples && e.isAAC) {
                                var o = this;
                                this.sampleAes.decryptAacSamples(e.samples, 0, (function() {
                                        o.decryptAndRemuxAvc(e, t, r, i, a, n)
                                    }
                                ))
                            } else
                                this.decryptAndRemuxAvc(e, t, r, i, a, n)
                        }
                        ,
                        t.decryptAndRemuxAvc = function(e, t, r, i, a, n) {
                            if (videoTrack.samples) {
                                var o = this;
                                this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, (function() {
                                        o.remuxer.remux(e, t, r, i, a, n)
                                    }
                                ))
                            } else
                                this.remuxer.remux(e, t, r, i, a, n)
                        }
                        ,
                        t.destroy = function() {
                            this._initPTS = this._initDTS = void 0,
                                this._duration = 0
                        }
                        ,
                        t._parsePAT = function(e, t) {
                            return (31 & e[t + 10]) << 8 | e[t + 11]
                        }
                        ,
                        t._parsePMT = function(e, t, r, i) {
                            var a, n, o = {
                                audio: -1,
                                avc: -1,
                                id3: -1,
                                isAAC: !0
                            };
                            for (a = t + 3 + ((15 & e[t + 1]) << 8 | e[t + 2]) - 4,
                                     t += 12 + ((15 & e[t + 10]) << 8 | e[t + 11]); t < a; ) {
                                switch (n = (31 & e[t + 1]) << 8 | e[t + 2],
                                    e[t]) {
                                    case 207:
                                        if (!i) {
                                            d.b.log("unknown stream type:" + e[t]);
                                            break
                                        }
                                    case 15:
                                        -1 === o.audio && (o.audio = n);
                                        break;
                                    case 21:
                                        -1 === o.id3 && (o.id3 = n);
                                        break;
                                    case 219:
                                        if (!i) {
                                            d.b.log("unknown stream type:" + e[t]);
                                            break
                                        }
                                    case 27:
                                        -1 === o.avc && (o.avc = n);
                                        break;
                                    case 3:
                                    case 4:
                                        r ? -1 === o.audio && (o.audio = n,
                                            o.isAAC = !1) : d.b.log("MPEG audio found, not supported in this browser for now");
                                        break;
                                    case 36:
                                        d.b.warn("HEVC stream type found, not supported for now");
                                        break;
                                    default:
                                        d.b.log("unknown stream type:" + e[t])
                                }
                                t += 5 + ((15 & e[t + 3]) << 8 | e[t + 4])
                            }
                            return o
                        }
                        ,
                        t._parsePES = function(e) {
                            var t, r, i, a, n, o, s, l, u = 0, f = e.data;
                            if (!e || 0 === e.size)
                                return null;
                            for (; f[0].length < 19 && f.length > 1; ) {
                                var h = new Uint8Array(f[0].length + f[1].length);
                                h.set(f[0]),
                                    h.set(f[1], f[0].length),
                                    f[0] = h,
                                    f.splice(1, 1)
                            }
                            if (1 === ((t = f[0])[0] << 16) + (t[1] << 8) + t[2]) {
                                if ((i = (t[4] << 8) + t[5]) && i > e.size - 6)
                                    return null;
                                192 & (r = t[7]) && ((o = 536870912 * (14 & t[9]) + 4194304 * (255 & t[10]) + 16384 * (254 & t[11]) + 128 * (255 & t[12]) + (254 & t[13]) / 2) > 4294967295 && (o -= 8589934592),
                                    64 & r ? ((s = 536870912 * (14 & t[14]) + 4194304 * (255 & t[15]) + 16384 * (254 & t[16]) + 128 * (255 & t[17]) + (254 & t[18]) / 2) > 4294967295 && (s -= 8589934592),
                                    o - s > 54e5 && (d.b.warn(Math.round((o - s) / 9e4) + "s delta between PTS and DTS, align them"),
                                        o = s)) : s = o),
                                    l = (a = t[8]) + 9,
                                    e.size -= l,
                                    n = new Uint8Array(e.size);
                                for (var c = 0, p = f.length; c < p; c++) {
                                    var v = (t = f[c]).byteLength;
                                    if (l) {
                                        if (l > v) {
                                            l -= v;
                                            continue
                                        }
                                        t = t.subarray(l),
                                            v -= l,
                                            l = 0
                                    }
                                    n.set(t, u),
                                        u += v
                                }
                                return i && (i -= a + 3),
                                    {
                                        data: n,
                                        pts: o,
                                        dts: s,
                                        len: i
                                    }
                            }
                            return null
                        }
                        ,
                        t.pushAccesUnit = function(e, t) {
                            if (e.units.length && e.frame) {
                                var r = t.samples
                                    , i = r.length;
                                !this.config.forceKeyFrameOnDiscontinuity || !0 === e.key || t.sps && (i || this.contiguous) ? (e.id = i,
                                    r.push(e)) : t.dropped++
                            }
                            e.debug.length && d.b.log(e.pts + "/" + e.dts + ":" + e.debug)
                        }
                        ,
                        t._insertSampleInOrder = function(e, t) {
                            var r = e.length;
                            if (r > 0) {
                                if (t.pts >= e[r - 1].pts)
                                    e.push(t);
                                else
                                    for (var i = r - 1; i >= 0; i--)
                                        if (t.pts < e[i].pts) {
                                            e.splice(i, 0, t);
                                            break
                                        }
                            } else
                                e.push(t)
                        }
                        ,
                        t.discardEPB = function(e) {
                            for (var t, r, i = e.byteLength, a = [], n = 1; n < i - 2; )
                                0 === e[n] && 0 === e[n + 1] && 3 === e[n + 2] ? (a.push(n + 2),
                                    n += 2) : n++;
                            if (0 === a.length)
                                return e;
                            t = i - a.length,
                                r = new Uint8Array(t);
                            var o = 0;
                            for (n = 0; n < t; o++,
                                n++)
                                o === a[0] && (o++,
                                    a.shift()),
                                    r[n] = e[o];
                            return r
                        }
                        ,
                        t._parseAACPES = function(e) {
                            var t, r, n, o, s, l, u, f = this._audioTrack, h = e.data, c = e.pts, p = this.aacOverFlow, v = this.aacLastPTS;
                            if (p) {
                                var m = new Uint8Array(p.byteLength + h.byteLength);
                                m.set(p, 0),
                                    m.set(h, p.byteLength),
                                    h = m
                            }
                            for (n = 0,
                                     s = h.length; n < s - 1 && !g(h, n); n++)
                                ;
                            if (n && (n < s - 1 ? (l = "AAC PES did not start with ADTS header,offset:" + n,
                                    u = !1) : (l = "no ADTS header found in AAC PES",
                                    u = !0),
                                    d.b.warn("parsing error:" + l),
                                    this.observer.trigger(i.a.ERROR, {
                                        type: a.b.MEDIA_ERROR,
                                        details: a.a.FRAG_PARSING_ERROR,
                                        fatal: u,
                                        reason: l
                                    }),
                                    u))
                                return;
                            if (y(f, this.observer, h, n, this.audioCodec),
                                    r = 0,
                                    t = b(f.samplerate),
                                p && v) {
                                var R = v + t;
                                Math.abs(R - c) > 1 && (d.b.log("AAC: align PTS for overlapping frames by " + Math.round((R - c) / 90)),
                                    c = R)
                            }
                            for (; n < s; )
                                if (g(h, n) && n + 5 < s) {
                                    var _ = E(f, h, n, c, r);
                                    if (!_)
                                        break;
                                    n += _.length,
                                        o = _.sample.pts,
                                        r++
                                } else
                                    n++;
                            p = n < s ? h.subarray(n, s) : null,
                                this.aacOverFlow = p,
                                this.aacLastPTS = o
                        }
                        ,
                        t._parseMPEGPES = function(e) {
                            for (var t = e.data, r = t.length, i = 0, a = 0, n = e.pts; a < r; )
                                if (A.isHeader(t, a)) {
                                    var o = A.appendFrame(this._audioTrack, t, a, n, i);
                                    if (!o)
                                        break;
                                    a += o.length,
                                        i++
                                } else
                                    a++
                        }
                        ,
                        t._parseID3PES = function(e) {
                            this._id3Track.samples.push(e)
                        }
                        ,
                        e
                }()
                    , I = function() {
                    function e(e, t, r) {
                        this.observer = e,
                            this.config = r,
                            this.remuxer = t
                    }
                    var t = e.prototype;
                    return t.resetInitSegment = function(e, t, r) {
                        this._audioTrack = {
                            container: "audio/mpeg",
                            type: "audio",
                            id: -1,
                            sequenceNumber: 0,
                            isAAC: !1,
                            samples: [],
                            len: 0,
                            manifestCodec: t,
                            duration: r,
                            inputTimeScale: 9e4
                        }
                    }
                        ,
                        t.resetTimeStamp = function() {}
                        ,
                        e.probe = function(e) {
                            var t, r, i = R.a.getID3Data(e, 0);
                            if (i && void 0 !== R.a.getTimeStamp(i))
                                for (t = i.length,
                                         r = Math.min(e.length - 1, t + 100); t < r; t++)
                                    if (A.probe(e, t))
                                        return d.b.log("MPEG Audio sync word found !"),
                                            !0;
                            return !1
                        }
                        ,
                        t.append = function(e, t, r, i) {
                            for (var a = R.a.getID3Data(e, 0), n = R.a.getTimeStamp(a), o = n ? 90 * n : 9e4 * t, s = a.length, d = e.length, l = 0, u = 0, f = this._audioTrack, h = [{
                                pts: o,
                                dts: o,
                                data: a
                            }]; s < d; )
                                if (A.isHeader(e, s)) {
                                    var c = A.appendFrame(f, e, s, o, l);
                                    if (!c)
                                        break;
                                    s += c.length,
                                        u = c.sample.pts,
                                        l++
                                } else
                                    R.a.isHeader(e, s) ? (a = R.a.getID3Data(e, s),
                                        h.push({
                                            pts: u,
                                            dts: u,
                                            data: a
                                        }),
                                        s += a.length) : s++;
                            this.remuxer.remux(f, {
                                samples: []
                            }, {
                                samples: h,
                                inputTimeScale: 9e4
                            }, {
                                samples: []
                            }, t, r, i)
                        }
                        ,
                        t.destroy = function() {}
                        ,
                        e
                }()
                    , O = function() {
                    function e() {}
                    return e.getSilentFrame = function(e, t) {
                        switch (e) {
                            case "mp4a.40.2":
                                if (1 === t)
                                    return new Uint8Array([0, 200, 0, 128, 35, 128]);
                                if (2 === t)
                                    return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                                if (3 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                                if (4 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                                if (5 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                                if (6 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
                                break;
                            default:
                                if (1 === t)
                                    return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                if (2 === t)
                                    return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                if (3 === t)
                                    return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94])
                        }
                        return null
                    }
                        ,
                        e
                }()
                    , x = Math.pow(2, 32) - 1
                    , P = function() {
                    function e() {}
                    return e.init = function() {
                        var t;
                        for (t in e.types = {
                            avc1: [],
                            avcC: [],
                            btrt: [],
                            dinf: [],
                            dref: [],
                            esds: [],
                            ftyp: [],
                            hdlr: [],
                            mdat: [],
                            mdhd: [],
                            mdia: [],
                            mfhd: [],
                            minf: [],
                            moof: [],
                            moov: [],
                            mp4a: [],
                            ".mp3": [],
                            mvex: [],
                            mvhd: [],
                            pasp: [],
                            sdtp: [],
                            stbl: [],
                            stco: [],
                            stsc: [],
                            stsd: [],
                            stsz: [],
                            stts: [],
                            tfdt: [],
                            tfhd: [],
                            traf: [],
                            trak: [],
                            trun: [],
                            trex: [],
                            tkhd: [],
                            vmhd: [],
                            smhd: []
                        },
                            e.types)
                            e.types.hasOwnProperty(t) && (e.types[t] = [t.charCodeAt(0), t.charCodeAt(1), t.charCodeAt(2), t.charCodeAt(3)]);
                        var r = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0])
                            , i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                        e.HDLR_TYPES = {
                            video: r,
                            audio: i
                        };
                        var a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1])
                            , n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                        e.STTS = e.STSC = e.STCO = n,
                            e.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                            e.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
                            e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]),
                            e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
                        var o = new Uint8Array([105, 115, 111, 109])
                            , s = new Uint8Array([97, 118, 99, 49])
                            , d = new Uint8Array([0, 0, 0, 1]);
                        e.FTYP = e.box(e.types.ftyp, o, d, o, s),
                            e.DINF = e.box(e.types.dinf, e.box(e.types.dref, a))
                    }
                        ,
                        e.box = function(e) {
                            for (var t, r = Array.prototype.slice.call(arguments, 1), i = 8, a = r.length, n = a; a--; )
                                i += r[a].byteLength;
                            for ((t = new Uint8Array(i))[0] = i >> 24 & 255,
                                     t[1] = i >> 16 & 255,
                                     t[2] = i >> 8 & 255,
                                     t[3] = 255 & i,
                                     t.set(e, 4),
                                     a = 0,
                                     i = 8; a < n; a++)
                                t.set(r[a], i),
                                    i += r[a].byteLength;
                            return t
                        }
                        ,
                        e.hdlr = function(t) {
                            return e.box(e.types.hdlr, e.HDLR_TYPES[t])
                        }
                        ,
                        e.mdat = function(t) {
                            return e.box(e.types.mdat, t)
                        }
                        ,
                        e.mdhd = function(t, r) {
                            r *= t;
                            var i = Math.floor(r / (x + 1))
                                , a = Math.floor(r % (x + 1));
                            return e.box(e.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a, 85, 196, 0, 0]))
                        }
                        ,
                        e.mdia = function(t) {
                            return e.box(e.types.mdia, e.mdhd(t.timescale, t.duration), e.hdlr(t.type), e.minf(t))
                        }
                        ,
                        e.mfhd = function(t) {
                            return e.box(e.types.mfhd, new Uint8Array([0, 0, 0, 0, t >> 24, t >> 16 & 255, t >> 8 & 255, 255 & t]))
                        }
                        ,
                        e.minf = function(t) {
                            return "audio" === t.type ? e.box(e.types.minf, e.box(e.types.smhd, e.SMHD), e.DINF, e.stbl(t)) : e.box(e.types.minf, e.box(e.types.vmhd, e.VMHD), e.DINF, e.stbl(t))
                        }
                        ,
                        e.moof = function(t, r, i) {
                            return e.box(e.types.moof, e.mfhd(t), e.traf(i, r))
                        }
                        ,
                        e.moov = function(t) {
                            for (var r = t.length, i = []; r--; )
                                i[r] = e.trak(t[r]);
                            return e.box.apply(null, [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)].concat(i).concat(e.mvex(t)))
                        }
                        ,
                        e.mvex = function(t) {
                            for (var r = t.length, i = []; r--; )
                                i[r] = e.trex(t[r]);
                            return e.box.apply(null, [e.types.mvex].concat(i))
                        }
                        ,
                        e.mvhd = function(t, r) {
                            r *= t;
                            var i = Math.floor(r / (x + 1))
                                , a = Math.floor(r % (x + 1))
                                , n = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                            return e.box(e.types.mvhd, n)
                        }
                        ,
                        e.sdtp = function(t) {
                            var r, i, a = t.samples || [], n = new Uint8Array(4 + a.length);
                            for (i = 0; i < a.length; i++)
                                r = a[i].flags,
                                    n[i + 4] = r.dependsOn << 4 | r.isDependedOn << 2 | r.hasRedundancy;
                            return e.box(e.types.sdtp, n)
                        }
                        ,
                        e.stbl = function(t) {
                            return e.box(e.types.stbl, e.stsd(t), e.box(e.types.stts, e.STTS), e.box(e.types.stsc, e.STSC), e.box(e.types.stsz, e.STSZ), e.box(e.types.stco, e.STCO))
                        }
                        ,
                        e.avc1 = function(t) {
                            var r, i, a, n = [], o = [];
                            for (r = 0; r < t.sps.length; r++)
                                a = (i = t.sps[r]).byteLength,
                                    n.push(a >>> 8 & 255),
                                    n.push(255 & a),
                                    n = n.concat(Array.prototype.slice.call(i));
                            for (r = 0; r < t.pps.length; r++)
                                a = (i = t.pps[r]).byteLength,
                                    o.push(a >>> 8 & 255),
                                    o.push(255 & a),
                                    o = o.concat(Array.prototype.slice.call(i));
                            var s = e.box(e.types.avcC, new Uint8Array([1, n[3], n[4], n[5], 255, 224 | t.sps.length].concat(n).concat([t.pps.length]).concat(o)))
                                , d = t.width
                                , l = t.height
                                , u = t.pixelRatio[0]
                                , f = t.pixelRatio[1];
                            return e.box(e.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, d >> 8 & 255, 255 & d, l >> 8 & 255, 255 & l, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), s, e.box(e.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), e.box(e.types.pasp, new Uint8Array([u >> 24, u >> 16 & 255, u >> 8 & 255, 255 & u, f >> 24, f >> 16 & 255, f >> 8 & 255, 255 & f])))
                        }
                        ,
                        e.esds = function(e) {
                            var t = e.config.length;
                            return new Uint8Array([0, 0, 0, 0, 3, 23 + t, 0, 1, 0, 4, 15 + t, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([t]).concat(e.config).concat([6, 1, 2]))
                        }
                        ,
                        e.mp4a = function(t) {
                            var r = t.samplerate;
                            return e.box(e.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t.channelCount, 0, 16, 0, 0, 0, 0, r >> 8 & 255, 255 & r, 0, 0]), e.box(e.types.esds, e.esds(t)))
                        }
                        ,
                        e.mp3 = function(t) {
                            var r = t.samplerate;
                            return e.box(e.types[".mp3"], new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t.channelCount, 0, 16, 0, 0, 0, 0, r >> 8 & 255, 255 & r, 0, 0]))
                        }
                        ,
                        e.stsd = function(t) {
                            return "audio" === t.type ? t.isAAC || "mp3" !== t.codec ? e.box(e.types.stsd, e.STSD, e.mp4a(t)) : e.box(e.types.stsd, e.STSD, e.mp3(t)) : e.box(e.types.stsd, e.STSD, e.avc1(t))
                        }
                        ,
                        e.tkhd = function(t) {
                            var r = t.id
                                , i = t.duration * t.timescale
                                , a = t.width
                                , n = t.height
                                , o = Math.floor(i / (x + 1))
                                , s = Math.floor(i % (x + 1));
                            return e.box(e.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r >> 24 & 255, r >> 16 & 255, r >> 8 & 255, 255 & r, 0, 0, 0, 0, o >> 24, o >> 16 & 255, o >> 8 & 255, 255 & o, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, a >> 8 & 255, 255 & a, 0, 0, n >> 8 & 255, 255 & n, 0, 0]))
                        }
                        ,
                        e.traf = function(t, r) {
                            var i = e.sdtp(t)
                                , a = t.id
                                , n = Math.floor(r / (x + 1))
                                , o = Math.floor(r % (x + 1));
                            return e.box(e.types.traf, e.box(e.types.tfhd, new Uint8Array([0, 0, 0, 0, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a])), e.box(e.types.tfdt, new Uint8Array([1, 0, 0, 0, n >> 24, n >> 16 & 255, n >> 8 & 255, 255 & n, o >> 24, o >> 16 & 255, o >> 8 & 255, 255 & o])), e.trun(t, i.length + 16 + 20 + 8 + 16 + 8 + 8), i)
                        }
                        ,
                        e.trak = function(t) {
                            return t.duration = t.duration || 4294967295,
                                e.box(e.types.trak, e.tkhd(t), e.mdia(t))
                        }
                        ,
                        e.trex = function(t) {
                            var r = t.id;
                            return e.box(e.types.trex, new Uint8Array([0, 0, 0, 0, r >> 24, r >> 16 & 255, r >> 8 & 255, 255 & r, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]))
                        }
                        ,
                        e.trun = function(t, r) {
                            var i, a, n, o, s, d, l = t.samples || [], u = l.length, f = 12 + 16 * u, h = new Uint8Array(f);
                            for (r += 8 + f,
                                     h.set([0, 0, 15, 1, u >>> 24 & 255, u >>> 16 & 255, u >>> 8 & 255, 255 & u, r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, 255 & r], 0),
                                     i = 0; i < u; i++)
                                n = (a = l[i]).duration,
                                    o = a.size,
                                    s = a.flags,
                                    d = a.cts,
                                    h.set([n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, 255 & n, o >>> 24 & 255, o >>> 16 & 255, o >>> 8 & 255, 255 & o, s.isLeading << 2 | s.dependsOn, s.isDependedOn << 6 | s.hasRedundancy << 4 | s.paddingValue << 1 | s.isNonSync, 61440 & s.degradPrio, 15 & s.degradPrio, d >>> 24 & 255, d >>> 16 & 255, d >>> 8 & 255, 255 & d], 12 + 16 * i);
                            return e.box(e.types.trun, h)
                        }
                        ,
                        e.initSegment = function(t) {
                            e.types || e.init();
                            var r, i = e.moov(t);
                            return (r = new Uint8Array(e.FTYP.byteLength + i.byteLength)).set(e.FTYP),
                                r.set(i, e.FTYP.byteLength),
                                r
                        }
                        ,
                        e
                }()
                    , k = 9e4;
                function C(e, t, r, i) {
                    void 0 === r && (r = 1),
                    void 0 === i && (i = !1);
                    var a = e * t * r;
                    return i ? Math.round(a) : a
                }
                function F(e, t) {
                    return void 0 === t && (t = !1),
                        C(e, 1e3, 1 / k, t)
                }
                function M(e, t) {
                    return void 0 === t && (t = 1),
                        C(e, k, 1 / t)
                }
                var N, U = M(10), B = (M(.2),
                    function() {
                        function e(e, t, r, i) {
                            this.observer = e,
                                this.config = t,
                                this.typeSupported = r;
                            var a = navigator.userAgent;
                            this.isSafari = i && i.indexOf("Apple") > -1 && a && !a.match("CriOS"),
                                this.ISGenerated = !1
                        }
                        var t = e.prototype;
                        return t.destroy = function() {}
                            ,
                            t.resetTimeStamp = function(e) {
                                this._initPTS = this._initDTS = e
                            }
                            ,
                            t.resetInitSegment = function() {
                                this.ISGenerated = !1
                            }
                            ,
                            t.remux = function(e, t, r, a, n, o) {
                                if (this.ISGenerated || this.generateIS(e, a),
                                        this.ISGenerated) {
                                    var s = a;
                                    if (e.samples.length) {
                                        e.timescale || (d.b.warn("regenerate InitSegment as audio detected"),
                                            this.generateIS(e, a));
                                        this.remuxAudio(e, s, n, o)
                                    }
                                }
                                t.samples.length && this.remuxID3(t, a),
                                r.samples.length && this.remuxText(r, a),
                                    this.observer.trigger(i.a.FRAG_PARSED)
                            }
                            ,
                            t.generateIS = function(e, t) {
                                var r, n, o = this.observer, s = e.samples, l = this.typeSupported, u = "audio/mp4", f = {}, h = {
                                    tracks: f
                                }, c = void 0 === this._initPTS;
                                c && (r = n = 1 / 0),
                                e.config && s.length && (e.timescale = e.samplerate,
                                    d.b.log("audio sampling rate : " + e.samplerate),
                                e.isAAC || (l.mpeg ? (u = "audio/mpeg",
                                    e.codec = "") : l.mp3 && (e.codec = "mp3")),
                                    f.audio = {
                                        container: u,
                                        codec: e.codec,
                                        initSegment: !e.isAAC && l.mpeg ? new Uint8Array : P.initSegment([e]),
                                        metadata: {
                                            channelCount: e.channelCount
                                        }
                                    },
                                c && (r = n = s[0].pts - e.inputTimeScale * t)),
                                    Object.keys(f).length ? (o.trigger(i.a.FRAG_PARSING_INIT_SEGMENT, h),
                                        this.ISGenerated = !0,
                                    c && (this._initPTS = r,
                                        this._initDTS = n)) : o.trigger(i.a.ERROR, {
                                        type: a.b.MEDIA_ERROR,
                                        details: a.a.FRAG_PARSING_ERROR,
                                        fatal: !1,
                                        reason: "no audio/video samples found"
                                    })
                            }
                            ,
                            t.remuxAudio = function(e, t, r, n) {
                                var o, s, l, u, f, h, c = e.inputTimeScale, p = e.timescale, v = c / p, g = (e.isAAC ? 1024 : 1152) * v, m = this._PTSNormalize, y = this._initPTS, b = !e.isAAC && this.typeSupported.mpeg, E = b ? 0 : 8, R = e.samples, _ = [], T = this.nextAudioPts;
                                if (r |= R.length && T && (n && Math.abs(t - T / c) < .1 || Math.abs(R[0].pts - T - y) < 20 * g),
                                        R.forEach((function(e) {
                                                e.pts = e.dts = m(e.pts - y, t * c)
                                            }
                                        )),
                                    0 !== (R = R.filter((function(e) {
                                            return e.pts >= 0
                                        }
                                    ))).length) {
                                    if (r || (T = n ? t * c : R[0].pts),
                                            e.isAAC)
                                        for (var S = this.config.maxAudioFramesDrift, A = 0, L = T; A < R.length; ) {
                                            var D, w = R[A];
                                            if ((D = w.pts - L) <= -S * g)
                                                d.b.warn("Dropping 1 audio frame @ " + F(L, !0) + " ms due to " + F(D, !0) + " ms overlap."),
                                                    R.splice(A, 1);
                                            else if (D >= S * g && D < U && L) {
                                                var I = Math.round(D / g);
                                                d.b.warn("Injecting " + I + " audio frames @ " + F(L, !0) + " ms due to " + F(L, !0) + " ms gap.");
                                                for (var x = 0; x < I; x++) {
                                                    var k = Math.max(L, 0);
                                                    (s = O.getSilentFrame(e.manifestCodec || e.codec, e.channelCount)) || (d.b.log("Unable to get silent frame for given audio codec; duplicating last frame instead."),
                                                        s = w.unit.subarray()),
                                                        R.splice(A, 0, {
                                                            unit: s,
                                                            pts: k,
                                                            dts: k
                                                        }),
                                                        L += g,
                                                        A++
                                                }
                                                w.pts = w.dts = L,
                                                    L += g,
                                                    A++
                                            } else
                                                Math.abs(D),
                                                    w.pts = w.dts = L,
                                                    L += g,
                                                    A++
                                        }
                                    for (var C = R.length, M = 0; C--; )
                                        M += R[C].unit.byteLength;
                                    for (var N = 0, B = R.length; N < B; N++) {
                                        var G = R[N]
                                            , j = G.unit
                                            , H = G.pts;
                                        if (void 0 !== h)
                                            o.duration = Math.round((H - h) / v);
                                        else {
                                            var K = H - T
                                                , V = 0;
                                            if (r && e.isAAC && K) {
                                                if (K > 0 && K < U)
                                                    V = Math.round((H - T) / g),
                                                        d.b.log(F(K, !0) + " ms hole between AAC samples detected,filling it"),
                                                    V > 0 && ((s = O.getSilentFrame(e.manifestCodec || e.codec, e.channelCount)) || (s = j.subarray()),
                                                        M += V * s.length);
                                                else if (K < -12) {
                                                    d.b.log("drop overlapping AAC sample, expected/parsed/delta: " + F(T, !0) + " ms / " + F(H, !0) + " ms / " + F(-K, !0) + " ms"),
                                                        M -= j.byteLength;
                                                    continue
                                                }
                                                H = T
                                            }
                                            if (f = H,
                                                    !(M > 0))
                                                return;
                                            M += E;
                                            try {
                                                l = new Uint8Array(M)
                                            } catch (e) {
                                                return void this.observer.trigger(i.a.ERROR, {
                                                    type: a.b.MUX_ERROR,
                                                    details: a.a.REMUX_ALLOC_ERROR,
                                                    fatal: !1,
                                                    bytes: M,
                                                    reason: "fail allocating audio mdat " + M
                                                })
                                            }
                                            b || (new DataView(l.buffer).setUint32(0, M),
                                                l.set(P.types.mdat, 4));
                                            for (var W = 0; W < V; W++)
                                                (s = O.getSilentFrame(e.manifestCodec || e.codec, e.channelCount)) || (d.b.log("Unable to get silent frame for given audio codec; duplicating this frame instead."),
                                                    s = j.subarray()),
                                                    l.set(s, E),
                                                    E += s.byteLength,
                                                    o = {
                                                        size: s.byteLength,
                                                        cts: 0,
                                                        duration: 1024,
                                                        flags: {
                                                            isLeading: 0,
                                                            isDependedOn: 0,
                                                            hasRedundancy: 0,
                                                            degradPrio: 0,
                                                            dependsOn: 1
                                                        }
                                                    },
                                                    _.push(o)
                                        }
                                        l.set(j, E);
                                        var Y = j.byteLength;
                                        E += Y,
                                            o = {
                                                size: Y,
                                                cts: 0,
                                                duration: 0,
                                                flags: {
                                                    isLeading: 0,
                                                    isDependedOn: 0,
                                                    hasRedundancy: 0,
                                                    degradPrio: 0,
                                                    dependsOn: 1
                                                }
                                            },
                                            _.push(o),
                                            h = H
                                    }
                                    var q = 0;
                                    if ((C = _.length) >= 2 && (q = _[C - 2].duration,
                                            o.duration = q),
                                            C) {
                                        this.nextAudioPts = T = h + v * q,
                                            e.samples = _,
                                            u = b ? new Uint8Array : P.moof(e.sequenceNumber++, f / v, e),
                                            e.samples = [];
                                        var z = f / c
                                            , X = T / c
                                            , Q = {
                                            data1: u,
                                            data2: l,
                                            startPTS: z,
                                            endPTS: X,
                                            startDTS: z,
                                            endDTS: X,
                                            type: "audio",
                                            hasAudio: !0,
                                            hasVideo: !1,
                                            nb: C
                                        };
                                        return this.observer.trigger(i.a.FRAG_PARSING_DATA, Q),
                                            Q
                                    }
                                    return null
                                }
                            }
                            ,
                            t.remuxEmptyAudio = function(e, t, r, i) {
                                var a = e.inputTimeScale
                                    , n = a / (e.samplerate ? e.samplerate : a)
                                    , o = this.nextAudioPts
                                    , s = (void 0 !== o ? o : i.startDTS * a) + this._initDTS
                                    , l = i.endDTS * a + this._initDTS
                                    , u = 1024 * n
                                    , f = Math.ceil((l - s) / u)
                                    , h = O.getSilentFrame(e.manifestCodec || e.codec, e.channelCount);
                                if (d.b.warn("remux empty Audio"),
                                        h) {
                                    for (var c = [], p = 0; p < f; p++) {
                                        var v = s + p * u;
                                        c.push({
                                            unit: h,
                                            pts: v,
                                            dts: v
                                        })
                                    }
                                    e.samples = c,
                                        this.remuxAudio(e, t, r)
                                } else
                                    d.b.trace("Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!")
                            }
                            ,
                            t.remuxID3 = function(e) {
                                var t, r = e.samples.length, a = e.inputTimeScale, n = this._initPTS, o = this._initDTS;
                                if (r) {
                                    for (var s = 0; s < r; s++)
                                        (t = e.samples[s]).pts = (t.pts - n) / a,
                                            t.dts = (t.dts - o) / a;
                                    this.observer.trigger(i.a.FRAG_PARSING_METADATA, {
                                        samples: e.samples
                                    })
                                }
                                e.samples = []
                            }
                            ,
                            t.remuxText = function(e) {
                                e.samples.sort((function(e, t) {
                                        return e.pts - t.pts
                                    }
                                ));
                                var t, r = e.samples.length, a = e.inputTimeScale, n = this._initPTS;
                                if (r) {
                                    for (var o = 0; o < r; o++)
                                        (t = e.samples[o]).pts = (t.pts - n) / a;
                                    this.observer.trigger(i.a.FRAG_PARSING_USERDATA, {
                                        samples: e.samples
                                    })
                                }
                                e.samples = []
                            }
                            ,
                            t._PTSNormalize = function(e, t) {
                                var r;
                                if (void 0 === t)
                                    return e;
                                for (r = t < e ? -8589934592 : 8589934592; Math.abs(e - t) > 4294967296; )
                                    e += r;
                                return e
                            }
                            ,
                            e
                    }()), G = function() {
                    function e(e) {
                        this.observer = e
                    }
                    var t = e.prototype;
                    return t.destroy = function() {}
                        ,
                        t.resetTimeStamp = function() {}
                        ,
                        t.resetInitSegment = function() {}
                        ,
                        t.remux = function(e, t, r, a, n, o, s) {
                            var d = this.observer
                                , l = "";
                            e && (l += "audio"),
                                d.trigger(i.a.FRAG_PARSING_DATA, {
                                    data1: s,
                                    startPTS: a,
                                    startDTS: a,
                                    type: l,
                                    hasAudio: !!e,
                                    hasVideo: !1,
                                    //!!videoTrack,
                                    nb: 1,
                                    dropped: 0
                                }),
                                d.trigger(i.a.FRAG_PARSED)
                        }
                        ,
                        e
                }(), j = Object(l.a)();
                try {
                    N = j.performance.now.bind(j.performance)
                } catch (e) {
                    d.b.debug("Unable to use Performance API on this environment"),
                        N = j.Date.now
                }
                var H = function() {
                    function e(e, t, r, i) {
                        this.observer = e,
                            this.typeSupported = t,
                            this.config = r,
                            this.vendor = i
                    }
                    var t = e.prototype;
                    return t.destroy = function() {
                        var e = this.demuxer;
                        e && e.destroy()
                    }
                        ,
                        t.push = function(e, t, r, a, n, o, s, d, l, u, h) {
                            var c = this;
                            if (e.byteLength > 0 && null != t && null != t.key && "AES-128" === t.method) {
                                var p = this.decrypter;
                                null == p && (p = this.decrypter = new f(this.observer,this.config));
                                var v = N();
                                p.decrypt(e, t.key.buffer, t.iv.buffer, (function(e) {
                                        var f = N();
                                        c.observer.trigger(i.a.FRAG_DECRYPTED, {
                                            stats: {
                                                tstart: v,
                                                tdecrypt: f
                                            }
                                        }),
                                            c.pushDecrypted(new Uint8Array(e), t, new Uint8Array(r), a, n, o, s, d, l, u, h)
                                    }
                                ))
                            } else
                                this.pushDecrypted(new Uint8Array(e), t, new Uint8Array(r), a, n, o, s, d, l, u, h)
                        }
                        ,
                        t.pushDecrypted = function(e, t, r, n, o, s, d, l, u, f, h) {
                            var c = this.demuxer;
                            if (!c || (s || d) && !this.probe(e)) {
                                for (var p = this.observer, v = this.typeSupported, g = this.config, m = [{
                                    demux: w,
                                    remux: B
                                }, {
                                    demux: T.a,
                                    remux: G
                                }, {
                                    demux: _,
                                    remux: B
                                }, {
                                    demux: I,
                                    remux: B
                                }], y = 0, b = m.length; y < b; y++) {
                                    var E = m[y]
                                        , R = E.demux.probe;
                                    if (R(e)) {
                                        var S = this.remuxer = new E.remux(p,g,v,this.vendor);
                                        c = new E.demux(p,S,g,v),
                                            this.probe = R;
                                        break
                                    }
                                }
                                if (!c)
                                    return void p.trigger(i.a.ERROR, {
                                        type: a.b.MEDIA_ERROR,
                                        details: a.a.FRAG_PARSING_ERROR,
                                        fatal: !0,
                                        reason: "no demux matching with content found"
                                    });
                                this.demuxer = c
                            }
                            var A = this.remuxer;
                            (s || d) && (c.resetInitSegment(r, n, u),
                                A.resetInitSegment()),
                            s && (c.resetTimeStamp(h),
                                A.resetTimeStamp(h)),
                            "function" == typeof c.setDecryptData && c.setDecryptData(t),
                                c.append(e, o, l, f)
                        }
                        ,
                        e
                }();
                t.a = H
            }
            , function(e, t, r) {
                "use strict";
                var i = r(0)
                    , a = r(1)
                    , n = Math.pow(2, 32) - 1
                    , o = function() {
                    function e(e, t) {
                        this.observer = e,
                            this.remuxer = t
                    }
                    var t = e.prototype;
                    return t.resetTimeStamp = function(e) {
                        this.initPTS = e
                    }
                        ,
                        t.resetInitSegment = function(t, r, i) {
                            if (t && t.byteLength) {
                                null == r && (r = "mp4a.40.5");
                                var n = {};
                                (this.initData = e.parseInitSegment(t)).audio && (n.audio = {
                                    container: "audio/mp4",
                                    codec: r,
                                    initSegment: i ? t : null
                                }),
                                    this.observer.trigger(a.a.FRAG_PARSING_INIT_SEGMENT, {
                                        tracks: n
                                    })
                            } else
                                r && (this.audioCodec = r)
                        }
                        ,
                        e.probe = function(t) {
                            return e.findBox({
                                data: t,
                                start: 0,
                                end: Math.min(t.length, 16384)
                            }, ["moof"]).length > 0
                        }
                        ,
                        e.bin2str = function(e) {
                            return String.fromCharCode.apply(null, e)
                        }
                        ,
                        e.readUint16 = function(e, t) {
                            e.data && (t += e.start,
                                e = e.data);
                            var r = e[t] << 8 | e[t + 1];
                            return r < 0 ? 65536 + r : r
                        }
                        ,
                        e.readUint32 = function(e, t) {
                            e.data && (t += e.start,
                                e = e.data);
                            var r = e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3];
                            return r < 0 ? 4294967296 + r : r
                        }
                        ,
                        e.writeUint32 = function(e, t, r) {
                            e.data && (t += e.start,
                                e = e.data),
                                e[t] = r >> 24,
                                e[t + 1] = r >> 16 & 255,
                                e[t + 2] = r >> 8 & 255,
                                e[t + 3] = 255 & r
                        }
                        ,
                        e.findBox = function(t, r) {
                            var i, a, n, o, s, d, l = [];
                            if (t.data ? (s = t.start,
                                    n = t.end,
                                    t = t.data) : (s = 0,
                                    n = t.byteLength),
                                    !r.length)
                                return null;
                            for (i = s; i < n; )
                                d = (a = e.readUint32(t, i)) > 1 ? i + a : n,
                                e.bin2str(t.subarray(i + 4, i + 8)) === r[0] && (1 === r.length ? l.push({
                                    data: t,
                                    start: i + 8,
                                    end: d
                                }) : (o = e.findBox({
                                    data: t,
                                    start: i + 8,
                                    end: d
                                }, r.slice(1))).length && (l = l.concat(o))),
                                    i = d;
                            return l
                        }
                        ,
                        e.parseSegmentIndex = function(t) {
                            var r, i = e.findBox(t, ["moov"])[0], a = i ? i.end : null, n = 0, o = e.findBox(t, ["sidx"]);
                            if (!o || !o[0])
                                return null;
                            r = [];
                            var s = (o = o[0]).data[0];
                            n = 0 === s ? 8 : 16;
                            var d = e.readUint32(o, n);
                            n += 4;
                            n += 0 === s ? 8 : 16,
                                n += 2;
                            var l = o.end + 0
                                , u = e.readUint16(o, n);
                            n += 2;
                            for (var f = 0; f < u; f++) {
                                var h = n
                                    , c = e.readUint32(o, h);
                                h += 4;
                                var p = 2147483647 & c;
                                if (1 === (2147483648 & c) >>> 31)
                                    return void console.warn("SIDX has hierarchical references (not supported)");
                                var v = e.readUint32(o, h);
                                h += 4,
                                    r.push({
                                        referenceSize: p,
                                        subsegmentDuration: v,
                                        info: {
                                            duration: v / d,
                                            start: l,
                                            end: l + p - 1
                                        }
                                    }),
                                    l += p,
                                    n = h += 4
                            }
                            return {
                                earliestPresentationTime: 0,
                                timescale: d,
                                version: s,
                                referencesCount: u,
                                references: r,
                                moovEndOffset: a
                            }
                        }
                        ,
                        e.parseInitSegment = function(t) {
                            var r = [];
                            return e.findBox(t, ["moov", "trak"]).forEach((function(t) {
                                    var a = e.findBox(t, ["tkhd"])[0];
                                    if (a) {
                                        var n = a.data[a.start]
                                            , o = 0 === n ? 12 : 20
                                            , s = e.readUint32(a, o)
                                            , d = e.findBox(t, ["mdia", "mdhd"])[0];
                                        if (d) {
                                            o = 0 === (n = d.data[d.start]) ? 12 : 20;
                                            var l = e.readUint32(d, o)
                                                , u = e.findBox(t, ["mdia", "hdlr"])[0];
                                            if (u) {
                                                var f = {
                                                    soun: "audio",
                                                    vide: "video"
                                                }[e.bin2str(u.data.subarray(u.start + 8, u.start + 12))];
                                                if (f) {
                                                    var h = e.findBox(t, ["mdia", "minf", "stbl", "stsd"]);
                                                    if (h.length) {
                                                        h = h[0];
                                                        var c = e.bin2str(h.data.subarray(h.start + 12, h.start + 16));
                                                        i.b.log("MP4Demuxer:" + f + ":" + c + " found")
                                                    }
                                                    r[s] = {
                                                        timescale: l,
                                                        type: f
                                                    },
                                                        r[f] = {
                                                            timescale: l,
                                                            id: s
                                                        }
                                                }
                                            }
                                        }
                                    }
                                }
                            )),
                                r
                        }
                        ,
                        e.getStartDTS = function(t, r) {
                            var i, a, n;
                            return i = e.findBox(r, ["moof", "traf"]),
                                a = [].concat.apply([], i.map((function(r) {
                                        return e.findBox(r, ["tfhd"]).map((function(i) {
                                                var a, n;
                                                return a = e.readUint32(i, 4),
                                                    n = t[a].timescale || 9e4,
                                                e.findBox(r, ["tfdt"]).map((function(t) {
                                                        var r, i;
                                                        return r = t.data[t.start],
                                                            i = e.readUint32(t, 4),
                                                        1 === r && (i *= Math.pow(2, 32),
                                                            i += e.readUint32(t, 8)),
                                                            i
                                                    }
                                                ))[0] / n
                                            }
                                        ))
                                    }
                                ))),
                                n = Math.min.apply(null, a),
                                isFinite(n) ? n : 0
                        }
                        ,
                        e.offsetStartDTS = function(t, r, i) {
                            e.findBox(r, ["moof", "traf"]).map((function(r) {
                                    return e.findBox(r, ["tfhd"]).map((function(a) {
                                            var o = e.readUint32(a, 4)
                                                , s = t[o].timescale || 9e4;
                                            e.findBox(r, ["tfdt"]).map((function(t) {
                                                    var r = t.data[t.start]
                                                        , a = e.readUint32(t, 4);
                                                    if (0 === r)
                                                        e.writeUint32(t, 4, a - i * s);
                                                    else {
                                                        a *= Math.pow(2, 32),
                                                            a += e.readUint32(t, 8),
                                                            a -= i * s,
                                                            a = Math.max(a, 0);
                                                        var o = Math.floor(a / (n + 1))
                                                            , d = Math.floor(a % (n + 1));
                                                        e.writeUint32(t, 4, o),
                                                            e.writeUint32(t, 8, d)
                                                    }
                                                }
                                            ))
                                        }
                                    ))
                                }
                            ))
                        }
                        ,
                        t.append = function(t, r, i, n) {
                            var o = this.initData;
                            o || (this.resetInitSegment(t, this.audioCodec, !1),
                                o = this.initData);
                            var s, d = this.initPTS;
                            if (void 0 === d) {
                                var l = e.getStartDTS(o, t);
                                this.initPTS = d = l - r,
                                    this.observer.trigger(a.a.INIT_PTS_FOUND, {
                                        initPTS: d
                                    })
                            }
                            e.offsetStartDTS(o, t, d),
                                s = e.getStartDTS(o, t),
                                this.remuxer.remux(o.audio, null, null, s, i, n, t)
                        }
                        ,
                        t.destroy = function() {}
                        ,
                        e
                }();
                t.a = o
            }
            , function(e, t) {
                e.exports = void 0
            }
            , function(e, t, r) {
                function i(e) {
                    var t = {};
                    function r(i) {
                        if (t[i])
                            return t[i].exports;
                        var a = t[i] = {
                            i: i,
                            l: !1,
                            exports: {}
                        };
                        return e[i].call(a.exports, a, a.exports, r),
                            a.l = !0,
                            a.exports
                    }
                    r.m = e,
                        r.c = t,
                        r.i = function(e) {
                            return e
                        }
                        ,
                        r.d = function(e, t, i) {
                            r.o(e, t) || Object.defineProperty(e, t, {
                                configurable: !1,
                                enumerable: !0,
                                get: i
                            })
                        }
                        ,
                        r.r = function(e) {
                            Object.defineProperty(e, "__esModule", {
                                value: !0
                            })
                        }
                        ,
                        r.n = function(e) {
                            var t = e && e.__esModule ? function() {
                                    return e.default
                                }
                                : function() {
                                    return e
                                }
                            ;
                            return r.d(t, "a", t),
                                t
                        }
                        ,
                        r.o = function(e, t) {
                            return Object.prototype.hasOwnProperty.call(e, t)
                        }
                        ,
                        r.p = "/",
                        r.oe = function(e) {
                            throw console.error(e),
                                e
                        }
                    ;
                    var i = r(r.s = ENTRY_MODULE);
                    return i.default || i
                }
                var a = "[\\.|\\-|\\+|\\w|/|@]+"
                    , n = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?(" + a + ").*?\\)";
                function o(e) {
                    return (e + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&")
                }
                function s(e, t, i) {
                    var s = {};
                    s[i] = [];
                    var d = t.toString()
                        , l = d.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                    if (!l)
                        return s;
                    for (var u, f = l[1], h = new RegExp("(\\\\n|\\W)" + o(f) + n,"g"); u = h.exec(d); )
                        "dll-reference" !== u[3] && s[i].push(u[3]);
                    for (h = new RegExp("\\(" + o(f) + '\\("(dll-reference\\s(' + a + '))"\\)\\)' + n,"g"); u = h.exec(d); )
                        e[u[2]] || (s[i].push(u[1]),
                            e[u[2]] = r(u[1]).m),
                            s[u[2]] = s[u[2]] || [],
                            s[u[2]].push(u[4]);
                    for (var c, p = Object.keys(s), v = 0; v < p.length; v++)
                        for (var g = 0; g < s[p[v]].length; g++)
                            c = s[p[v]][g],
                            isNaN(1 * c) || (s[p[v]][g] = 1 * s[p[v]][g]);
                    return s
                }
                function d(e) {
                    return Object.keys(e).reduce((function(t, r) {
                            return t || e[r].length > 0
                        }
                    ), !1)
                }
                e.exports = function(e, t) {
                    t = t || {};
                    var a = {
                        main: r.m
                    }
                        , n = t.all ? {
                        main: Object.keys(a.main)
                    } : function(e, t) {
                        for (var r = {
                            main: [t]
                        }, i = {
                            main: []
                        }, a = {
                            main: {}
                        }; d(r); )
                            for (var n = Object.keys(r), o = 0; o < n.length; o++) {
                                var l = n[o]
                                    , u = r[l].pop();
                                if (a[l] = a[l] || {},
                                    !a[l][u] && e[l][u]) {
                                    a[l][u] = !0,
                                        i[l] = i[l] || [],
                                        i[l].push(u);
                                    for (var f = s(e, e[l][u], l), h = Object.keys(f), c = 0; c < h.length; c++)
                                        r[h[c]] = r[h[c]] || [],
                                            r[h[c]] = r[h[c]].concat(f[h[c]])
                                }
                            }
                        return i
                    }(a, e)
                        , o = "";
                    Object.keys(n).filter((function(e) {
                            return "main" !== e
                        }
                    )).forEach((function(e) {
                            for (var t = 0; n[e][t]; )
                                t++;
                            n[e].push(t),
                                a[e][t] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",
                                o = o + "var " + e + " = (" + i.toString().replace("ENTRY_MODULE", JSON.stringify(t)) + ")({" + n[e].map((function(t) {
                                        return JSON.stringify(t) + ": " + a[e][t].toString()
                                    }
                                )).join(",") + "});\n"
                        }
                    )),
                        o = o + "new ((" + i.toString().replace("ENTRY_MODULE", JSON.stringify(e)) + ")({" + n.main.map((function(e) {
                                return JSON.stringify(e) + ": " + a.main[e].toString()
                            }
                        )).join(",") + "}))(self);";
                    var l = new window.Blob([o],{
                        type: "text/javascript"
                    });
                    if (t.bare)
                        return l;
                    var u = (window.URL || window.webkitURL || window.mozURL || window.msURL).createObjectURL(l)
                        , f = new window.Worker(u);
                    return f.objectURL = u,
                        f
                }
            }
            , function(e, t, r) {
                "use strict";
                r.r(t);
                var i = r(8)
                    , a = r(1)
                    , n = r(0)
                    , o = r(7);
                t.default = function(e) {
                    var t = new o.EventEmitter;
                    t.trigger = function(e) {
                        for (var r = arguments.length, i = new Array(r > 1 ? r - 1 : 0), a = 1; a < r; a++)
                            i[a - 1] = arguments[a];
                        t.emit.apply(t, [e, e].concat(i))
                    }
                        ,
                        t.off = function(e) {
                            for (var r = arguments.length, i = new Array(r > 1 ? r - 1 : 0), a = 1; a < r; a++)
                                i[a - 1] = arguments[a];
                            t.removeListener.apply(t, [e].concat(i))
                        }
                    ;
                    var r = function(t, r) {
                        e.postMessage({
                            event: t,
                            data: r
                        })
                    };
                    e.addEventListener("message", (function(a) {
                            var o = a.data;
                            switch (o.cmd) {
                                case "init":
                                    var s = JSON.parse(o.config);
                                    e.demuxer = new i.a(t,o.typeSupported,s,o.vendor),
                                        Object(n.a)(s.debug),
                                        r("init", null);
                                    break;
                                case "demux":
                                    e.demuxer.push(o.data, o.decryptdata, o.initSegment, o.audioCodec, o.timeOffset, o.discontinuity, o.trackSwitch, o.contiguous, o.duration, o.accurateTimeOffset, o.defaultInitPTS)
                            }
                        }
                    )),
                        t.on(a.a.FRAG_DECRYPTED, r),
                        t.on(a.a.FRAG_PARSING_INIT_SEGMENT, r),
                        t.on(a.a.FRAG_PARSED, r),
                        t.on(a.a.ERROR, r),
                        t.on(a.a.FRAG_PARSING_METADATA, r),
                        t.on(a.a.FRAG_PARSING_USERDATA, r),
                        t.on(a.a.INIT_PTS_FOUND, r),
                        t.on(a.a.FRAG_PARSING_DATA, (function(t, r) {
                                var i = []
                                    , a = {
                                    event: t,
                                    data: r
                                };
                                r.data1 && (a.data1 = r.data1.buffer,
                                    i.push(r.data1.buffer),
                                    delete r.data1),
                                r.data2 && (a.data2 = r.data2.buffer,
                                    i.push(r.data2.buffer),
                                    delete r.data2),
                                    e.postMessage(a, i)
                            }
                        ))
                }
            }
            , function(e, t, r) {
                "use strict";
                r.r(t);
                var i, a, n = r(6), o = r(2), s = r(3), d = r(1), l = r(0), u = {
                    hiRadioEventGeneric: !0,
                    hiRadioHandlerDestroying: !0,
                    hiRadioHandlerDestroyed: !0
                }, f = function() {
                    function e(e) {
                        this.hiRadio = void 0,
                            this.handledEvents = void 0,
                            this.useGenericHandler = void 0,
                            this.hiRadio = e,
                            this.onEvent = this.onEvent.bind(this);
                        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                            r[i - 1] = arguments[i];
                        this.handledEvents = r,
                            this.useGenericHandler = !0,
                            this.registerListeners()
                    }
                    var t = e.prototype;
                    return t.destroy = function() {
                        this.onHandlerDestroying(),
                            this.unregisterListeners(),
                            this.onHandlerDestroyed()
                    }
                        ,
                        t.onHandlerDestroying = function() {}
                        ,
                        t.onHandlerDestroyed = function() {}
                        ,
                        t.isEventHandler = function() {
                            return "object" == typeof this.handledEvents && this.handledEvents.length && "function" == typeof this.onEvent
                        }
                        ,
                        t.registerListeners = function() {
                            this.isEventHandler() && this.handledEvents.forEach((function(e) {
                                    if (u[e])
                                        throw new Error("Forbidden event-name: " + e);
                                    this.hiRadio.on(e, this.onEvent)
                                }
                            ), this)
                        }
                        ,
                        t.unregisterListeners = function() {
                            this.isEventHandler() && this.handledEvents.forEach((function(e) {
                                    this.hiRadio.off(e, this.onEvent)
                                }
                            ), this)
                        }
                        ,
                        t.onEvent = function(e, t) {
                            this.onEventGeneric(e, t)
                        }
                        ,
                        t.onEventGeneric = function(e, t) {
                            try {
                                (function(e, t) {
                                        var r = "on" + e.replace("hiRadio", "");
                                        if ("function" != typeof this[r])
                                            throw new Error("Event " + e + " has no generic handler in this " + this.constructor.name + " class (tried " + r + ")");
                                        return this[r].bind(this, t)
                                    }
                                ).call(this, e, t).call()
                            } catch (t) {
                                l.b.error("An internal error happened while handling event " + e + '. Error message: "' + t.message + '". Here is a stacktrace:', t),
                                    this.hiRadio.trigger(d.a.ERROR, {
                                        type: o.b.OTHER_ERROR,
                                        details: o.a.INTERNAL_EXCEPTION,
                                        fatal: !1,
                                        event: e,
                                        err: t
                                    })
                            }
                        }
                        ,
                        e
                }();
                !function(e) {
                    e.MANIFEST = "manifest",
                        e.LEVEL = "level",
                        e.AUDIO_TRACK = "audioTrack",
                        e.SUBTITLE_TRACK = "subtitleTrack"
                }(i || (i = {})),
                    function(e) {
                        e.MAIN = "main",
                            e.AUDIO = "audio",
                            e.SUBTITLE = "subtitle"
                    }(a || (a = {}));
                var h = r(9);
                function c(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                var p, v = function() {
                    function e(e, t) {
                        this._uri = null,
                            this.baseuri = void 0,
                            this.reluri = void 0,
                            this.method = null,
                            this.key = null,
                            this.iv = null,
                            this.baseuri = e,
                            this.reluri = t
                    }
                    var t, r, i;
                    return t = e,
                    (r = [{
                        key: "uri",
                        get: function() {
                            return !this._uri && this.reluri && (this._uri = Object(n.buildAbsoluteURL)(this.baseuri, this.reluri, {
                                alwaysNormalize: !0
                            })),
                                this._uri
                        }
                    }]) && c(t.prototype, r),
                    i && c(t, i),
                        e
                }();
                function g(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                !function(e) {
                    e.AUDIO = "audio",
                        e.VIDEO = "video"
                }(p || (p = {}));
                var m = function() {
                    function e() {
                        var e;
                        this._url = null,
                            this._byteRange = null,
                            this._decryptdata = null,
                            this._elementaryStreams = ((e = {})[p.AUDIO] = !1,
                                e[p.VIDEO] = !1,
                                e),
                            this.deltaPTS = 0,
                            this.rawProgramDateTime = null,
                            this.programDateTime = null,
                            this.title = null,
                            this.tagList = [],
                            this.cc = void 0,
                            this.type = void 0,
                            this.relurl = void 0,
                            this.baseurl = void 0,
                            this.duration = void 0,
                            this.start = void 0,
                            this.sn = 0,
                            this.urlId = 0,
                            this.level = 0,
                            this.levelkey = void 0,
                            this.loader = void 0
                    }
                    var t, r, i, a = e.prototype;
                    return a.setByteRange = function(e, t) {
                        var r = e.split("@", 2)
                            , i = [];
                        1 === r.length ? i[0] = t ? t.byteRangeEndOffset : 0 : i[0] = parseInt(r[1]),
                            i[1] = parseInt(r[0]) + i[0],
                            this._byteRange = i
                    }
                        ,
                        a.addElementaryStream = function(e) {
                            this._elementaryStreams[e] = !0
                        }
                        ,
                        a.hasElementaryStream = function(e) {
                            return !0 === this._elementaryStreams[e]
                        }
                        ,
                        a.createInitializationVector = function(e) {
                            for (var t = new Uint8Array(16), r = 12; r < 16; r++)
                                t[r] = e >> 8 * (15 - r) & 255;
                            return t
                        }
                        ,
                        a.setDecryptDataFromLevelKey = function(e, t) {
                            var r = e;
                            return e && e.method && e.uri && !e.iv && ((r = new v(e.baseuri,e.reluri)).method = e.method,
                                r.iv = this.createInitializationVector(t)),
                                r
                        }
                        ,
                        t = e,
                    (r = [{
                        key: "url",
                        get: function() {
                            return !this._url && this.relurl && (this._url = Object(n.buildAbsoluteURL)(this.baseurl, this.relurl, {
                                alwaysNormalize: !0
                            })),
                                this._url
                        },
                        set: function(e) {
                            this._url = e
                        }
                    }, {
                        key: "byteRange",
                        get: function() {
                            return this._byteRange ? this._byteRange : []
                        }
                    }, {
                        key: "byteRangeStartOffset",
                        get: function() {
                            return this.byteRange[0]
                        }
                    }, {
                        key: "byteRangeEndOffset",
                        get: function() {
                            return this.byteRange[1]
                        }
                    }, {
                        key: "decryptdata",
                        get: function() {
                            if (!this.levelkey && !this._decryptdata)
                                return null;
                            if (!this._decryptdata && this.levelkey) {
                                var e = this.sn;
                                "number" != typeof e && (this.levelkey && "AES-128" === this.levelkey.method && !this.levelkey.iv && l.b.warn('missing IV for initialization segment with method="' + this.levelkey.method + '" - compliance issue'),
                                    e = 0),
                                    this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, e)
                            }
                            return this._decryptdata
                        }
                    }, {
                        key: "endProgramDateTime",
                        get: function() {
                            if (null === this.programDateTime)
                                return null;
                            if (!Object(s.a)(this.programDateTime))
                                return null;
                            var e = Object(s.a)(this.duration) ? this.duration : 0;
                            return this.programDateTime + 1e3 * e
                        }
                    }, {
                        key: "encrypted",
                        get: function() {
                            return !(!this.decryptdata || null === this.decryptdata.uri || null !== this.decryptdata.key)
                        }
                    }]) && g(t.prototype, r),
                    i && g(t, i),
                        e
                }();
                function y(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                var b = function() {
                    function e(e) {
                        this.endCC = 0,
                            this.endSN = 0,
                            this.fragments = [],
                            this.initSegment = null,
                            this.live = !0,
                            this.needSidxRanges = !1,
                            this.startCC = 0,
                            this.startSN = 0,
                            this.startTimeOffset = null,
                            this.targetduration = 0,
                            this.totalduration = 0,
                            this.type = null,
                            this.url = e,
                            this.version = null
                    }
                    var t, r, i;
                    return t = e,
                    (r = [{
                        key: "hasProgramDateTime",
                        get: function() {
                            return !(!this.fragments[0] || !Object(s.a)(this.fragments[0].programDateTime))
                        }
                    }]) && y(t.prototype, r),
                    i && y(t, i),
                        e
                }()
                    , E = /^(\d+)x(\d+)$/
                    , R = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g
                    , _ = function() {
                    function e(t) {
                        for (var r in "string" == typeof t && (t = e.parseAttrList(t)),
                            t)
                            t.hasOwnProperty(r) && (this[r] = t[r])
                    }
                    var t = e.prototype;
                    return t.decimalInteger = function(e) {
                        var t = parseInt(this[e], 10);
                        return t > Number.MAX_SAFE_INTEGER ? 1 / 0 : t
                    }
                        ,
                        t.hexadecimalInteger = function(e) {
                            if (this[e]) {
                                var t = (this[e] || "0x").slice(2);
                                t = (1 & t.length ? "0" : "") + t;
                                for (var r = new Uint8Array(t.length / 2), i = 0; i < t.length / 2; i++)
                                    r[i] = parseInt(t.slice(2 * i, 2 * i + 2), 16);
                                return r
                            }
                            return null
                        }
                        ,
                        t.hexadecimalIntegerAsNumber = function(e) {
                            var t = parseInt(this[e], 16);
                            return t > Number.MAX_SAFE_INTEGER ? 1 / 0 : t
                        }
                        ,
                        t.decimalFloatingPoint = function(e) {
                            return parseFloat(this[e])
                        }
                        ,
                        t.enumeratedString = function(e) {
                            return this[e]
                        }
                        ,
                        t.decimalResolution = function(e) {
                            var t = E.exec(this[e]);
                            if (null !== t)
                                return {
                                    width: parseInt(t[1], 10),
                                    height: parseInt(t[2], 10)
                                }
                        }
                        ,
                        e.parseAttrList = function(e) {
                            var t, r = {};
                            for (R.lastIndex = 0; null !== (t = R.exec(e)); ) {
                                var i = t[2];
                                0 === i.indexOf('"') && i.lastIndexOf('"') === i.length - 1 && (i = i.slice(1, -1)),
                                    r[t[1]] = i
                            }
                            return r
                        }
                        ,
                        e
                }()
                    , T = {
                    audio: {
                        a3ds: !0,
                        "ac-3": !0,
                        "ac-4": !0,
                        alac: !0,
                        alaw: !0,
                        dra1: !0,
                        "dts+": !0,
                        "dts-": !0,
                        dtsc: !0,
                        dtse: !0,
                        dtsh: !0,
                        "ec-3": !0,
                        enca: !0,
                        g719: !0,
                        g726: !0,
                        m4ae: !0,
                        mha1: !0,
                        mha2: !0,
                        mhm1: !0,
                        mhm2: !0,
                        mlpa: !0,
                        mp4a: !0,
                        "raw ": !0,
                        Opus: !0,
                        samr: !0,
                        sawb: !0,
                        sawp: !0,
                        sevc: !0,
                        sqcp: !0,
                        ssmv: !0,
                        twos: !0,
                        ulaw: !0
                    },
                    video: {
                        avc1: !0,
                        avc2: !0,
                        avc3: !0,
                        avc4: !0,
                        avcp: !0,
                        drac: !0,
                        dvav: !0,
                        dvhe: !0,
                        encv: !0,
                        hev1: !0,
                        hvc1: !0,
                        mjp2: !0,
                        mp4v: !0,
                        mvc1: !0,
                        mvc2: !0,
                        mvc3: !0,
                        mvc4: !0,
                        resv: !0,
                        rv60: !0,
                        s263: !0,
                        svc1: !0,
                        svc2: !0,
                        "vc-1": !0,
                        vp08: !0,
                        vp09: !0
                    }
                };
                function S(e, t) {
                    return MediaSource.isTypeSupported((t || "video") + '/mp4;codecs="' + e + '"')
                }
                var A = /#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g
                    , L = /#EXT-X-MEDIA:(.*)/g
                    , D = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /|(?!#)([\S+ ?]+)/.source, /|#EXT-X-BYTERANGE:*(.+)/.source, /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /|#.*/.source].join(""),"g")
                    , w = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/
                    , I = /\.(mp4|m4s|m4v|m4a)$/i
                    , O = function() {
                    function e() {}
                    return e.findGroup = function(e, t) {
                        for (var r = 0; r < e.length; r++) {
                            var i = e[r];
                            if (i.id === t)
                                return i
                        }
                    }
                        ,
                        e.convertAVC1ToAVCOTI = function(e) {
                            var t, r = e.split(".");
                            return r.length > 2 ? (t = r.shift() + ".",
                                t += parseInt(r.shift()).toString(16),
                                t += ("000" + parseInt(r.shift()).toString(16)).substr(-4)) : t = e,
                                t
                        }
                        ,
                        e.resolve = function(e, t) {
                            return n.buildAbsoluteURL(t, e, {
                                alwaysNormalize: !0
                            })
                        }
                        ,
                        e.parseMasterPlaylist = function(t, r) {
                            var i, a = [];
                            function n(e, t) {
                                ["video", "audio"].forEach((function(r) {
                                        var i = e.filter((function(e) {
                                                return function(e, t) {
                                                    var r = T[t];
                                                    return !!r && !0 === r[e.slice(0, 4)]
                                                }(e, r)
                                            }
                                        ));
                                        if (i.length) {
                                            var a = i.filter((function(e) {
                                                    return 0 === e.lastIndexOf("avc1", 0) || 0 === e.lastIndexOf("mp4a", 0)
                                                }
                                            ));
                                            t[r + "Codec"] = a.length > 0 ? a[0] : i[0],
                                                e = e.filter((function(e) {
                                                        return -1 === i.indexOf(e)
                                                    }
                                                ))
                                        }
                                    }
                                )),
                                    t.unknownCodecs = e
                            }
                            for (A.lastIndex = 0; null != (i = A.exec(t)); ) {
                                var o = {}
                                    , s = o.attrs = new _(i[1]);
                                o.url = e.resolve(i[2], r);
                                var d = s.decimalResolution("RESOLUTION");
                                d && (o.width = d.width,
                                    o.height = d.height),
                                    o.bitrate = s.decimalInteger("AVERAGE-BANDWIDTH") || s.decimalInteger("BANDWIDTH"),
                                    o.name = s.NAME,
                                    n([].concat((s.CODECS || "").split(/[ ,]+/)), o),
                                o.videoCodec && -1 !== o.videoCodec.indexOf("avc1") && (o.videoCodec = e.convertAVC1ToAVCOTI(o.videoCodec)),
                                    a.push(o)
                            }
                            return a
                        }
                        ,
                        e.parseMasterPlaylistMedia = function(t, r, i, a) {
                            var n;
                            void 0 === a && (a = []);
                            var o = []
                                , s = 0;
                            for (L.lastIndex = 0; null !== (n = L.exec(t)); ) {
                                var d = new _(n[1]);
                                if (d.TYPE === i) {
                                    var l = {
                                        id: s++,
                                        groupId: d["GROUP-ID"],
                                        name: d.NAME || d.LANGUAGE,
                                        type: i,
                                        default: "YES" === d.DEFAULT,
                                        autoselect: "YES" === d.AUTOSELECT,
                                        forced: "YES" === d.FORCED,
                                        lang: d.LANGUAGE
                                    };
                                    if (d.URI && (l.url = e.resolve(d.URI, r)),
                                            a.length) {
                                        var u = e.findGroup(a, l.groupId);
                                        l.audioCodec = u ? u.codec : a[0].codec
                                    }
                                    o.push(l)
                                }
                            }
                            return o
                        }
                        ,
                        e.parseLevelPlaylist = function(e, t, r, i, a) {
                            var n, o, d, u = 0, f = 0, h = new b(t), c = 0, p = null, g = new m, y = null;
                            for (D.lastIndex = 0; null !== (n = D.exec(e)); ) {
                                var E = n[1];
                                if (E) {
                                    g.duration = parseFloat(E);
                                    var R = (" " + n[2]).slice(1);
                                    g.title = R || null,
                                        g.tagList.push(R ? ["INF", E, R] : ["INF", E])
                                } else if (n[3]) {
                                    if (Object(s.a)(g.duration)) {
                                        var T = u++;
                                        g.type = i,
                                            g.start = f,
                                        d && (g.levelkey = d),
                                            g.sn = T,
                                            g.level = r,
                                            g.cc = c,
                                            g.urlId = a,
                                            g.baseurl = t,
                                            g.relurl = (" " + n[3]).slice(1),
                                            x(g, p),
                                            h.fragments.push(g),
                                            p = g,
                                            f += g.duration,
                                            g = new m
                                    }
                                } else if (n[4]) {
                                    var S = (" " + n[4]).slice(1);
                                    p ? g.setByteRange(S, p) : g.setByteRange(S)
                                } else if (n[5])
                                    g.rawProgramDateTime = (" " + n[5]).slice(1),
                                        g.tagList.push(["PROGRAM-DATE-TIME", g.rawProgramDateTime]),
                                    null === y && (y = h.fragments.length);
                                else {
                                    if (!(n = n[0].match(w))) {
                                        l.b.warn("No matches on slow regex match for level playlist!");
                                        continue
                                    }
                                    for (o = 1; o < n.length && void 0 === n[o]; o++)
                                        ;
                                    var A = (" " + n[o + 1]).slice(1)
                                        , L = (" " + n[o + 2]).slice(1);
                                    switch (n[o]) {
                                        case "#":
                                            g.tagList.push(L ? [A, L] : [A]);
                                            break;
                                        case "PLAYLIST-TYPE":
                                            h.type = A.toUpperCase();
                                            break;
                                        case "MEDIA-SEQUENCE":
                                            u = h.startSN = parseInt(A);
                                            break;
                                        case "TARGETDURATION":
                                            h.targetduration = parseFloat(A);
                                            break;
                                        case "VERSION":
                                            h.version = parseInt(A);
                                            break;
                                        case "EXTM3U":
                                            break;
                                        case "ENDLIST":
                                            h.live = !1;
                                            break;
                                        case "DIS":
                                            c++,
                                                g.tagList.push(["DIS"]);
                                            break;
                                        case "DISCONTINUITY-SEQ":
                                            c = parseInt(A);
                                            break;
                                        case "KEY":
                                            var O = new _(A)
                                                , P = O.enumeratedString("METHOD")
                                                , k = O.URI
                                                , C = O.hexadecimalInteger("IV");
                                            P && (d = new v(t,k),
                                            k && ["AES-128", "SAMPLE-AES", "SAMPLE-AES-CENC"].indexOf(P) >= 0 && (d.method = P,
                                                d.key = null,
                                                d.iv = C));
                                            break;
                                        case "START":
                                            var F = new _(A).decimalFloatingPoint("TIME-OFFSET");
                                            Object(s.a)(F) && (h.startTimeOffset = F);
                                            break;
                                        case "MAP":
                                            var M = new _(A);
                                            g.relurl = M.URI,
                                            M.BYTERANGE && g.setByteRange(M.BYTERANGE),
                                                g.baseurl = t,
                                                g.level = r,
                                                g.type = i,
                                                g.sn = "initSegment",
                                                h.initSegment = g,
                                                (g = new m).rawProgramDateTime = h.initSegment.rawProgramDateTime;
                                            break;
                                        default:
                                            l.b.warn("line parsed but not handled: " + n)
                                    }
                                }
                            }
                            return (g = p) && !g.relurl && (h.fragments.pop(),
                                f -= g.duration),
                                h.totalduration = f,
                                h.averagetargetduration = f / h.fragments.length,
                                h.endSN = u - 1,
                                h.startCC = h.fragments[0] ? h.fragments[0].cc : 0,
                                h.endCC = c,
                            !h.initSegment && h.fragments.length && h.fragments.every((function(e) {
                                    return I.test(e.relurl)
                                }
                            )) && (l.b.warn("MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX"),
                                (g = new m).relurl = h.fragments[0].relurl,
                                g.baseurl = t,
                                g.level = r,
                                g.type = i,
                                g.sn = "initSegment",
                                h.initSegment = g,
                                h.needSidxRanges = !0),
                            y && function(e, t) {
                                for (var r = e[t], i = t - 1; i >= 0; i--) {
                                    var a = e[i];
                                    a.programDateTime = r.programDateTime - 1e3 * a.duration,
                                        r = a
                                }
                            }(h.fragments, y),
                                h
                        }
                        ,
                        e
                }();
                function x(e, t) {
                    e.rawProgramDateTime ? e.programDateTime = Date.parse(e.rawProgramDateTime) : t && t.programDateTime && (e.programDateTime = t.endProgramDateTime),
                    Object(s.a)(e.programDateTime) || (e.programDateTime = null,
                        e.rawProgramDateTime = null)
                }
                var P = window.performance
                    , k = function(e) {
                    var t, r;
                    function n(t) {
                        var r;
                        return (r = e.call(this, t, d.a.MANIFEST_LOADING, d.a.LEVEL_LOADING, d.a.AUDIO_TRACK_LOADING, d.a.SUBTITLE_TRACK_LOADING) || this).loaders = {},
                            r
                    }
                    r = e,
                        (t = n).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r,
                        n.canHaveQualityLevels = function(e) {
                            return e !== i.AUDIO_TRACK && e !== i.SUBTITLE_TRACK
                        }
                        ,
                        n.mapContextToLevelType = function(e) {
                            switch (e.type) {
                                case i.AUDIO_TRACK:
                                    return a.AUDIO;
                                case i.SUBTITLE_TRACK:
                                    return a.SUBTITLE;
                                default:
                                    return a.MAIN
                            }
                        }
                        ,
                        n.getResponseUrl = function(e, t) {
                            var r = e.url;
                            return void 0 !== r && 0 !== r.indexOf("data:") || (r = t.url),
                                r
                        }
                    ;
                    var u = n.prototype;
                    return u.createInternalLoader = function(e) {
                        var t = this.hiRadio.config
                            , r = t.pLoader
                            , i = t.loader
                            , a = new (r || i)(t);
                        return e.loader = a,
                            this.loaders[e.type] = a,
                            a
                    }
                        ,
                        u.getInternalLoader = function(e) {
                            return this.loaders[e.type]
                        }
                        ,
                        u.resetInternalLoader = function(e) {
                            this.loaders[e] && delete this.loaders[e]
                        }
                        ,
                        u.destroyInternalLoaders = function() {
                            for (var e in this.loaders) {
                                var t = this.loaders[e];
                                t && t.destroy(),
                                    this.resetInternalLoader(e)
                            }
                        }
                        ,
                        u.destroy = function() {
                            this.destroyInternalLoaders(),
                                e.prototype.destroy.call(this)
                        }
                        ,
                        u.onManifestLoading = function(e) {
                            this.load({
                                url: e.url,
                                type: i.MANIFEST,
                                level: 0,
                                id: null,
                                responseType: "text"
                            })
                        }
                        ,
                        u.onLevelLoading = function(e) {
                            this.load({
                                url: e.url,
                                type: i.LEVEL,
                                level: e.level,
                                id: e.id,
                                responseType: "text"
                            })
                        }
                        ,
                        u.onAudioTrackLoading = function(e) {
                            this.load({
                                url: e.url,
                                type: i.AUDIO_TRACK,
                                level: null,
                                id: e.id,
                                responseType: "text"
                            })
                        }
                        ,
                        u.onSubtitleTrackLoading = function(e) {
                            this.load({
                                url: e.url,
                                type: i.SUBTITLE_TRACK,
                                level: null,
                                id: e.id,
                                responseType: "text"
                            })
                        }
                        ,
                        u.load = function(e) {
                            var t = this.hiRadio.config;
                            l.b.debug("Loading playlist of type " + e.type + ", level: " + e.level + ", id: " + e.id);
                            var r, a, n, o, s = this.getInternalLoader(e);
                            if (s) {
                                var d = s.context;
                                if (d && d.url === e.url)
                                    return l.b.trace("playlist request ongoing"),
                                        !1;
                                l.b.warn("aborting previous loader for type: " + e.type),
                                    s.abort()
                            }
                            switch (e.type) {
                                case i.MANIFEST:
                                    r = t.manifestLoadingMaxRetry,
                                        a = t.manifestLoadingTimeOut,
                                        n = t.manifestLoadingRetryDelay,
                                        o = t.manifestLoadingMaxRetryTimeout;
                                    break;
                                case i.LEVEL:
                                    r = 0,
                                        o = 0,
                                        n = 0,
                                        a = t.levelLoadingTimeOut;
                                    break;
                                default:
                                    r = t.levelLoadingMaxRetry,
                                        a = t.levelLoadingTimeOut,
                                        n = t.levelLoadingRetryDelay,
                                        o = t.levelLoadingMaxRetryTimeout
                            }
                            s = this.createInternalLoader(e);
                            var u = {
                                timeout: a,
                                maxRetry: r,
                                retryDelay: n,
                                maxRetryDelay: o
                            }
                                , f = {
                                onSuccess: this.loadsuccess.bind(this),
                                onError: this.loaderror.bind(this),
                                onTimeout: this.loadtimeout.bind(this)
                            };
                            return l.b.debug("Calling internal loader delegate for URL: " + e.url),
                                s.load(e, u, f),
                                !0
                        }
                        ,
                        u.loadsuccess = function(e, t, r, i) {
                            if (void 0 === i && (i = null),
                                    r.isSidxRequest)
                                return this._handleSidxRequest(e, r),
                                    void this._handlePlaylistLoaded(e, t, r, i);
                            if (this.resetInternalLoader(r.type),
                                "string" != typeof e.data)
                                throw new Error('expected responseType of "text" for PlaylistLoader');
                            var a = e.data;
                            t.tload = P.now(),
                                0 === a.indexOf("#EXTM3U") ? a.indexOf("#EXTINF:") > 0 || a.indexOf("#EXT-X-TARGETDURATION:") > 0 ? this._handleTrackOrLevelPlaylist(e, t, r, i) : this._handleMasterPlaylist(e, t, r, i) : this._handleManifestParsingError(e, r, "no EXTM3U delimiter", i)
                        }
                        ,
                        u.loaderror = function(e, t, r) {
                            void 0 === r && (r = null),
                                this._handleNetworkError(t, r, !1, e)
                        }
                        ,
                        u.loadtimeout = function(e, t, r) {
                            void 0 === r && (r = null),
                                this._handleNetworkError(t, r, !0)
                        }
                        ,
                        u._handleMasterPlaylist = function(e, t, r, i) {
                            var a = this.hiRadio
                                , o = e.data
                                , s = n.getResponseUrl(e, r)
                                , u = O.parseMasterPlaylist(o, s);
                            if (u.length) {
                                var f = u.map((function(e) {
                                        return {
                                            id: e.attrs.AUDIO,
                                            codec: e.audioCodec
                                        }
                                    }
                                ))
                                    , h = O.parseMasterPlaylistMedia(o, s, "AUDIO", f)
                                    , c = O.parseMasterPlaylistMedia(o, s, "SUBTITLES");
                                if (h.length) {
                                    var p = !1;
                                    h.forEach((function(e) {
                                            e.url || (p = !0)
                                        }
                                    )),
                                    !1 === p && u[0].audioCodec && !u[0].attrs.AUDIO && (l.b.log("audio codec signaled in quality level, but no embedded audio track signaled, create one"),
                                        h.unshift({
                                            type: "main",
                                            name: "main",
                                            default: !1,
                                            autoselect: !1,
                                            forced: !1,
                                            id: -1
                                        }))
                                }
                                a.trigger(d.a.MANIFEST_LOADED, {
                                    levels: u,
                                    audioTracks: h,
                                    subtitles: c,
                                    url: s,
                                    stats: t,
                                    networkDetails: i
                                })
                            } else
                                this._handleManifestParsingError(e, r, "no level found in manifest", i)
                        }
                        ,
                        u._handleTrackOrLevelPlaylist = function(e, t, r, a) {
                            var o = this.hiRadio
                                , l = r.id
                                , u = r.level
                                , f = r.type
                                , h = n.getResponseUrl(e, r)
                                , c = Object(s.a)(l) ? l : 0
                                , p = Object(s.a)(u) ? u : c
                                , v = n.mapContextToLevelType(r)
                                , g = O.parseLevelPlaylist(e.data, h, p, v, c);
                            if (g.tload = t.tload,
                                f === i.MANIFEST) {
                                var m = {
                                    url: h,
                                    details: g
                                };
                                o.trigger(d.a.MANIFEST_LOADED, {
                                    levels: [m],
                                    audioTracks: [],
                                    url: h,
                                    stats: t,
                                    networkDetails: a
                                })
                            }
                            if (t.tparsed = P.now(),
                                    g.needSidxRanges) {
                                var y = g.initSegment.url;
                                this.load({
                                    url: y,
                                    isSidxRequest: !0,
                                    type: f,
                                    level: u,
                                    levelDetails: g,
                                    id: l,
                                    rangeStart: 0,
                                    rangeEnd: 2048,
                                    responseType: "arraybuffer"
                                })
                            } else
                                r.levelDetails = g,
                                    this._handlePlaylistLoaded(e, t, r, a)
                        }
                        ,
                        u._handleSidxRequest = function(e, t) {
                            if ("string" == typeof e.data)
                                throw new Error("sidx request must be made with responseType of array buffer");
                            var r = h.a.parseSegmentIndex(new Uint8Array(e.data));
                            if (r) {
                                var i = r.references
                                    , a = t.levelDetails;
                                i.forEach((function(e, t) {
                                        var r = e.info;
                                        if (a) {
                                            var i = a.fragments[t];
                                            0 === i.byteRange.length && i.setByteRange(String(1 + r.end - r.start) + "@" + String(r.start))
                                        }
                                    }
                                )),
                                a && a.initSegment.setByteRange(String(r.moovEndOffset) + "@0")
                            }
                        }
                        ,
                        u._handleManifestParsingError = function(e, t, r, i) {
                            this.hiRadio.trigger(d.a.ERROR, {
                                type: o.b.NETWORK_ERROR,
                                details: o.a.MANIFEST_PARSING_ERROR,
                                fatal: !0,
                                url: e.url,
                                reason: r,
                                networkDetails: i
                            })
                        }
                        ,
                        u._handleNetworkError = function(e, t, r, a) {
                            var n, s;
                            void 0 === r && (r = !1),
                            void 0 === a && (a = null),
                                l.b.info("A network error occured while loading a " + e.type + "-type playlist");
                            var u = this.getInternalLoader(e);
                            switch (e.type) {
                                case i.MANIFEST:
                                    n = r ? o.a.MANIFEST_LOAD_TIMEOUT : o.a.MANIFEST_LOAD_ERROR,
                                        s = !0;
                                    break;
                                case i.LEVEL:
                                    n = r ? o.a.LEVEL_LOAD_TIMEOUT : o.a.LEVEL_LOAD_ERROR,
                                        s = !1;
                                    break;
                                case i.AUDIO_TRACK:
                                    n = r ? o.a.AUDIO_TRACK_LOAD_TIMEOUT : o.a.AUDIO_TRACK_LOAD_ERROR,
                                        s = !1;
                                    break;
                                default:
                                    s = !1
                            }
                            u && (u.abort(),
                                this.resetInternalLoader(e.type));
                            var f = {
                                type: o.b.NETWORK_ERROR,
                                details: n,
                                fatal: s,
                                url: e.url,
                                loader: u,
                                context: e,
                                networkDetails: t
                            };
                            a && (f.response = a),
                                this.hiRadio.trigger(d.a.ERROR, f)
                        }
                        ,
                        u._handlePlaylistLoaded = function(e, t, r, a) {
                            var o = r.type
                                , s = r.level
                                , l = r.id
                                , u = r.levelDetails;
                            if (u && u.targetduration)
                                if (n.canHaveQualityLevels(r.type))
                                    this.hiRadio.trigger(d.a.LEVEL_LOADED, {
                                        details: u,
                                        level: s || 0,
                                        id: l || 0,
                                        stats: t,
                                        networkDetails: a
                                    });
                                else
                                    switch (o) {
                                        case i.AUDIO_TRACK:
                                            this.hiRadio.trigger(d.a.AUDIO_TRACK_LOADED, {
                                                details: u,
                                                id: l,
                                                stats: t,
                                                networkDetails: a
                                            });
                                            break;
                                        case i.SUBTITLE_TRACK:
                                            this.hiRadio.trigger(d.a.SUBTITLE_TRACK_LOADED, {
                                                details: u,
                                                id: l,
                                                stats: t,
                                                networkDetails: a
                                            })
                                    }
                            else
                                this._handleManifestParsingError(e, r, "invalid target duration", a)
                        }
                        ,
                        n
                }(f);
                var C = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.FRAG_LOADING) || this).loaders = {},
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.destroy = function() {
                        var t = this.loaders;
                        for (var r in t) {
                            var i = t[r];
                            i && i.destroy()
                        }
                        this.loaders = {},
                            e.prototype.destroy.call(this)
                    }
                        ,
                        a.onFragLoading = function(e) {
                            var t = e.frag
                                , r = t.type
                                , i = this.loaders
                                , a = this.hiRadio.config
                                , n = a.fLoader
                                , o = a.loader;
                            t.loaded = 0;
                            var d, u, f, h = i[r];
                            h && (l.b.warn("abort previous fragment loader for type: " + r),
                                h.abort()),
                                h = i[r] = t.loader = a.fLoader ? new n(a) : new o(a),
                                d = {
                                    url: t.url,
                                    frag: t,
                                    responseType: "arraybuffer",
                                    progressData: !1
                                };
                            var c = t.byteRangeStartOffset
                                , p = t.byteRangeEndOffset;
                            Object(s.a)(c) && Object(s.a)(p) && (d.rangeStart = c,
                                d.rangeEnd = p),
                                u = {
                                    timeout: a.fragLoadingTimeOut,
                                    maxRetry: 0,
                                    retryDelay: 0,
                                    maxRetryDelay: a.fragLoadingMaxRetryTimeout
                                },
                                f = {
                                    onSuccess: this.loadsuccess.bind(this),
                                    onError: this.loaderror.bind(this),
                                    onTimeout: this.loadtimeout.bind(this),
                                    onProgress: this.loadprogress.bind(this)
                                },
                                h.load(d, u, f)
                        }
                        ,
                        a.loadsuccess = function(e, t, r, i) {
                            void 0 === i && (i = null);
                            var a = e.data
                                , n = r.frag;
                            n.loader = void 0,
                                this.loaders[n.type] = void 0,
                                this.hiRadio.trigger(d.a.FRAG_LOADED, {
                                    payload: a,
                                    frag: n,
                                    stats: t,
                                    networkDetails: i
                                })
                        }
                        ,
                        a.loaderror = function(e, t, r) {
                            void 0 === r && (r = null);
                            var i = t.frag
                                , a = i.loader;
                            a && a.abort(),
                                this.loaders[i.type] = void 0,
                                this.hiRadio.trigger(d.a.ERROR, {
                                    type: o.b.NETWORK_ERROR,
                                    details: o.a.FRAG_LOAD_ERROR,
                                    fatal: !1,
                                    frag: t.frag,
                                    response: e,
                                    networkDetails: r
                                })
                        }
                        ,
                        a.loadtimeout = function(e, t, r) {
                            void 0 === r && (r = null);
                            var i = t.frag
                                , a = i.loader;
                            a && a.abort(),
                                this.loaders[i.type] = void 0,
                                this.hiRadio.trigger(d.a.ERROR, {
                                    type: o.b.NETWORK_ERROR,
                                    details: o.a.FRAG_LOAD_TIMEOUT,
                                    fatal: !1,
                                    frag: t.frag,
                                    networkDetails: r
                                })
                        }
                        ,
                        a.loadprogress = function(e, t, r, i) {
                            void 0 === i && (i = null);
                            var a = t.frag;
                            a.loaded = e.loaded,
                                this.hiRadio.trigger(d.a.FRAG_LOAD_PROGRESS, {
                                    frag: a,
                                    stats: e,
                                    networkDetails: i
                                })
                        }
                        ,
                        i
                }(f);
                var F = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.KEY_LOADING) || this).loaders = {},
                            r.decryptkey = null,
                            r.decrypturl = null,
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.destroy = function() {
                        for (var t in this.loaders) {
                            var r = this.loaders[t];
                            r && r.destroy()
                        }
                        this.loaders = {},
                            e.prototype.destroy.call(this)
                    }
                        ,
                        a.onKeyLoading = function(e) {
                            var t = e.frag
                                , r = t.type
                                , i = this.loaders[r];
                            if (t.decryptdata) {
                                (new Date).getTime();
                                var a = t.decryptdata.uri;
                                if (a !== this.decrypturl || null === this.decryptkey) {
                                    var n = this.hiRadio.config;
                                    if (i && (l.b.warn("abort previous key loader for type:" + r),
                                            i.abort()),
                                            !a)
                                        return void l.b.warn("key uri is falsy");
                                    t.loader = this.loaders[r] = new n.loader(n),
                                        this.decrypturl = a,
                                        this.decryptkey = null;
                                    var o = {
                                        url: a,
                                        frag: t,
                                        responseType: "arraybuffer"
                                    }
                                        , s = {
                                        timeout: n.fragLoadingTimeOut,
                                        maxRetry: 0,
                                        retryDelay: n.fragLoadingRetryDelay,
                                        maxRetryDelay: n.fragLoadingMaxRetryTimeout
                                    }
                                        , u = {
                                        onSuccess: this.loadsuccess.bind(this),
                                        onError: this.loaderror.bind(this),
                                        onTimeout: this.loadtimeout.bind(this)
                                    };
                                    t.loader.load(o, s, u)
                                } else
                                    this.decryptkey && (t.decryptdata.key = this.decryptkey,
                                        this.hiRadio.trigger(d.a.KEY_LOADED, {
                                            frag: t
                                        }))
                            } else
                                l.b.warn("Missing decryption data on fragment in onKeyLoading")
                        }
                        ,
                        a.loadsuccess = function(e, t, r) {
                            var i = r.frag;
                            i.decryptdata ? (this.decryptkey = i.decryptdata.key = new Uint8Array(e.data),
                                i.loader = void 0,
                                delete this.loaders[i.type],
                                this.hiRadio.trigger(d.a.KEY_LOADED, {
                                    frag: i
                                })) : l.b.error("after key load, decryptdata unset")
                        }
                        ,
                        a.loaderror = function(e, t) {
                            var r = t.frag
                                , i = r.loader;
                            i && i.abort(),
                                delete this.loaders[r.type],
                                this.hiRadio.trigger(d.a.ERROR, {
                                    type: o.b.NETWORK_ERROR,
                                    details: o.a.KEY_LOAD_ERROR,
                                    fatal: !1,
                                    frag: r,
                                    response: e
                                })
                        }
                        ,
                        a.loadtimeout = function(e, t) {
                            var r = t.frag
                                , i = r.loader;
                            i && i.abort(),
                                delete this.loaders[r.type],
                                this.hiRadio.trigger(d.a.ERROR, {
                                    type: o.b.NETWORK_ERROR,
                                    details: o.a.KEY_LOAD_TIMEOUT,
                                    fatal: !1,
                                    frag: r
                                })
                        }
                        ,
                        i
                }(f);
                var M = "NOT_LOADED"
                    , N = "APPENDING"
                    , U = "PARTIAL"
                    , B = "OK"
                    , G = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.BUFFER_APPENDED, d.a.FRAG_BUFFERED, d.a.FRAG_LOADED) || this).bufferPadding = .2,
                            r.fragments = Object.create(null),
                            r.timeRanges = Object.create(null),
                            r.config = t.config,
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.destroy = function() {
                        this.fragments = Object.create(null),
                            this.timeRanges = Object.create(null),
                            this.config = null,
                            f.prototype.destroy.call(this),
                            e.prototype.destroy.call(this)
                    }
                        ,
                        a.getBufferedFrag = function(e, t) {
                            var r = this.fragments
                                , i = Object.keys(r).filter((function(i) {
                                    var a = r[i];
                                    if (a.body.type !== t)
                                        return !1;
                                    if (!a.buffered)
                                        return !1;
                                    var n = a.body;
                                    return n.startPTS <= e && e <= n.endPTS
                                }
                            ));
                            if (0 === i.length)
                                return null;
                            var a = i.pop();
                            return r[a].body
                        }
                        ,
                        a.detectEvictedFragments = function(e, t) {
                            var r, i, a = this;
                            Object.keys(this.fragments).forEach((function(n) {
                                    var o = a.fragments[n];
                                    if (!0 === o.buffered) {
                                        var s = o.range[e];
                                        if (s) {
                                            r = s.time;
                                            for (var d = 0; d < r.length; d++)
                                                if (i = r[d],
                                                    !1 === a.isTimeBuffered(i.startPTS, i.endPTS, t)) {
                                                    a.removeFragment(o.body);
                                                    break
                                                }
                                        }
                                    }
                                }
                            ))
                        }
                        ,
                        a.detectPartialFragments = function(e) {
                            var t = this
                                , r = this.getFragmentKey(e)
                                , i = this.fragments[r];
                            i && (i.buffered = !0,
                                Object.keys(this.timeRanges).forEach((function(r) {
                                        if (e.hasElementaryStream(r)) {
                                            var a = t.timeRanges[r];
                                            i.range[r] = t.getBufferedTimes(e.startPTS, e.endPTS, a)
                                        }
                                    }
                                )))
                        }
                        ,
                        a.getBufferedTimes = function(e, t, r) {
                            for (var i, a, n = [], o = !1, s = 0; s < r.length; s++) {
                                if (i = r.start(s) - this.bufferPadding,
                                        a = r.end(s) + this.bufferPadding,
                                    e >= i && t <= a) {
                                    n.push({
                                        startPTS: Math.max(e, r.start(s)),
                                        endPTS: Math.min(t, r.end(s))
                                    });
                                    break
                                }
                                if (e < a && t > i)
                                    n.push({
                                        startPTS: Math.max(e, r.start(s)),
                                        endPTS: Math.min(t, r.end(s))
                                    }),
                                        o = !0;
                                else if (t <= i)
                                    break
                            }
                            return {
                                time: n,
                                partial: o
                            }
                        }
                        ,
                        a.getFragmentKey = function(e) {
                            return e.type + "_" + e.level + "_" + e.urlId + "_" + e.sn
                        }
                        ,
                        a.getPartialFragment = function(e) {
                            var t, r, i, a = this, n = null, o = 0;
                            return Object.keys(this.fragments).forEach((function(s) {
                                    var d = a.fragments[s];
                                    a.isPartial(d) && (r = d.body.startPTS - a.bufferPadding,
                                        i = d.body.endPTS + a.bufferPadding,
                                    e >= r && e <= i && (t = Math.min(e - r, i - e),
                                    o <= t && (n = d.body,
                                        o = t)))
                                }
                            )),
                                n
                        }
                        ,
                        a.getState = function(e) {
                            var t = this.getFragmentKey(e)
                                , r = this.fragments[t]
                                , i = M;
                            return void 0 !== r && (i = r.buffered ? !0 === this.isPartial(r) ? U : B : N),
                                i
                        }
                        ,
                        a.isPartial = function(e) {
                            return !0 === e.buffered && (void 0 !== e.range.video && !0 === e.range.video.partial || void 0 !== e.range.audio && !0 === e.range.audio.partial)
                        }
                        ,
                        a.isTimeBuffered = function(e, t, r) {
                            for (var i, a, n = 0; n < r.length; n++) {
                                if (i = r.start(n) - this.bufferPadding,
                                        a = r.end(n) + this.bufferPadding,
                                    e >= i && t <= a)
                                    return !0;
                                if (t <= i)
                                    return !1
                            }
                            return !1
                        }
                        ,
                        a.onFragLoaded = function(e) {
                            var t = e.frag;
                            Object(s.a)(t.sn) && !t.bitrateTest && (this.fragments[this.getFragmentKey(t)] = {
                                body: t,
                                range: Object.create(null),
                                buffered: !1
                            })
                        }
                        ,
                        a.onBufferAppended = function(e) {
                            var t = this;
                            this.timeRanges = e.timeRanges,
                                Object.keys(this.timeRanges).forEach((function(e) {
                                        var r = t.timeRanges[e];
                                        t.detectEvictedFragments(e, r)
                                    }
                                ))
                        }
                        ,
                        a.onFragBuffered = function(e) {
                            this.detectPartialFragments(e.frag)
                        }
                        ,
                        a.hasFragment = function(e) {
                            var t = this.getFragmentKey(e);
                            return void 0 !== this.fragments[t]
                        }
                        ,
                        a.removeFragment = function(e) {
                            var t = this.getFragmentKey(e);
                            delete this.fragments[t]
                        }
                        ,
                        a.removeAllFragments = function() {
                            this.fragments = Object.create(null)
                        }
                        ,
                        i
                }(f)
                    , j = {
                    search: function(e, t) {
                        for (var r = 0, i = e.length - 1, a = null, n = null; r <= i; ) {
                            var o = t(n = e[a = (r + i) / 2 | 0]);
                            if (o > 0)
                                r = a + 1;
                            else {
                                if (!(o < 0))
                                    return n;
                                i = a - 1
                            }
                        }
                        return null
                    }
                }
                    , H = function() {
                    function e() {}
                    return e.isBuffered = function(e, t) {
                        try {
                            if (e)
                                for (var r = e.buffered, i = 0; i < r.length; i++)
                                    if (t >= r.start(i) && t <= r.end(i))
                                        return !0
                        } catch (e) {}
                        return !1
                    }
                        ,
                        e.bufferInfo = function(e, t, r) {
                            try {
                                if (e) {
                                    var i, a = e.buffered, n = [];
                                    for (i = 0; i < a.length; i++)
                                        n.push({
                                            start: a.start(i),
                                            end: a.end(i)
                                        });
                                    return this.bufferedInfo(n, t, r)
                                }
                            } catch (e) {}
                            return {
                                len: 0,
                                start: t,
                                end: t,
                                nextStart: void 0
                            }
                        }
                        ,
                        e.bufferedInfo = function(e, t, r) {
                            e.sort((function(e, t) {
                                    var r = e.start - t.start;
                                    return r || t.end - e.end
                                }
                            ));
                            for (var i = [], a = 0; a < e.length; a++) {
                                var n = i.length;
                                if (n) {
                                    var o = i[n - 1].end;
                                    e[a].start - o < r ? e[a].end > o && (i[n - 1].end = e[a].end) : i.push(e[a])
                                } else
                                    i.push(e[a])
                            }
                            for (var s, d = 0, l = t, u = t, f = 0; f < i.length; f++) {
                                var h = i[f].start
                                    , c = i[f].end;
                                if (t + r >= h && t < c)
                                    l = h,
                                        d = (u = c) - t;
                                else if (t + r < h) {
                                    s = h;
                                    break
                                }
                            }
                            return {
                                len: d,
                                start: l,
                                end: u,
                                nextStart: s
                            }
                        }
                        ,
                        e
                }()
                    , K = r(7)
                    , V = r(11)
                    , W = r(8);
                function Y() {
                    return window.MediaSource || window.WebKitMediaSource
                }
                var q = r(5);
                var z = function(e) {
                    var t, r;
                    function i() {
                        return e.apply(this, arguments) || this
                    }
                    return r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r,
                        i.prototype.trigger = function(e) {
                            for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                r[i - 1] = arguments[i];
                            this.emit.apply(this, [e, e].concat(r))
                        }
                        ,
                        i
                }(K.EventEmitter)
                    , X = Object(q.a)()
                    , Q = Y() || {
                    isTypeSupported: function() {
                        return !1
                    }
                }
                    , $ = function() {
                    function e(e, t) {
                        var r = this;
                        this.hiRadio = e,
                            this.id = t;
                        var i = this.observer = new z
                            , a = e.config
                            , n = function(t, i) {
                            (i = i || {}).frag = r.frag,
                                i.id = r.id,
                                e.trigger(t, i)
                        };
                        i.on(d.a.FRAG_DECRYPTED, n),
                            i.on(d.a.FRAG_PARSING_INIT_SEGMENT, n),
                            i.on(d.a.FRAG_PARSING_DATA, n),
                            i.on(d.a.FRAG_PARSED, n),
                            i.on(d.a.ERROR, n),
                            i.on(d.a.FRAG_PARSING_METADATA, n),
                            i.on(d.a.FRAG_PARSING_USERDATA, n),
                            i.on(d.a.INIT_PTS_FOUND, n);
                        var s = {
                            mp4: Q.isTypeSupported("video/mp4"),
                            mpeg: Q.isTypeSupported("audio/mpeg"),
                            mp3: Q.isTypeSupported('audio/mp4; codecs="mp3"')
                        }
                            , u = navigator.vendor;
                        if (a.enableWorker && "undefined" != typeof Worker) {
                            var f;
                            l.b.log("demuxing in webworker");
                            try {
                                f = this.w = V(12),
                                    this.onwmsg = this.onWorkerMessage.bind(this),
                                    f.addEventListener("message", this.onwmsg),
                                    f.onerror = function(t) {
                                        e.trigger(d.a.ERROR, {
                                            type: o.b.OTHER_ERROR,
                                            details: o.a.INTERNAL_EXCEPTION,
                                            fatal: !0,
                                            event: "demuxerWorker",
                                            err: {
                                                message: t.message + " (" + t.filename + ":" + t.lineno + ")"
                                            }
                                        })
                                    }
                                    ,
                                    f.postMessage({
                                        cmd: "init",
                                        typeSupported: s,
                                        vendor: u,
                                        id: t,
                                        config: JSON.stringify(a)
                                    })
                            } catch (e) {
                                l.b.warn("Error in worker:", e),
                                    l.b.error("Error while initializing DemuxerWorker, fallback on DemuxerInline"),
                                f && X.URL.revokeObjectURL(f.objectURL),
                                    this.demuxer = new W.a(i,s,a,u),
                                    this.w = void 0
                            }
                        } else
                            this.demuxer = new W.a(i,s,a,u)
                    }
                    var t = e.prototype;
                    return t.destroy = function() {
                        var e = this.w;
                        if (e)
                            e.removeEventListener("message", this.onwmsg),
                                e.terminate(),
                                this.w = null;
                        else {
                            var t = this.demuxer;
                            t && (t.destroy(),
                                this.demuxer = null)
                        }
                        var r = this.observer;
                        r && (r.removeAllListeners(),
                            this.observer = null)
                    }
                        ,
                        t.push = function(e, t, r, i, a, n, o) {
                            var d = this.w
                                , u = Object(s.a)(i.startPTS) ? i.startPTS : i.start
                                , f = i.decryptdata
                                , h = this.frag
                                , c = !(h && i.cc === h.cc)
                                , p = !(h && i.level === h.level)
                                , v = h && i.sn === h.sn + 1
                                , g = !p && v;
                            if (c && l.b.log(this.id + ":discontinuity detected"),
                                p && l.b.log(this.id + ":switch detected"),
                                    this.frag = i,
                                    d)
                                d.postMessage({
                                    cmd: "demux",
                                    data: e,
                                    decryptdata: f,
                                    initSegment: t,
                                    audioCodec: r,
                                    timeOffset: u,
                                    discontinuity: c,
                                    trackSwitch: p,
                                    contiguous: g,
                                    duration: a,
                                    accurateTimeOffset: n,
                                    defaultInitPTS: o
                                }, e instanceof ArrayBuffer ? [e] : []);
                            else {
                                var m = this.demuxer;
                                m && m.push(e, f, t, r, u, c, p, g, a, n, o)
                            }
                        }
                        ,
                        t.onWorkerMessage = function(e) {
                            var t = e.data
                                , r = this.hiRadio;
                            switch (t.event) {
                                case "init":
                                    X.URL.revokeObjectURL(this.w.objectURL);
                                    break;
                                case d.a.FRAG_PARSING_DATA:
                                    t.data.data1 = new Uint8Array(t.data1),
                                    t.data2 && (t.data.data2 = new Uint8Array(t.data2));
                                default:
                                    t.data = t.data || {},
                                        t.data.frag = this.frag,
                                        t.data.id = this.id,
                                        r.trigger(t.event, t.data)
                            }
                        }
                        ,
                        e
                }();
                function J(e, t, r) {
                    switch (t) {
                        case "audio":
                            e.audioGroupIds || (e.audioGroupIds = []),
                                e.audioGroupIds.push(r);
                            break;
                        case "text":
                            e.textGroupIds || (e.textGroupIds = []),
                                e.textGroupIds.push(r)
                    }
                }
                function Z(e, t, r) {
                    var i = e[t]
                        , a = e[r]
                        , n = a.startPTS;
                    Object(s.a)(n) ? r > t ? (i.duration = n - i.start,
                    i.duration < 0 && l.b.warn("negative duration computed for frag " + i.sn + ",level " + i.level + ", there should be some duration drift between playlist and fragment!")) : (a.duration = i.start - n,
                    a.duration < 0 && l.b.warn("negative duration computed for frag " + a.sn + ",level " + a.level + ", there should be some duration drift between playlist and fragment!")) : a.start = r > t ? i.start + i.duration : Math.max(i.start - a.duration, 0)
                }
                function ee(e, t, r, i, a, n) {
                    var o = r;
                    if (Object(s.a)(t.startPTS)) {
                        var d = Math.abs(t.startPTS - r);
                        Object(s.a)(t.deltaPTS) ? t.deltaPTS = Math.max(d, t.deltaPTS) : t.deltaPTS = d,
                            o = Math.max(r, t.startPTS),
                            r = Math.min(r, t.startPTS),
                            i = Math.max(i, t.endPTS),
                            a = Math.min(a, t.startDTS),
                            n = Math.max(n, t.endDTS)
                    }
                    var l = r - t.start;
                    t.start = t.startPTS = r,
                        t.maxStartPTS = o,
                        t.endPTS = i,
                        t.startDTS = a,
                        t.endDTS = n,
                        t.duration = i - r;
                    var u, f, h, c = t.sn;
                    if (!e || c < e.startSN || c > e.endSN)
                        return 0;
                    for (u = c - e.startSN,
                             (f = e.fragments)[u] = t,
                             h = u; h > 0; h--)
                        Z(f, h, h - 1);
                    for (h = u; h < f.length - 1; h++)
                        Z(f, h, h + 1);
                    return e.PTSKnown = !0,
                        l
                }
                function te(e, t, r) {
                    if (e && t)
                        for (var i = Math.max(e.startSN, t.startSN) - t.startSN, a = Math.min(e.endSN, t.endSN) - t.startSN, n = t.startSN - e.startSN, o = i; o <= a; o++) {
                            var s = e.fragments[n + o]
                                , d = t.fragments[o];
                            if (!s || !d)
                                break;
                            r(s, d, o)
                        }
                }
                var re = {
                    toString: function(e) {
                        for (var t = "", r = e.length, i = 0; i < r; i++)
                            t += "[" + e.start(i).toFixed(3) + "," + e.end(i).toFixed(3) + "]";
                        return t
                    }
                };
                function ie(e, t) {
                    t.fragments.forEach((function(t) {
                            if (t) {
                                var r = t.start + e;
                                t.start = t.startPTS = r,
                                    t.endPTS = r + t.duration
                            }
                        }
                    )),
                        t.PTSKnown = !0
                }
                function ae(e, t, r) {
                    !function(e, t, r) {
                        if (function(e, t, r) {
                                var i = !1;
                                return t && t.details && r && (r.endCC > r.startCC || e && e.cc < r.startCC) && (i = !0),
                                    i
                            }(e, r, t)) {
                            var i = function(e, t) {
                                var r = e.fragments
                                    , i = t.fragments;
                                if (i.length && r.length) {
                                    var a = function(e, t) {
                                        for (var r = null, i = 0; i < e.length; i += 1) {
                                            var a = e[i];
                                            if (a && a.cc === t) {
                                                r = a;
                                                break
                                            }
                                        }
                                        return r
                                    }(r, i[0].cc);
                                    if (a && (!a || a.startPTS))
                                        return a;
                                    l.b.log("No frag in previous level to align on")
                                } else
                                    l.b.log("No fragments to align")
                            }(r.details, t);
                            i && (l.b.log("Adjusting PTS using last level due to CC increase within current level"),
                                ie(i.start, t))
                        }
                    }(e, r, t),
                    !r.PTSKnown && t && function(e, t) {
                        if (t && t.fragments.length) {
                            if (!e.hasProgramDateTime || !t.hasProgramDateTime)
                                return;
                            var r = t.fragments[0].programDateTime
                                , i = (e.fragments[0].programDateTime - r) / 1e3 + t.fragments[0].start;
                            Object(s.a)(i) && (l.b.log("adjusting PTS using programDateTime delta, sliding:" + i.toFixed(3)),
                                ie(i, e))
                        }
                    }(r, t.details)
                }
                function ne(e, t, r) {
                    void 0 === e && (e = 0),
                    void 0 === t && (t = 0);
                    var i = Math.min(t, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                    return r.start + r.duration - i <= e ? 1 : r.start - i > e && r.start ? -1 : 0
                }
                function oe(e, t, r) {
                    var i = 1e3 * Math.min(t, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                    return (r.endProgramDateTime || 0) - i > e
                }
                var se = function() {
                    function e(e, t, r, i) {
                        this.config = e,
                            this.media = t,
                            this.fragmentTracker = r,
                            this.hiRadio = i,
                            this.stallReported = !1
                    }
                    var t = e.prototype;
                    return t.poll = function(e, t) {
                        var r = this.config
                            , i = this.media
                            , a = i.currentTime
                            , n = window.performance.now();
                        if (a !== e)
                            return this.stallReported && (l.b.warn("playback not stuck anymore @" + a + ", after " + Math.round(n - this.stalled) + "ms"),
                                this.stallReported = !1),
                                this.stalled = null,
                                void (this.nudgeRetry = 0);
                        if (!(i.ended || !i.buffered.length || i.readyState > 2 || i.seeking && H.isBuffered(i, a))) {
                            var o = n - this.stalled
                                , s = H.bufferInfo(i, a, r.maxBufferHole);
                            this.stalled ? (o >= 1e3 && this._reportStall(s.len),
                                this._tryFixBufferStall(s, o)) : this.stalled = n
                        }
                    }
                        ,
                        t._tryFixBufferStall = function(e, t) {
                            var r = this.config
                                , i = this.fragmentTracker
                                , a = this.media.currentTime
                                , n = i.getPartialFragment(a);
                            n && this._trySkipBufferHole(n),
                            e.len > .5 && t > 1e3 * r.highBufferWatchdogPeriod && (this.stalled = null,
                                this._tryNudgeBuffer())
                        }
                        ,
                        t._reportStall = function(e) {
                            var t = this.hiRadio
                                , r = this.media;
                            this.stallReported || (this.stallReported = !0,
                                l.b.warn("Playback stalling at @" + r.currentTime + " due to low buffer"),
                                t.trigger(d.a.ERROR, {
                                    type: o.b.MEDIA_ERROR,
                                    details: o.a.BUFFER_STALLED_ERROR,
                                    fatal: !1,
                                    buffer: e
                                }))
                        }
                        ,
                        t._trySkipBufferHole = function(e) {
                            for (var t = this.hiRadio, r = this.media, i = r.currentTime, a = 0, n = 0; n < r.buffered.length; n++) {
                                var s = r.buffered.start(n);
                                if (i >= a && i < s)
                                    return r.currentTime = Math.max(s, r.currentTime + .1),
                                        l.b.warn("skipping hole, adjusting currentTime from " + i + " to " + r.currentTime),
                                        this.stalled = null,
                                        void t.trigger(d.a.ERROR, {
                                            type: o.b.MEDIA_ERROR,
                                            details: o.a.BUFFER_SEEK_OVER_HOLE,
                                            fatal: !1,
                                            reason: "fragment loaded with buffer holes, seeking from " + i + " to " + r.currentTime,
                                            frag: e
                                        });
                                a = r.buffered.end(n)
                            }
                        }
                        ,
                        t._tryNudgeBuffer = function() {
                            var e = this.config
                                , t = this.hiRadio
                                , r = this.media
                                , i = r.currentTime
                                , a = (this.nudgeRetry || 0) + 1;
                            if (this.nudgeRetry = a,
                                a < e.nudgeMaxRetry) {
                                var n = i + a * e.nudgeOffset;
                                l.b.log("adjust currentTime from " + i + " to " + n),
                                    r.currentTime = n,
                                    t.trigger(d.a.ERROR, {
                                        type: o.b.MEDIA_ERROR,
                                        details: o.a.BUFFER_NUDGE_ON_STALL,
                                        fatal: !1
                                    })
                            } else
                                l.b.error("still stuck in high buffer @" + i + " after " + e.nudgeMaxRetry + ", raise fatal error"),
                                    t.trigger(d.a.ERROR, {
                                        type: o.b.MEDIA_ERROR,
                                        details: o.a.BUFFER_STALLED_ERROR,
                                        fatal: !0
                                    })
                        }
                        ,
                        e
                }();
                var de = {
                    STOPPED: "STOPPED",
                    STARTING: "STARTING",
                    IDLE: "IDLE",
                    PAUSED: "PAUSED",
                    KEY_LOADING: "KEY_LOADING",
                    FRAG_LOADING: "FRAG_LOADING",
                    FRAG_LOADING_WAITING_RETRY: "FRAG_LOADING_WAITING_RETRY",
                    WAITING_TRACK: "WAITING_TRACK",
                    PARSING: "PARSING",
                    PARSED: "PARSED",
                    BUFFER_FLUSHING: "BUFFER_FLUSHING",
                    ENDED: "ENDED",
                    ERROR: "ERROR",
                    WAITING_INIT_PTS: "WAITING_INIT_PTS",
                    WAITING_LEVEL: "WAITING_LEVEL"
                };
                function le(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                var ue = function(e) {
                    var t, r;
                    function i(t, r) {
                        var i;
                        return (i = e.call(this, t, d.a.MEDIA_ATTACHED, d.a.MEDIA_DETACHING, d.a.MANIFEST_LOADING, d.a.MANIFEST_PARSED, d.a.LEVEL_LOADED, d.a.KEY_LOADED, d.a.FRAG_LOADED, d.a.FRAG_LOAD_EMERGENCY_ABORTED, d.a.FRAG_PARSING_INIT_SEGMENT, d.a.FRAG_PARSING_DATA, d.a.FRAG_PARSED, d.a.ERROR, d.a.AUDIO_TRACK_SWITCHING, d.a.AUDIO_TRACK_SWITCHED, d.a.BUFFER_CREATED, d.a.BUFFER_APPENDED, d.a.BUFFER_FLUSHED) || this).fragmentTracker = r,
                            i.config = t.config,
                            i.audioCodecSwap = !1,
                            i._state = de.STOPPED,
                            i.stallReported = !1,
                            i.gapController = null,
                            i.altAudio = !1,
                            i
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var n, u, f, h = i.prototype;
                    return h.startLoad = function(e) {
                        if (this.levels) {
                            var t = this.lastCurrentTime
                                , r = this.hiRadio;
                            if (this.stopLoad(),
                                    this.setInterval(100),
                                    this.level = -1,
                                    this.fragLoadError = 0,
                                    !this.startFragRequested) {
                                var i = r.startLevel;
                                -1 === i && (i = 0,
                                    this.bitrateTest = !0),
                                    this.level = r.nextLoadLevel = i,
                                    this.loadedmetadata = !1
                            }
                            t > 0 && -1 === e && (l.b.log("override startPosition with lastCurrentTime @" + t.toFixed(3)),
                                e = t),
                                this.state = de.IDLE,
                                this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e,
                                this.tick()
                        } else
                            this.forceStartLoad = !0,
                                this.state = de.STOPPED
                    }
                        ,
                        h.stopLoad = function() {
                            this.forceStartLoad = !1,
                                e.prototype.stopLoad.call(this)
                        }
                        ,
                        h.doTick = function() {
                            switch (this.state) {
                                case de.BUFFER_FLUSHING:
                                    this.fragLoadError = 0;
                                    break;
                                case de.IDLE:
                                    this._doTickIdle();
                                    break;
                                case de.WAITING_LEVEL:
                                    var e = this.levels[this.level];
                                    e && e.details && (this.state = de.IDLE);
                                    break;
                                case de.FRAG_LOADING_WAITING_RETRY:
                                    var t = window.performance.now()
                                        , r = this.retryDate;
                                    (!r || t >= r || this.media && this.media.seeking) && (l.b.log("mediaController: retryDate reached, switch back to IDLE state"),
                                        this.state = de.IDLE);
                                    break;
                                case de.ERROR:
                                case de.STOPPED:
                                case de.FRAG_LOADING:
                                case de.PARSING:
                                case de.PARSED:
                                case de.ENDED:
                            }
                            this._checkBuffer(),
                                this._checkFragmentChanged()
                        }
                        ,
                        h._doTickIdle = function() {
                            var e = this.hiRadio
                                , t = e.config
                                , r = this.media;
                            if (void 0 !== this.levelLastLoaded && (r || !this.startFragRequested && t.startFragPrefetch)) {
                                var i;
                                i = this.loadedmetadata ? r.currentTime : this.nextLoadPosition;
                                var a = e.nextLoadLevel
                                    , n = this.levels[a];
                                if (n) {
                                    var o, s = n.bitrate;
                                    o = s ? Math.max(8 * t.maxBufferSize / s, t.maxBufferLength) : t.maxBufferLength,
                                        o = Math.min(o, t.maxMaxBufferLength);
                                    var u = H.bufferInfo(this.mediaBuffer ? this.mediaBuffer : r, i, t.maxBufferHole)
                                        , f = u.len;
                                    if (!(f >= o)) {
                                        l.b.trace("buffer length of " + f.toFixed(3) + " is below max of " + o.toFixed(3) + ". checking for more payload ..."),
                                            this.level = e.nextLoadLevel = a;
                                        var h = n.details;
                                        if (!h || h.live && this.levelLastLoaded !== a)
                                            this.state = de.WAITING_LEVEL;
                                        else {
                                            if (this._streamEnded(u, h)) {
                                                var c = {};
                                                return this.altAudio && (c.type = "video"),
                                                    this.hiRadio.trigger(d.a.BUFFER_EOS, c),
                                                    void (this.state = de.ENDED)
                                            }
                                            this._fetchPayloadOrEos(i, u, h)
                                        }
                                    }
                                }
                            }
                        }
                        ,
                        h._fetchPayloadOrEos = function(e, t, r) {
                            var i = this.fragPrevious
                                , a = this.level
                                , n = r.fragments
                                , o = n.length;
                            if (0 !== o) {
                                var s, d = n[0].start, u = n[o - 1].start + n[o - 1].duration, f = t.end;
                                if (r.initSegment && !r.initSegment.data)
                                    s = r.initSegment;
                                else if (r.live) {
                                    var h = this.config.initialLiveManifestSize;
                                    if (o < h)
                                        return void l.b.warn("Can not start playback of a level, reason: not enough fragments " + o + " < " + h);
                                    if (null === (s = this._ensureFragmentAtLivePoint(r, f, d, u, i, n, o)))
                                        return
                                } else
                                    f < d && (s = n[0]);
                                s || (s = this._findFragment(d, i, o, n, f, u, r)),
                                s && (s.encrypted ? (l.b.log("Loading key for " + s.sn + " of [" + r.startSN + " ," + r.endSN + "],level " + a),
                                    this._loadKey(s)) : (l.b.log("Loading " + s.sn + " of [" + r.startSN + " ," + r.endSN + "],level " + a + ", currentTime:" + e.toFixed(3) + ",bufferEnd:" + f.toFixed(3)),
                                    this._loadFragment(s)))
                            }
                        }
                        ,
                        h._ensureFragmentAtLivePoint = function(e, t, r, i, a, n, o) {
                            var d, u = this.hiRadio.config, f = this.media, h = void 0 !== u.liveMaxLatencyDuration ? u.liveMaxLatencyDuration : u.liveMaxLatencyDurationCount * e.targetduration;
                            if (t < Math.max(r - u.maxFragLookUpTolerance, i - h)) {
                                var c = this.liveSyncPosition = this.computeLivePosition(r, e);
                                l.b.log("buffer end: " + t.toFixed(3) + " is located too far from the end of live sliding playlist, reset currentTime to : " + c.toFixed(3)),
                                    t = c,
                                f && f.readyState && f.duration > c && (f.currentTime = c),
                                    this.nextLoadPosition = c
                            }
                            if (e.PTSKnown && t > i && f && f.readyState)
                                return null;
                            if (this.startFragRequested && !e.PTSKnown) {
                                if (a)
                                    if (e.hasProgramDateTime)
                                        l.b.log("live playlist, switching playlist, load frag with same PDT: " + a.programDateTime),
                                            d = function(e, t, r) {
                                                if (null === t || !Array.isArray(e) || !e.length || !Object(s.a)(t))
                                                    return null;
                                                if (t < (e[0].programDateTime || 0))
                                                    return null;
                                                if (t >= (e[e.length - 1].endProgramDateTime || 0))
                                                    return null;
                                                r = r || 0;
                                                for (var i = 0; i < e.length; ++i) {
                                                    var a = e[i];
                                                    if (oe(t, r, a))
                                                        return a
                                                }
                                                return null
                                            }(n, a.endProgramDateTime, u.maxFragLookUpTolerance);
                                    else {
                                        var p = a.sn + 1;
                                        if (p >= e.startSN && p <= e.endSN) {
                                            var v = n[p - e.startSN];
                                            a.cc === v.cc && (d = v,
                                                l.b.log("live playlist, switching playlist, load frag with next SN: " + d.sn))
                                        }
                                        d || (d = j.search(n, (function(e) {
                                                return a.cc - e.cc
                                            }
                                        ))) && l.b.log("live playlist, switching playlist, load frag with same CC: " + d.sn)
                                    }
                                d || (d = n[Math.min(o - 1, Math.round(o / 2))],
                                    l.b.log("live playlist, switching playlist, unknown, load middle frag : " + d.sn))
                            }
                            return d
                        }
                        ,
                        h._findFragment = function(e, t, r, i, a, n, o) {
                            var s, d = this.hiRadio.config;
                            a < n ? s = function(e, t, r, i) {
                                void 0 === r && (r = 0),
                                void 0 === i && (i = 0);
                                var a = e ? t[e.sn - t[0].sn + 1] : null;
                                return a && !ne(r, i, a) ? a : j.search(t, ne.bind(null, r, i))
                            }(t, i, a, a > n - d.maxFragLookUpTolerance ? 0 : d.maxFragLookUpTolerance) : s = i[r - 1];
                            if (s) {
                                var u = s.sn - o.startSN
                                    , f = t && s.level === t.level
                                    , h = i[u - 1]
                                    , c = i[u + 1];
                                if (t && s.sn === t.sn)
                                    if (f && !s.backtracked)
                                        if (s.sn < o.endSN) {
                                            var p = t.deltaPTS;
                                            p && p > d.maxBufferHole && t.dropped && u ? (s = h,
                                                l.b.warn("SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this")) : (s = c,
                                                l.b.log("SN just loaded, load next one: " + s.sn, s))
                                        } else
                                            s = null;
                                    else
                                        s.backtracked && (c && c.backtracked ? (l.b.warn("Already backtracked from fragment " + c.sn + ", will not backtrack to fragment " + s.sn + ". Loading fragment " + c.sn),
                                            s = c) : (l.b.warn("Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe"),
                                            s.dropped = 0,
                                            h ? (s = h).backtracked = !0 : u && (s = null)))
                            }
                            return s
                        }
                        ,
                        h._loadKey = function(e) {
                            this.state = de.KEY_LOADING,
                                this.hiRadio.trigger(d.a.KEY_LOADING, {
                                    frag: e
                                })
                        }
                        ,
                        h._loadFragment = function(e) {
                            var t = this.fragmentTracker.getState(e);
                            this.fragCurrent = e,
                            "initSegment" !== e.sn && (this.startFragRequested = !0),
                            Object(s.a)(e.sn) && !e.bitrateTest && (this.nextLoadPosition = e.start + e.duration),
                                e.backtracked || t === M || t === U ? (e.autoLevel = this.hiRadio.autoLevelEnabled,
                                    e.bitrateTest = this.bitrateTest,
                                    this.hiRadio.trigger(d.a.FRAG_LOADING, {
                                        frag: e
                                    }),
                                this.demuxer || (this.demuxer = new $(this.hiRadio,"main")),
                                    this.state = de.FRAG_LOADING) : t === N && this._reduceMaxBufferLength(e.duration) && this.fragmentTracker.removeFragment(e)
                        }
                        ,
                        h.getBufferedFrag = function(e) {
                            return this.fragmentTracker.getBufferedFrag(e, a.MAIN)
                        }
                        ,
                        h.followingBufferedFrag = function(e) {
                            return e ? this.getBufferedFrag(e.endPTS + .5) : null
                        }
                        ,
                        h._checkFragmentChanged = function() {
                            var e, t, r = this.media;
                            if (r && r.readyState && !1 === r.seeking && ((t = r.currentTime) > this.lastCurrentTime && (this.lastCurrentTime = t),
                                    H.isBuffered(r, t) ? e = this.getBufferedFrag(t) : H.isBuffered(r, t + .1) && (e = this.getBufferedFrag(t + .1)),
                                    e)) {
                                var i = e;
                                if (i !== this.fragPlaying) {
                                    this.hiRadio.trigger(d.a.FRAG_CHANGED, {
                                        frag: i
                                    });
                                    var a = i.level;
                                    this.fragPlaying && this.fragPlaying.level === a || this.hiRadio.trigger(d.a.LEVEL_SWITCHED, {
                                        level: a
                                    }),
                                        this.fragPlaying = i
                                }
                            }
                        }
                        ,
                        h.immediateLevelSwitch = function() {
                            if (l.b.log("immediateLevelSwitch"),
                                    !this.immediateSwitch) {
                                this.immediateSwitch = !0;
                                var e, t = this.media;
                                t ? (e = t.paused,
                                    t.pause()) : e = !0,
                                    this.previouslyPaused = e
                            }
                            var r = this.fragCurrent;
                            r && r.loader && r.loader.abort(),
                                this.fragCurrent = null,
                                this.flushMainBuffer(0, Number.POSITIVE_INFINITY)
                        }
                        ,
                        h.immediateLevelSwitchEnd = function() {
                            var e = this.media;
                            e && e.buffered.length && (this.immediateSwitch = !1,
                            H.isBuffered(e, e.currentTime) && (e.currentTime -= 1e-4),
                            this.previouslyPaused || e.play())
                        }
                        ,
                        h.nextLevelSwitch = function() {
                            var e = this.media;
                            if (e && e.readyState) {
                                var t, r, i;
                                if ((r = this.getBufferedFrag(e.currentTime)) && r.startPTS > 1 && this.flushMainBuffer(0, r.startPTS - 1),
                                        e.paused)
                                    t = 0;
                                else {
                                    var a = this.hiRadio.nextLoadLevel
                                        , n = this.levels[a]
                                        , o = this.fragLastKbps;
                                    t = o && this.fragCurrent ? this.fragCurrent.duration * n.bitrate / (1e3 * o) + 1 : 0
                                }
                                if ((i = this.getBufferedFrag(e.currentTime + t)) && (i = this.followingBufferedFrag(i))) {
                                    var s = this.fragCurrent;
                                    s && s.loader && s.loader.abort(),
                                        this.fragCurrent = null,
                                        this.flushMainBuffer(i.maxStartPTS, Number.POSITIVE_INFINITY)
                                }
                            }
                        }
                        ,
                        h.flushMainBuffer = function(e, t) {
                            this.state = de.BUFFER_FLUSHING;
                            var r = {
                                startOffset: e,
                                endOffset: t
                            };
                            this.altAudio && (r.type = "video"),
                                this.hiRadio.trigger(d.a.BUFFER_FLUSHING, r)
                        }
                        ,
                        h.onMediaAttached = function(e) {
                            var t = this.media = this.mediaBuffer = e.media;
                            this.onvseeking = this.onMediaSeeking.bind(this),
                                this.onvseeked = this.onMediaSeeked.bind(this),
                                this.onvended = this.onMediaEnded.bind(this),
                                t.addEventListener("seeking", this.onvseeking),
                                t.addEventListener("seeked", this.onvseeked),
                                t.addEventListener("ended", this.onvended);
                            var r = this.config;
                            this.levels && r.autoStartLoad && this.hiRadio.startLoad(r.startPosition),
                                this.gapController = new se(r,t,this.fragmentTracker,this.hiRadio)
                        }
                        ,
                        h.onMediaDetaching = function() {
                            var e = this.media;
                            e && e.ended && (l.b.log("MSE detaching and video ended, reset startPosition"),
                                this.startPosition = this.lastCurrentTime = 0);
                            var t = this.levels;
                            t && t.forEach((function(e) {
                                    e.details && e.details.fragments.forEach((function(e) {
                                            e.backtracked = void 0
                                        }
                                    ))
                                }
                            )),
                            e && (e.removeEventListener("seeking", this.onvseeking),
                                e.removeEventListener("seeked", this.onvseeked),
                                e.removeEventListener("ended", this.onvended),
                                this.onvseeking = this.onvseeked = this.onvended = null),
                                this.fragmentTracker.removeAllFragments(),
                                this.media = this.mediaBuffer = null,
                                this.loadedmetadata = !1,
                                this.stopLoad()
                        }
                        ,
                        h.onMediaSeeked = function() {
                            var e = this.media
                                , t = e ? e.currentTime : void 0;
                            Object(s.a)(t) && l.b.log("media seeked to " + t.toFixed(3)),
                                this.tick()
                        }
                        ,
                        h.onManifestLoading = function() {
                            l.b.log("trigger BUFFER_RESET"),
                                this.hiRadio.trigger(d.a.BUFFER_RESET),
                                this.fragmentTracker.removeAllFragments(),
                                this.stalled = !1,
                                this.startPosition = this.lastCurrentTime = 0
                        }
                        ,
                        h.onManifestParsed = function(e) {
                            var t, r = !1, i = !1;
                            e.levels.forEach((function(e) {
                                    (t = e.audioCodec) && (-1 !== t.indexOf("mp4a.40.2") && (r = !0),
                                    -1 !== t.indexOf("mp4a.40.5") && (i = !0))
                                }
                            )),
                                this.audioCodecSwitch = r && i,
                            this.audioCodecSwitch && l.b.log("both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"),
                                this.altAudio = e.altAudio,
                                this.levels = e.levels,
                                this.startFragRequested = !1;
                            var a = this.config;
                            (a.autoStartLoad || this.forceStartLoad) && this.hiRadio.startLoad(a.startPosition)
                        }
                        ,
                        h.onLevelLoaded = function(e) {
                            var t = e.details
                                , r = e.level
                                , i = this.levels[this.levelLastLoaded]
                                , a = this.levels[r]
                                , n = t.totalduration
                                , o = 0;
                            if (l.b.log("level " + r + " loaded [" + t.startSN + "," + t.endSN + "],duration:" + n),
                                    t.live) {
                                var u = a.details;
                                u && t.fragments.length > 0 ? (!function(e, t) {
                                    t.initSegment && e.initSegment && (t.initSegment = e.initSegment);
                                    var r, i = 0;
                                    if (te(e, t, (function(e, a) {
                                                i = e.cc - a.cc,
                                                Object(s.a)(e.startPTS) && (a.start = a.startPTS = e.startPTS,
                                                    a.endPTS = e.endPTS,
                                                    a.duration = e.duration,
                                                    a.backtracked = e.backtracked,
                                                    a.dropped = e.dropped,
                                                    r = a),
                                                    t.PTSKnown = !0
                                            }
                                        )),
                                            t.PTSKnown) {
                                        if (i) {
                                            l.b.log("discontinuity sliding from playlist, take drift into account");
                                            for (var a = t.fragments, n = 0; n < a.length; n++)
                                                a[n].cc += i
                                        }
                                        r ? ee(t, r, r.startPTS, r.endPTS, r.startDTS, r.endDTS) : function(e, t) {
                                            var r = t.startSN - e.startSN
                                                , i = e.fragments
                                                , a = t.fragments;
                                            if (r < 0 || r > i.length)
                                                return;
                                            for (var n = 0; n < a.length; n++)
                                                a[n].start += i[r].start
                                        }(e, t),
                                            t.PTSKnown = e.PTSKnown
                                    }
                                }(u, t),
                                    o = t.fragments[0].start,
                                    this.liveSyncPosition = this.computeLivePosition(o, u),
                                    t.PTSKnown && Object(s.a)(o) ? l.b.log("live playlist sliding:" + o.toFixed(3)) : (l.b.log("live playlist - outdated PTS, unknown sliding"),
                                        ae(this.fragPrevious, i, t))) : (l.b.log("live playlist - first load, unknown sliding"),
                                    t.PTSKnown = !1,
                                    ae(this.fragPrevious, i, t))
                            } else
                                t.PTSKnown = !1;
                            if (a.details = t,
                                    this.levelLastLoaded = r,
                                    this.hiRadio.trigger(d.a.LEVEL_UPDATED, {
                                        details: t,
                                        level: r
                                    }),
                                !1 === this.startFragRequested) {
                                if (-1 === this.startPosition || -1 === this.lastCurrentTime) {
                                    var f = t.startTimeOffset;
                                    Object(s.a)(f) ? (f < 0 && (l.b.log("negative start time offset " + f + ", count from end of last fragment"),
                                        f = o + n + f),
                                        l.b.log("start time offset found in playlist, adjust startPosition to " + f),
                                        this.startPosition = f) : t.live ? (this.startPosition = this.computeLivePosition(o, t),
                                        l.b.log("configure startPosition to " + this.startPosition)) : this.startPosition = 0,
                                        this.lastCurrentTime = this.startPosition
                                }
                                this.nextLoadPosition = this.startPosition
                            }
                            this.state === de.WAITING_LEVEL && (this.state = de.IDLE),
                                this.tick()
                        }
                        ,
                        h.onKeyLoaded = function() {
                            this.state === de.KEY_LOADING && (this.state = de.IDLE,
                                this.tick())
                        }
                        ,
                        h.onFragLoaded = function(e) {
                            var t = this.fragCurrent
                                , r = this.hiRadio
                                , i = this.levels
                                , a = this.media
                                , n = e.frag;
                            if (this.state === de.FRAG_LOADING && t && "main" === n.type && n.level === t.level && n.sn === t.sn) {
                                var o = e.stats
                                    , s = i[t.level]
                                    , u = s.details;
                                if (this.bitrateTest = !1,
                                        this.stats = o,
                                        l.b.log("Loaded " + t.sn + " of [" + u.startSN + " ," + u.endSN + "],level " + t.level),
                                    n.bitrateTest && r.nextLoadLevel)
                                    this.state = de.IDLE,
                                        this.startFragRequested = !1,
                                        o.tparsed = o.tbuffered = window.performance.now(),
                                        r.trigger(d.a.FRAG_BUFFERED, {
                                            stats: o,
                                            frag: t,
                                            id: "main"
                                        }),
                                        this.tick();
                                else if ("initSegment" === n.sn)
                                    this.state = de.IDLE,
                                        o.tparsed = o.tbuffered = window.performance.now(),
                                        u.initSegment.data = e.payload,
                                        r.trigger(d.a.FRAG_BUFFERED, {
                                            stats: o,
                                            frag: t,
                                            id: "main"
                                        }),
                                        this.tick();
                                else {
                                    l.b.log("Parsing " + t.sn + " of [" + u.startSN + " ," + u.endSN + "],level " + t.level + ", cc " + t.cc),
                                        this.state = de.PARSING,
                                        this.pendingBuffering = !0,
                                        this.appended = !1,
                                    n.bitrateTest && (n.bitrateTest = !1,
                                        this.fragmentTracker.onFragLoaded({
                                            frag: n
                                        }));
                                    var f = !(a && a.seeking) && (u.PTSKnown || !u.live)
                                        , h = u.initSegment ? u.initSegment.data : []
                                        , c = this._getAudioCodec(s);
                                    (this.demuxer = this.demuxer || new $(this.hiRadio,"main")).push(e.payload, h, c, t, u.totalduration, f)
                                }
                            }
                            this.fragLoadError = 0
                        }
                        ,
                        h.onFragParsingInitSegment = function(e) {
                            var t = this.fragCurrent
                                , r = e.frag;
                            if (t && "main" === e.id && r.sn === t.sn && r.level === t.level && this.state === de.PARSING) {
                                var i, a, n = e.tracks;
                                if (n.audio && this.altAudio && delete n.audio,
                                        a = n.audio) {
                                    var o = this.levels[this.level].audioCodec
                                        , s = navigator.userAgent.toLowerCase();
                                    o && this.audioCodecSwap && (l.b.log("swapping playlist audio codec"),
                                        o = -1 !== o.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"),
                                    this.audioCodecSwitch && 1 !== a.metadata.channelCount && -1 === s.indexOf("firefox") && (o = "mp4a.40.5"),
                                    -1 !== s.indexOf("android") && "audio/mpeg" !== a.container && (o = "mp4a.40.2",
                                        l.b.log("Android: force audio codec to " + o)),
                                        a.levelCodec = o,
                                        a.id = e.id
                                }
                                for (i in (a = n.video) && (a.levelCodec = this.levels[this.level].videoCodec,
                                    a.id = e.id),
                                    this.hiRadio.trigger(d.a.BUFFER_CODECS, n),
                                    n) {
                                    a = n[i],
                                        l.b.log("main track:" + i + ",container:" + a.container + ",codecs[level/parsed]=[" + a.levelCodec + "/" + a.codec + "]");
                                    var u = a.initSegment;
                                    u && (this.appended = !0,
                                        this.pendingBuffering = !0,
                                        this.hiRadio.trigger(d.a.BUFFER_APPENDING, {
                                            type: i,
                                            data: u,
                                            parent: "main",
                                            content: "initSegment"
                                        }))
                                }
                                this.tick()
                            }
                        }
                        ,
                        h.onFragParsingData = function(e) {
                            var t = this
                                , r = this.fragCurrent
                                , i = e.frag;
                            if (r && "main" === e.id && i.sn === r.sn && i.level === r.level && ("audio" !== e.type || !this.altAudio) && this.state === de.PARSING) {
                                var a = this.levels[this.level]
                                    , n = r;
                                if (Object(s.a)(e.endPTS) || (e.endPTS = e.startPTS + r.duration,
                                        e.endDTS = e.startDTS + r.duration),
                                    !0 === e.hasAudio && n.addElementaryStream(p.AUDIO),
                                    !0 === e.hasVideo && n.addElementaryStream(p.VIDEO),
                                        l.b.log("Parsed " + e.type + ",PTS:[" + e.startPTS.toFixed(3) + "," + e.endPTS.toFixed(3) + "],DTS:[" + e.startDTS.toFixed(3) + "/" + e.endDTS.toFixed(3) + "],nb:" + e.nb + ",dropped:" + (e.dropped || 0)),
                                    "video" === e.type)
                                    if (n.dropped = e.dropped,
                                            n.dropped)
                                        if (n.backtracked)
                                            l.b.warn("Already backtracked on this fragment, appending with the gap", n.sn);
                                        else {
                                            var o = a.details;
                                            if (!o || n.sn !== o.startSN)
                                                return l.b.warn("missing video frame(s), backtracking fragment", n.sn),
                                                    this.fragmentTracker.removeFragment(n),
                                                    n.backtracked = !0,
                                                    this.nextLoadPosition = e.startPTS,
                                                    this.state = de.IDLE,
                                                    this.fragPrevious = n,
                                                    void this.tick();
                                            l.b.warn("missing video frame(s) on first frag, appending with gap", n.sn)
                                        }
                                    else
                                        n.backtracked = !1;
                                var u = ee(a.details, n, e.startPTS, e.endPTS, e.startDTS, e.endDTS)
                                    , f = this.hiRadio;
                                f.trigger(d.a.LEVEL_PTS_UPDATED, {
                                    details: a.details,
                                    level: this.level,
                                    drift: u,
                                    type: e.type,
                                    start: e.startPTS,
                                    end: e.endPTS
                                }),
                                    [e.data1, e.data2].forEach((function(r) {
                                            r && r.length && t.state === de.PARSING && (t.appended = !0,
                                                t.pendingBuffering = !0,
                                                f.trigger(d.a.BUFFER_APPENDING, {
                                                    type: e.type,
                                                    data: r,
                                                    parent: "main",
                                                    content: "data"
                                                }))
                                        }
                                    )),
                                    this.tick()
                            }
                        }
                        ,
                        h.onFragParsed = function(e) {
                            var t = this.fragCurrent
                                , r = e.frag;
                            t && "main" === e.id && r.sn === t.sn && r.level === t.level && this.state === de.PARSING && (this.stats.tparsed = window.performance.now(),
                                this.state = de.PARSED,
                                this._checkAppendedParsed())
                        }
                        ,
                        h.onAudioTrackSwitching = function(e) {
                            var t = !!e.url
                                , r = e.id;
                            if (!t) {
                                if (this.mediaBuffer !== this.media) {
                                    l.b.log("switching on main audio, use media.buffered to schedule main fragment loading"),
                                        this.mediaBuffer = this.media;
                                    var i = this.fragCurrent;
                                    i.loader && (l.b.log("switching to main audio track, cancel main fragment load"),
                                        i.loader.abort()),
                                        this.fragCurrent = null,
                                        this.fragPrevious = null,
                                    this.demuxer && (this.demuxer.destroy(),
                                        this.demuxer = null),
                                        this.state = de.IDLE
                                }
                                var a = this.hiRadio;
                                a.trigger(d.a.BUFFER_FLUSHING, {
                                    startOffset: 0,
                                    endOffset: Number.POSITIVE_INFINITY,
                                    type: "audio"
                                }),
                                    a.trigger(d.a.AUDIO_TRACK_SWITCHED, {
                                        id: r
                                    }),
                                    this.altAudio = !1
                            }
                        }
                        ,
                        h.onAudioTrackSwitched = function(e) {
                            var t = e.id
                                , r = !!this.hiRadio.audioTracks[t].url;
                            if (r) {
                                var i = this.videoBuffer;
                                i && this.mediaBuffer !== i && (l.b.log("switching on alternate audio, use video.buffered to schedule main fragment loading"),
                                    this.mediaBuffer = i)
                            }
                            this.altAudio = r,
                                this.tick()
                        }
                        ,
                        h.onBufferCreated = function(e) {
                            var t, r, i = e.tracks, a = !1;
                            for (var n in i) {
                                var o = i[n];
                                "main" === o.id ? (r = n,
                                    t = o,
                                "video" === n && (this.videoBuffer = i[n].buffer)) : a = !0
                            }
                            a && t ? (l.b.log("alternate track found, use " + r + ".buffered to schedule main fragment loading"),
                                this.mediaBuffer = t.buffer) : this.mediaBuffer = this.media
                        }
                        ,
                        h.onBufferAppended = function(e) {
                            if ("main" === e.parent) {
                                var t = this.state;
                                t !== de.PARSING && t !== de.PARSED || (this.pendingBuffering = e.pending > 0,
                                    this._checkAppendedParsed())
                            }
                        }
                        ,
                        h._checkAppendedParsed = function() {
                            if (!(this.state !== de.PARSED || this.appended && this.pendingBuffering)) {
                                var e = this.fragCurrent;
                                if (e) {
                                    var t = this.mediaBuffer ? this.mediaBuffer : this.media;
                                    l.b.log("main buffered : " + re.toString(t.buffered)),
                                        this.fragPrevious = e;
                                    var r = this.stats;
                                    r.tbuffered = window.performance.now(),
                                        this.fragLastKbps = Math.round(8 * r.total / (r.tbuffered - r.tfirst)),
                                        this.hiRadio.trigger(d.a.FRAG_BUFFERED, {
                                            stats: r,
                                            frag: e,
                                            id: "main"
                                        }),
                                        this.state = de.IDLE
                                }
                                this.tick()
                            }
                        }
                        ,
                        h.onError = function(e) {
                            var t = e.frag || this.fragCurrent;
                            if (!t || "main" === t.type) {
                                var r = !!this.media && H.isBuffered(this.media, this.media.currentTime) && H.isBuffered(this.media, this.media.currentTime + .5);
                                switch (e.details) {
                                    case o.a.FRAG_LOAD_ERROR:
                                    case o.a.FRAG_LOAD_TIMEOUT:
                                    case o.a.KEY_LOAD_ERROR:
                                    case o.a.KEY_LOAD_TIMEOUT:
                                        if (!e.fatal)
                                            if (this.fragLoadError + 1 <= this.config.fragLoadingMaxRetry) {
                                                var i = Math.min(Math.pow(2, this.fragLoadError) * this.config.fragLoadingRetryDelay, this.config.fragLoadingMaxRetryTimeout);
                                                l.b.warn("mediaController: frag loading failed, retry in " + i + " ms"),
                                                    this.retryDate = window.performance.now() + i,
                                                this.loadedmetadata || (this.startFragRequested = !1,
                                                    this.nextLoadPosition = this.startPosition),
                                                    this.fragLoadError++,
                                                    this.state = de.FRAG_LOADING_WAITING_RETRY
                                            } else
                                                l.b.error("mediaController: " + e.details + " reaches max retry, redispatch as fatal ..."),
                                                    e.fatal = !0,
                                                    this.state = de.ERROR;
                                        break;
                                    case o.a.LEVEL_LOAD_ERROR:
                                    case o.a.LEVEL_LOAD_TIMEOUT:
                                        this.state !== de.ERROR && (e.fatal ? (this.state = de.ERROR,
                                            l.b.warn("streamController: " + e.details + ",switch to " + this.state + " state ...")) : e.levelRetry || this.state !== de.WAITING_LEVEL || (this.state = de.IDLE));
                                        break;
                                    case o.a.BUFFER_FULL_ERROR:
                                        "main" !== e.parent || this.state !== de.PARSING && this.state !== de.PARSED || (r ? (this._reduceMaxBufferLength(this.config.maxBufferLength),
                                            this.state = de.IDLE) : (l.b.warn("buffer full error also media.currentTime is not buffered, flush everything"),
                                            this.fragCurrent = null,
                                            this.flushMainBuffer(0, Number.POSITIVE_INFINITY)))
                                }
                            }
                        }
                        ,
                        h._reduceMaxBufferLength = function(e) {
                            var t = this.config;
                            return t.maxMaxBufferLength >= e && (t.maxMaxBufferLength /= 2,
                                l.b.warn("main:reduce max buffer length to " + t.maxMaxBufferLength + "s"),
                                !0)
                        }
                        ,
                        h._checkBuffer = function() {
                            var e = this.media;
                            if (e && 0 !== e.readyState) {
                                var t = (this.mediaBuffer ? this.mediaBuffer : e).buffered;
                                !this.loadedmetadata && t.length ? (this.loadedmetadata = !0,
                                    this._seekToStartPos()) : this.immediateSwitch ? this.immediateLevelSwitchEnd() : this.gapController.poll(this.lastCurrentTime, t)
                            }
                        }
                        ,
                        h.onFragLoadEmergencyAborted = function() {
                            this.state = de.IDLE,
                            this.loadedmetadata || (this.startFragRequested = !1,
                                this.nextLoadPosition = this.startPosition),
                                this.tick()
                        }
                        ,
                        h.onBufferFlushed = function() {
                            var e = this.mediaBuffer ? this.mediaBuffer : this.media;
                            e && this.fragmentTracker.detectEvictedFragments(p.VIDEO, e.buffered),
                                this.state = de.IDLE,
                                this.fragPrevious = null
                        }
                        ,
                        h.swapAudioCodec = function() {
                            this.audioCodecSwap = !this.audioCodecSwap
                        }
                        ,
                        h._seekToStartPos = function() {
                            var e = this.media
                                , t = e.currentTime
                                , r = e.seeking ? t : this.startPosition;
                            t !== r && (l.b.log("target start position not buffered, seek to buffered.start(0) " + r + " from current time " + t + " "),
                                e.currentTime = r)
                        }
                        ,
                        h._getAudioCodec = function(e) {
                            var t = this.config.defaultAudioCodec || e.audioCodec;
                            return this.audioCodecSwap && (l.b.log("swapping playlist audio codec"),
                            t && (t = -1 !== t.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5")),
                                t
                        }
                        ,
                        n = i,
                    (u = [{
                        key: "state",
                        set: function(e) {
                            if (this.state !== e) {
                                var t = this.state;
                                this._state = e,
                                    l.b.log("main stream:" + t + "->" + e),
                                    this.hiRadio.trigger(d.a.STREAM_STATE_TRANSITION, {
                                        previousState: t,
                                        nextState: e
                                    })
                            }
                        },
                        get: function() {
                            return this._state
                        }
                    }, {
                        key: "currentLevel",
                        get: function() {
                            var e = this.media;
                            if (e) {
                                var t = this.getBufferedFrag(e.currentTime);
                                if (t)
                                    return t.level
                            }
                            return -1
                        }
                    }, {
                        key: "nextBufferedFrag",
                        get: function() {
                            var e = this.media;
                            return e ? this.followingBufferedFrag(this.getBufferedFrag(e.currentTime)) : null
                        }
                    }, {
                        key: "nextLevel",
                        get: function() {
                            var e = this.nextBufferedFrag;
                            return e ? e.level : -1
                        }
                    }, {
                        key: "liveSyncPosition",
                        get: function() {
                            return this._liveSyncPosition
                        },
                        set: function(e) {
                            this._liveSyncPosition = e
                        }
                    }]) && le(n.prototype, u),
                    f && le(n, f),
                        i
                }(function(e) {
                    var t, r;
                    function i() {
                        return e.apply(this, arguments) || this
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.doTick = function() {}
                        ,
                        a.startLoad = function() {}
                        ,
                        a.stopLoad = function() {
                            var e = this.fragCurrent;
                            e && (e.loader && e.loader.abort(),
                                this.fragmentTracker.removeFragment(e)),
                            this.demuxer && (this.demuxer.destroy(),
                                this.demuxer = null),
                                this.fragCurrent = null,
                                this.fragPrevious = null,
                                this.clearInterval(),
                                this.clearNextTick(),
                                this.state = de.STOPPED
                        }
                        ,
                        a._streamEnded = function(e, t) {
                            var r = this.fragCurrent
                                , i = this.fragmentTracker;
                            if (!t.live && r && !r.backtracked && r.sn === t.endSN && !e.nextStart) {
                                var a = i.getState(r);
                                return a === U || a === B
                            }
                            return !1
                        }
                        ,
                        a.onMediaSeeking = function() {
                            var e = this.config
                                , t = this.media
                                , r = this.mediaBuffer
                                , i = this.state
                                , a = t ? t.currentTime : null
                                , n = H.bufferInfo(r || t, a, this.config.maxBufferHole);
                            if (Object(s.a)(a) && l.b.log("media seeking to " + a.toFixed(3)),
                                i === de.FRAG_LOADING) {
                                var o = this.fragCurrent;
                                if (0 === n.len && o) {
                                    var d = e.maxFragLookUpTolerance
                                        , u = o.start - d
                                        , f = o.start + o.duration + d;
                                    a < u || a > f ? (o.loader && (l.b.log("seeking outside of buffer while fragment load in progress, cancel fragment load"),
                                        o.loader.abort()),
                                        this.fragCurrent = null,
                                        this.fragPrevious = null,
                                        this.state = de.IDLE) : l.b.log("seeking outside of buffer but within currently loaded fragment range")
                                }
                            } else
                                i === de.ENDED && (0 === n.len && (this.fragPrevious = null,
                                    this.fragCurrent = null),
                                    this.state = de.IDLE);
                            t && (this.lastCurrentTime = a),
                            this.loadedmetadata || (this.nextLoadPosition = this.startPosition = a),
                                this.tick()
                        }
                        ,
                        a.onMediaEnded = function() {
                            this.startPosition = this.lastCurrentTime = 0
                        }
                        ,
                        a.onHandlerDestroying = function() {
                            this.stopLoad(),
                                e.prototype.onHandlerDestroying.call(this)
                        }
                        ,
                        a.onHandlerDestroyed = function() {
                            this.state = de.STOPPED,
                                this.fragmentTracker = null
                        }
                        ,
                        a.computeLivePosition = function(e, t) {
                            var r = void 0 !== this.config.liveSyncDuration ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * t.targetduration;
                            return e + Math.max(0, t.totalduration - r)
                        }
                        ,
                        i
                }(function(e) {
                    var t, r;
                    function i(t) {
                        for (var r, i = arguments.length, a = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++)
                            a[n - 1] = arguments[n];
                        return (r = e.call.apply(e, [this, t].concat(a)) || this)._boundTick = void 0,
                            r._tickTimer = null,
                            r._tickInterval = null,
                            r._tickCallCount = 0,
                            r._boundTick = r.tick.bind(function(e) {
                                if (void 0 === e)
                                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                return e
                            }(r)),
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.onHandlerDestroying = function() {
                        this.clearNextTick(),
                            this.clearInterval()
                    }
                        ,
                        a.hasInterval = function() {
                            return !!this._tickInterval
                        }
                        ,
                        a.hasNextTick = function() {
                            return !!this._tickTimer
                        }
                        ,
                        a.setInterval = function(e) {
                            return !this._tickInterval && (this._tickInterval = self.setInterval(this._boundTick, e),
                                !0)
                        }
                        ,
                        a.clearInterval = function() {
                            return !!this._tickInterval && (self.clearInterval(this._tickInterval),
                                this._tickInterval = null,
                                !0)
                        }
                        ,
                        a.clearNextTick = function() {
                            return !!this._tickTimer && (self.clearTimeout(this._tickTimer),
                                this._tickTimer = null,
                                !0)
                        }
                        ,
                        a.tick = function() {
                            this._tickCallCount++,
                            1 === this._tickCallCount && (this.doTick(),
                            this._tickCallCount > 1 && (this.clearNextTick(),
                                this._tickTimer = self.setTimeout(this._boundTick, 0)),
                                this._tickCallCount = 0)
                        }
                        ,
                        a.doTick = function() {}
                        ,
                        i
                }(f)));
                function fe(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                window.performance;
                var he, ce = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.MANIFEST_LOADED, d.a.LEVEL_LOADED, d.a.AUDIO_TRACK_SWITCHED, d.a.FRAG_LOADED, d.a.ERROR) || this).canload = !1,
                            r.currentLevelIndex = null,
                            r.manualLevelIndex = -1,
                            r.timer = null,
                            he = /chrome|firefox/.test(navigator.userAgent.toLowerCase()),
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a, n, s, u = i.prototype;
                    return u.onHandlerDestroying = function() {
                        this.clearTimer(),
                            this.manualLevelIndex = -1
                    }
                        ,
                        u.clearTimer = function() {
                            null !== this.timer && (clearTimeout(this.timer),
                                this.timer = null)
                        }
                        ,
                        u.startLoad = function() {
                            var e = this._levels;
                            this.canload = !0,
                                this.levelRetryCount = 0,
                            e && e.forEach((function(e) {
                                    e.loadError = 0;
                                    var t = e.details;
                                    t && t.live && (e.details = void 0)
                                }
                            )),
                            null !== this.timer && this.loadLevel()
                        }
                        ,
                        u.stopLoad = function() {
                            this.canload = !1
                        }
                        ,
                        u.onManifestLoaded = function(e) {
                            var t, r = [], i = [], a = {}, n = null, s = !1, u = !1;
                            if (e.levels.forEach((function(e) {
                                        var t = e.attrs;
                                        e.loadError = 0,
                                            e.fragmentError = !1,
                                            s = s || !!e.videoCodec,
                                            u = u || !!e.audioCodec,
                                        he && e.audioCodec && -1 !== e.audioCodec.indexOf("mp4a.40.34") && (e.audioCodec = void 0),
                                            (n = a[e.bitrate]) ? n.url.push(e.url) : (e.url = [e.url],
                                                e.urlId = 0,
                                                a[e.bitrate] = e,
                                                r.push(e)),
                                        t && (t.AUDIO && (u = !0,
                                            J(n || e, "audio", t.AUDIO)),
                                        t.SUBTITLES && J(n || e, "text", t.SUBTITLES))
                                    }
                                )),
                                s && u && (r = r.filter((function(e) {
                                        return !!e.videoCodec
                                    }
                                ))),
                                    r = r.filter((function(e) {
                                            var t = e.audioCodec
                                                , r = e.videoCodec;
                                            return (!t || S(t, "audio")) && (!r || S(r, "video"))
                                        }
                                    )),
                                e.audioTracks && (i = e.audioTracks.filter((function(e) {
                                        return !e.audioCodec || S(e.audioCodec, "audio")
                                    }
                                ))).forEach((function(e, t) {
                                        e.id = t
                                    }
                                )),
                                r.length > 0) {
                                t = r[0].bitrate,
                                    r.sort((function(e, t) {
                                            return e.bitrate - t.bitrate
                                        }
                                    )),
                                    this._levels = r;
                                for (var f = 0; f < r.length; f++)
                                    if (r[f].bitrate === t) {
                                        this._firstLevel = f,
                                            l.b.log("manifest loaded," + r.length + " level(s) found, first bitrate:" + t);
                                        break
                                    }
                                this.hiRadio.trigger(d.a.MANIFEST_PARSED, {
                                    levels: r,
                                    audioTracks: i,
                                    firstLevel: this._firstLevel,
                                    stats: e.stats,
                                    audio: u,
                                    video: s,
                                    altAudio: i.some((function(e) {
                                            return !!e.url
                                        }
                                    ))
                                })
                            } else
                                this.hiRadio.trigger(d.a.ERROR, {
                                    type: o.b.MEDIA_ERROR,
                                    details: o.a.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                                    fatal: !0,
                                    url: this.hiRadio.url,
                                    reason: "no level with compatible codecs found in manifest"
                                })
                        }
                        ,
                        u.setLevelInternal = function(e) {
                            var t = this._levels
                                , r = this.hiRadio;
                            if (e >= 0 && e < t.length) {
                                if (this.clearTimer(),
                                    this.currentLevelIndex !== e) {
                                    l.b.log("switching to level " + e),
                                        this.currentLevelIndex = e;
                                    var i = t[e];
                                    i.level = e,
                                        r.trigger(d.a.LEVEL_SWITCHING, i)
                                }
                                var a = t[e]
                                    , n = a.details;
                                if (!n || n.live) {
                                    var s = a.urlId;
                                    r.trigger(d.a.LEVEL_LOADING, {
                                        url: a.url[s],
                                        level: e,
                                        id: s
                                    })
                                }
                            } else
                                r.trigger(d.a.ERROR, {
                                    type: o.b.OTHER_ERROR,
                                    details: o.a.LEVEL_SWITCH_ERROR,
                                    level: e,
                                    fatal: !1,
                                    reason: "invalid level idx"
                                })
                        }
                        ,
                        u.onError = function(e) {
                            if (e.fatal)
                                e.type === o.b.NETWORK_ERROR && this.clearTimer();
                            else {
                                var t, r = !1, i = !1;
                                switch (e.details) {
                                    case o.a.FRAG_LOAD_ERROR:
                                    case o.a.FRAG_LOAD_TIMEOUT:
                                    case o.a.KEY_LOAD_ERROR:
                                    case o.a.KEY_LOAD_TIMEOUT:
                                        t = e.frag.level,
                                            i = !0;
                                        break;
                                    case o.a.LEVEL_LOAD_ERROR:
                                    case o.a.LEVEL_LOAD_TIMEOUT:
                                        t = e.context.level,
                                            r = !0;
                                        break;
                                    case o.a.REMUX_ALLOC_ERROR:
                                        t = e.level,
                                            r = !0
                                }
                                void 0 !== t && this.recoverLevel(e, t, r, i)
                            }
                        }
                        ,
                        u.recoverLevel = function(e, t, r, i) {
                            var a, n, o, s = this, d = this.hiRadio.config, u = e.details, f = this._levels[t];
                            if (f.loadError++,
                                    f.fragmentError = i,
                                    r) {
                                if (!(this.levelRetryCount + 1 <= d.levelLoadingMaxRetry))
                                    return l.b.error("level controller, cannot recover from " + u + " error"),
                                        this.currentLevelIndex = null,
                                        this.clearTimer(),
                                        void (e.fatal = !0);
                                n = Math.min(Math.pow(2, this.levelRetryCount) * d.levelLoadingRetryDelay, d.levelLoadingMaxRetryTimeout),
                                    this.timer = setTimeout((function() {
                                            return s.loadLevel()
                                        }
                                    ), n),
                                    e.levelRetry = !0,
                                    this.levelRetryCount++,
                                    l.b.warn("level controller, " + u + ", retry in " + n + " ms, current retry count is " + this.levelRetryCount)
                            }
                            (r || i) && ((a = f.url.length) > 1 && f.loadError < a ? (f.urlId = (f.urlId + 1) % a,
                                f.details = void 0,
                                l.b.warn("level controller, " + u + " for level " + t + ": switching to redundant URL-id " + f.urlId)) : -1 === this.manualLevelIndex ? (o = 0 === t ? this._levels.length - 1 : t - 1,
                                l.b.warn("level controller, " + u + ": switch to " + o),
                                this.hiRadio.nextAutoLevel = this.currentLevelIndex = o) : i && (l.b.warn("level controller, " + u + ": reload a fragment"),
                                this.currentLevelIndex = null))
                        }
                        ,
                        u.onFragLoaded = function(e) {
                            var t = e.frag;
                            if (void 0 !== t && "main" === t.type) {
                                var r = this._levels[t.level];
                                void 0 !== r && (r.fragmentError = !1,
                                    r.loadError = 0,
                                    this.levelRetryCount = 0)
                            }
                        }
                        ,
                        u.onLevelLoaded = function(e) {
                            var t = this
                                , r = e.level
                                , i = e.details;
                            if (r === this.currentLevelIndex) {
                                var a = this._levels[r];
                                if (a.fragmentError || (a.loadError = 0,
                                        this.levelRetryCount = 0),
                                        i.live) {
                                    var n = function(e, t, r) {
                                        var i = 1e3 * (t.averagetargetduration ? t.averagetargetduration : t.targetduration)
                                            , a = i / 2;
                                        return e && t.endSN === e.endSN && (i = a),
                                        r && (i = Math.max(a, i - (window.performance.now() - r))),
                                            Math.round(i)
                                    }(a.details, i, e.stats.trequest);
                                    l.b.log("live playlist, reload in " + Math.round(n) + " ms"),
                                        this.timer = setTimeout((function() {
                                                return t.loadLevel()
                                            }
                                        ), n)
                                } else
                                    this.clearTimer()
                            }
                        }
                        ,
                        u.onAudioTrackSwitched = function(e) {
                            var t = this.hiRadio.audioTracks[e.id].groupId
                                , r = this.hiRadio.levels[this.currentLevelIndex];
                            if (r && r.audioGroupIds) {
                                for (var i = -1, a = 0; a < r.audioGroupIds.length; a++)
                                    if (r.audioGroupIds[a] === t) {
                                        i = a;
                                        break
                                    }
                                i !== r.urlId && (r.urlId = i,
                                    this.startLoad())
                            }
                        }
                        ,
                        u.loadLevel = function() {
                            if (l.b.debug("call to loadLevel"),
                                null !== this.currentLevelIndex && this.canload) {
                                var e = this._levels[this.currentLevelIndex];
                                if ("object" == typeof e && e.url.length > 0) {
                                    var t = (new Date).getTime()
                                        , r = this.currentLevelIndex
                                        , i = e.urlId
                                        , a = e.url[i] + "?" + t;
                                    l.b.log("Attempt loading level index " + r + " with URL-id " + i),
                                        this.hiRadio.trigger(d.a.LEVEL_LOADING, {
                                            url: a,
                                            level: r,
                                            id: i
                                        })
                                }
                            }
                        }
                        ,
                        a = i,
                    (n = [{
                        key: "levels",
                        get: function() {
                            return this._levels
                        }
                    }, {
                        key: "level",
                        get: function() {
                            return this.currentLevelIndex
                        },
                        set: function(e) {
                            var t = this._levels;
                            t && (e = Math.min(e, t.length - 1),
                            this.currentLevelIndex === e && t[e].details || this.setLevelInternal(e))
                        }
                    }, {
                        key: "manualLevel",
                        get: function() {
                            return this.manualLevelIndex
                        },
                        set: function(e) {
                            this.manualLevelIndex = e,
                            void 0 === this._startLevel && (this._startLevel = e),
                            -1 !== e && (this.level = e)
                        }
                    }, {
                        key: "firstLevel",
                        get: function() {
                            return this._firstLevel
                        },
                        set: function(e) {
                            this._firstLevel = e
                        }
                    }, {
                        key: "startLevel",
                        get: function() {
                            if (void 0 === this._startLevel) {
                                var e = this.hiRadio.config.startLevel;
                                return void 0 !== e ? e : this._firstLevel
                            }
                            return this._startLevel
                        },
                        set: function(e) {
                            this._startLevel = e
                        }
                    }, {
                        key: "nextLoadLevel",
                        get: function() {
                            return -1 !== this.manualLevelIndex ? this.manualLevelIndex : this.hiRadio.nextAutoLevel
                        },
                        set: function(e) {
                            this.level = e,
                            -1 === this.manualLevelIndex && (this.hiRadio.nextAutoLevel = e)
                        }
                    }]) && fe(a.prototype, n),
                    s && fe(a, s),
                        i
                }(f), pe = r(4);
                function ve(e, t) {
                    var r;
                    try {
                        r = new Event("addtrack")
                    } catch (e) {
                        (r = document.createEvent("Event")).initEvent("addtrack", !1, !1)
                    }
                    r.track = e,
                        t.dispatchEvent(r)
                }
                var ge = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.MEDIA_ATTACHED, d.a.MEDIA_DETACHING, d.a.FRAG_PARSING_METADATA) || this).id3Track = void 0,
                            r.media = void 0,
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.destroy = function() {
                        f.prototype.destroy.call(this)
                    }
                        ,
                        a.onMediaAttached = function(e) {
                            this.media = e.media,
                                this.media
                        }
                        ,
                        a.onMediaDetaching = function() {
                            !function(e) {
                                if (e && e.cues)
                                    for (; e.cues.length > 0; )
                                        e.removeCue(e.cues[0])
                            }(this.id3Track),
                                this.id3Track = void 0,
                                this.media = void 0
                        }
                        ,
                        a.getID3Track = function(e) {
                            for (var t = 0; t < e.length; t++) {
                                var r = e[t];
                                if ("metadata" === r.kind && "id3" === r.label)
                                    return ve(r, this.media),
                                        r
                            }
                            return this.media.addTextTrack("metadata", "id3")
                        }
                        ,
                        a.onFragParsingMetadata = function(e) {
                            var t = e.frag
                                , r = e.samples;
                            this.id3Track || (this.id3Track = this.getID3Track(this.media.textTracks),
                                this.id3Track.mode = "hidden");
                            for (var i = window.WebKitDataCue || window.VTTCue || window.TextTrackCue, a = 0; a < r.length; a++) {
                                var n = pe.a.getID3Frames(r[a].data);
                                if (n) {
                                    var o = r[a].pts
                                        , s = a < r.length - 1 ? r[a + 1].pts : t.endPTS;
                                    o === s ? s += 1e-4 : o > s && (l.b.warn("detected an id3 sample with endTime < startTime, adjusting endTime to (startTime + 0.25)"),
                                        s = o + .25);
                                    for (var d = 0; d < n.length; d++) {
                                        var u = n[d];
                                        if (!pe.a.isTimeStampFrame(u)) {
                                            var f = new i(o,s,"");
                                            f.value = u,
                                                this.id3Track.addCue(f)
                                        }
                                    }
                                }
                            }
                        }
                        ,
                        i
                }(f);
                var me = function() {
                    function e(e) {
                        this.alpha_ = void 0,
                            this.estimate_ = void 0,
                            this.totalWeight_ = void 0,
                            this.alpha_ = e ? Math.exp(Math.log(.5) / e) : 0,
                            this.estimate_ = 0,
                            this.totalWeight_ = 0
                    }
                    var t = e.prototype;
                    return t.sample = function(e, t) {
                        var r = Math.pow(this.alpha_, e);
                        this.estimate_ = t * (1 - r) + r * this.estimate_,
                            this.totalWeight_ += e
                    }
                        ,
                        t.getTotalWeight = function() {
                            return this.totalWeight_
                        }
                        ,
                        t.getEstimate = function() {
                            if (this.alpha_) {
                                var e = 1 - Math.pow(this.alpha_, this.totalWeight_);
                                return this.estimate_ / e
                            }
                            return this.estimate_
                        }
                        ,
                        e
                }()
                    , ye = function() {
                    function e(e, t, r, i) {
                        this.hls = void 0,
                            this.defaultEstimate_ = void 0,
                            this.minWeight_ = void 0,
                            this.minDelayMs_ = void 0,
                            this.slow_ = void 0,
                            this.fast_ = void 0,
                            this.hls = e,
                            this.defaultEstimate_ = i,
                            this.minWeight_ = .001,
                            this.minDelayMs_ = 50,
                            this.slow_ = new me(t),
                            this.fast_ = new me(r)
                    }
                    var t = e.prototype;
                    return t.sample = function(e, t) {
                        var r = (e = Math.max(e, this.minDelayMs_)) / 1e3
                            , i = 8 * t / r;
                        this.fast_.sample(r, i),
                            this.slow_.sample(r, i)
                    }
                        ,
                        t.canEstimate = function() {
                            var e = this.fast_;
                            return e && e.getTotalWeight() >= this.minWeight_
                        }
                        ,
                        t.getEstimate = function() {
                            return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_
                        }
                        ,
                        t.destroy = function() {}
                        ,
                        e
                }();
                function be(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                var Ee = window.performance
                    , Re = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.FRAG_LOADING, d.a.FRAG_LOADED, d.a.FRAG_BUFFERED, d.a.ERROR) || this).lastLoadedFragLevel = 0,
                            r._nextAutoLevel = -1,
                            r.hiRadio = t,
                            r.timer = null,
                            r._bwEstimator = null,
                            r.onCheck = r._abandonRulesCheck.bind(function(e) {
                                if (void 0 === e)
                                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                return e
                            }(r)),
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a, n, u, h = i.prototype;
                    return h.destroy = function() {
                        this.clearTimer(),
                            f.prototype.destroy.call(this)
                    }
                        ,
                        h.onFragLoading = function(e) {
                            var t = e.frag;
                            if ("main" === t.type && (this.timer || (this.fragCurrent = t,
                                    this.timer = setInterval(this.onCheck, 100)),
                                    !this._bwEstimator)) {
                                var r, i, a = this.hiRadio, n = a.config, o = t.level;
                                a.levels[o].details.live ? (r = n.abrEwmaFastLive,
                                    i = n.abrEwmaSlowLive) : (r = n.abrEwmaFastVoD,
                                    i = n.abrEwmaSlowVoD),
                                    this._bwEstimator = new ye(a,i,r,n.abrEwmaDefaultEstimate)
                            }
                        }
                        ,
                        h._abandonRulesCheck = function() {
                            var e = this.hiRadio
                                , t = e.media
                                , r = this.fragCurrent;
                            if (r) {
                                var i = r.loader
                                    , a = e.minAutoLevel;
                                if (!i || i.stats && i.stats.aborted)
                                    return l.b.warn("frag loader destroy or aborted, disarm abandonRules"),
                                        this.clearTimer(),
                                        void (this._nextAutoLevel = -1);
                                var n = i.stats;
                                if (t && n && (!t.paused && 0 !== t.playbackRate || !t.readyState) && r.autoLevel && r.level) {
                                    var o = Ee.now() - n.trequest
                                        , s = Math.abs(t.playbackRate);
                                    if (o > 500 * r.duration / s) {
                                        var u = e.levels
                                            , f = Math.max(1, n.bw ? n.bw / 8 : 1e3 * n.loaded / o)
                                            , h = u[r.level]
                                            , c = h.realBitrate ? Math.max(h.realBitrate, h.bitrate) : h.bitrate
                                            , p = n.total ? n.total : Math.max(n.loaded, Math.round(r.duration * c / 8))
                                            , v = t.currentTime
                                            , g = (p - n.loaded) / f
                                            , m = (H.bufferInfo(t, v, e.config.maxBufferHole).end - v) / s;
                                        if (m < 2 * r.duration / s && g > m) {
                                            var y;
                                            for (y = r.level - 1; y > a; y--) {
                                                var b = u[y].realBitrate ? Math.max(u[y].realBitrate, u[y].bitrate) : u[y].bitrate;
                                                if (r.duration * b / (6.4 * f) < m)
                                                    break
                                            }
                                            void 0 < g && (l.b.warn("loading too slow, abort fragment loading and switch to level " + y + ":fragLoadedDelay[" + y + "]<fragLoadedDelay[" + (r.level - 1) + "];bufferStarvationDelay:" + (void 0).toFixed(1) + "<" + g.toFixed(1) + ":" + m.toFixed(1)),
                                                e.nextLoadLevel = y,
                                                this._bwEstimator.sample(o, n.loaded),
                                                i.abort(),
                                                this.clearTimer(),
                                                e.trigger(d.a.FRAG_LOAD_EMERGENCY_ABORTED, {
                                                    frag: r,
                                                    stats: n
                                                }))
                                        }
                                    }
                                }
                            }
                        }
                        ,
                        h.onFragLoaded = function(e) {
                            var t = e.frag;
                            if ("main" === t.type && Object(s.a)(t.sn)) {
                                if (this.clearTimer(),
                                        this.lastLoadedFragLevel = t.level,
                                        this._nextAutoLevel = -1,
                                        this.hiRadio.config.abrMaxWithRealBitrate) {
                                    var r = this.hiRadio.levels[t.level]
                                        , i = (r.loaded ? r.loaded.bytes : 0) + e.stats.loaded
                                        , a = (r.loaded ? r.loaded.duration : 0) + e.frag.duration;
                                    r.loaded = {
                                        bytes: i,
                                        duration: a
                                    },
                                        r.realBitrate = Math.round(8 * i / a)
                                }
                                if (e.frag.bitrateTest) {
                                    var n = e.stats;
                                    n.tparsed = n.tbuffered = n.tload,
                                        this.onFragBuffered(e)
                                }
                            }
                        }
                        ,
                        h.onFragBuffered = function(e) {
                            var t = e.stats
                                , r = e.frag;
                            if (!0 !== t.aborted && "main" === r.type && Object(s.a)(r.sn) && (!r.bitrateTest || t.tload === t.tbuffered)) {
                                var i = t.tparsed - t.trequest;
                                l.b.log("latency/loading/parsing/append/kbps:" + Math.round(t.tfirst - t.trequest) + "/" + Math.round(t.tload - t.tfirst) + "/" + Math.round(t.tparsed - t.tload) + "/" + Math.round(t.tbuffered - t.tparsed) + "/" + Math.round(8 * t.loaded / (t.tbuffered - t.trequest))),
                                    this._bwEstimator.sample(i, t.loaded),
                                    t.bwEstimate = this._bwEstimator.getEstimate(),
                                    r.bitrateTest ? this.bitrateTestDelay = i / 1e3 : this.bitrateTestDelay = 0
                            }
                        }
                        ,
                        h.onError = function(e) {
                            switch (e.details) {
                                case o.a.FRAG_LOAD_ERROR:
                                case o.a.FRAG_LOAD_TIMEOUT:
                                    this.clearTimer()
                            }
                        }
                        ,
                        h.clearTimer = function() {
                            clearInterval(this.timer),
                                this.timer = null
                        }
                        ,
                        h._findBestLevel = function(e, t, r, i, a, n, o, s, d) {
                            for (var u = a; u >= i; u--) {
                                var f = d[u];
                                if (f) {
                                    var h = f.details
                                        , c = h ? h.totalduration / h.fragments.length : t
                                        , p = !!h && h.live
                                        , v = void 0;
                                    v = u <= e ? o * r : s * r;
                                    var g = d[u].realBitrate ? Math.max(d[u].realBitrate, d[u].bitrate) : d[u].bitrate
                                        , m = g * c / v;
                                    if (l.b.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + u + "/" + Math.round(v) + "/" + g + "/" + c + "/" + n + "/" + m),
                                        v > g && (!m || p && !this.bitrateTestDelay || m < n))
                                        return u
                                }
                            }
                            return -1
                        }
                        ,
                        a = i,
                    (n = [{
                        key: "nextAutoLevel",
                        get: function() {
                            var e = this._nextAutoLevel
                                , t = this._bwEstimator;
                            if (!(-1 === e || t && t.canEstimate()))
                                return e;
                            var r = this._nextABRAutoLevel;
                            return -1 !== e && (r = Math.min(e, r)),
                                r
                        },
                        set: function(e) {
                            this._nextAutoLevel = e
                        }
                    }, {
                        key: "_nextABRAutoLevel",
                        get: function() {
                            var e = this.hiRadio
                                , t = e.maxAutoLevel
                                , r = e.levels
                                , i = e.config
                                , a = e.minAutoLevel
                                , n = e.media
                                , o = this.lastLoadedFragLevel
                                , s = this.fragCurrent ? this.fragCurrent.duration : 0
                                , d = n ? n.currentTime : 0
                                , u = n && 0 !== n.playbackRate ? Math.abs(n.playbackRate) : 1
                                , f = this._bwEstimator ? this._bwEstimator.getEstimate() : i.abrEwmaDefaultEstimate
                                , h = (H.bufferInfo(n, d, i.maxBufferHole).end - d) / u
                                , c = this._findBestLevel(o, s, f, a, t, h, i.abrBandWidthFactor, i.abrBandWidthUpFactor, r);
                            if (c >= 0)
                                return c;
                            l.b.trace("rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering");
                            var p = s ? Math.min(s, i.maxStarvationDelay) : i.maxStarvationDelay
                                , v = i.abrBandWidthFactor
                                , g = i.abrBandWidthUpFactor;
                            if (0 === h) {
                                var m = this.bitrateTestDelay;
                                m && (p = (s ? Math.min(s, i.maxLoadingDelay) : i.maxLoadingDelay) - m,
                                    l.b.trace("bitrate test took " + Math.round(1e3 * m) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * p) + " ms"),
                                    v = g = 1)
                            }
                            return c = this._findBestLevel(o, s, f, a, t, h + p, v, g, r),
                                Math.max(c, 0)
                        }
                    }]) && be(a.prototype, n),
                    u && be(a, u),
                        i
                }(f);
                var _e = Y()
                    , Te = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.MEDIA_ATTACHING, d.a.MEDIA_DETACHING, d.a.MANIFEST_PARSED, d.a.BUFFER_RESET, d.a.BUFFER_APPENDING, d.a.BUFFER_CODECS, d.a.BUFFER_EOS, d.a.BUFFER_FLUSHING, d.a.LEVEL_PTS_UPDATED, d.a.LEVEL_UPDATED) || this)._msDuration = null,
                            r._levelDuration = null,
                            r._levelTargetDuration = 10,
                            r._live = null,
                            r._objectUrl = null,
                            r._needsFlush = !1,
                            r._needsEos = !1,
                            r.config = void 0,
                            r.audioTimestampOffset = void 0,
                            r.bufferCodecEventsExpected = 0,
                            r._bufferCodecEventsTotal = 0,
                            r.media = null,
                            r.mediaSource = null,
                            r.segments = [],
                            r.parent = void 0,
                            r.appending = !1,
                            r.appended = 0,
                            r.appendError = 0,
                            r.flushBufferCounter = 0,
                            r.tracks = {},
                            r.pendingTracks = {},
                            r.sourceBuffer = {},
                            r.flushRange = [],
                            r._onMediaSourceOpen = function() {
                                l.b.log("media source opened"),
                                    r.hiRadio.trigger(d.a.MEDIA_ATTACHED, {
                                        media: r.media
                                    });
                                var e = r.mediaSource;
                                e && e.removeEventListener("sourceopen", r._onMediaSourceOpen),
                                    r.checkPendingTracks()
                            }
                            ,
                            r._onMediaSourceClose = function() {
                                l.b.log("media source closed")
                            }
                            ,
                            r._onMediaSourceEnded = function() {
                                l.b.log("media source ended")
                            }
                            ,
                            r._onSBUpdateEnd = function() {
                                if (r.audioTimestampOffset && r.sourceBuffer.audio) {
                                    var e = r.sourceBuffer.audio;
                                    l.b.warn("change mpeg audio timestamp offset from " + e.timestampOffset + " to " + r.audioTimestampOffset),
                                        e.timestampOffset = r.audioTimestampOffset,
                                        delete r.audioTimestampOffset
                                }
                                r._needsFlush && r.doFlush(),
                                r._needsEos && r.checkEos(),
                                    r.appending = !1;
                                var t = r.parent
                                    , i = r.segments.reduce((function(e, r) {
                                        return r.parent === t ? e + 1 : e
                                    }
                                ), 0)
                                    , a = {}
                                    , n = r.sourceBuffer;
                                for (var o in n) {
                                    var s = n[o];
                                    if (!s)
                                        throw Error("handling source buffer update end error: source buffer for " + o + " uninitilized and unable to update buffered TimeRanges.");
                                    a[o] = s.buffered
                                }
                                r.hiRadio.trigger(d.a.BUFFER_APPENDED, {
                                    parent: t,
                                    pending: i,
                                    timeRanges: a
                                }),
                                r._needsFlush || r.doAppending(),
                                    r.updateMediaElementDuration(),
                                0 === i && r.flushLiveBackBuffer()
                            }
                            ,
                            r._onSBUpdateError = function(e) {
                                l.b.error("sourceBuffer error:", e),
                                    r.hiRadio.trigger(d.a.ERROR, {
                                        type: o.b.MEDIA_ERROR,
                                        details: o.a.BUFFER_APPENDING_ERROR,
                                        fatal: !1
                                    })
                            }
                            ,
                            r.config = t.config,
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.destroy = function() {
                        f.prototype.destroy.call(this)
                    }
                        ,
                        a.onLevelPtsUpdated = function(e) {
                            var t = e.type
                                , r = this.tracks.audio;
                            if ("audio" === t && r && "audio/mpeg" === r.container) {
                                var i = this.sourceBuffer.audio;
                                if (!i)
                                    throw Error("Level PTS Updated and source buffer for audio uninitalized");
                                if (Math.abs(i.timestampOffset - e.start) > .1) {
                                    var a = i.updating;
                                    try {
                                        i.abort()
                                    } catch (e) {
                                        l.b.warn("can not abort audio buffer: " + e)
                                    }
                                    a ? this.audioTimestampOffset = e.start : (l.b.warn("change mpeg audio timestamp offset from " + i.timestampOffset + " to " + e.start),
                                        i.timestampOffset = e.start)
                                }
                            }
                        }
                        ,
                        a.onManifestParsed = function(e) {
                            this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = e.altAudio ? 2 : 1,
                                l.b.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected")
                        }
                        ,
                        a.onMediaAttaching = function(e) {
                            var t = this.media = e.media;
                            if (t && _e) {
                                var r = this.mediaSource = new _e;
                                r.addEventListener("sourceopen", this._onMediaSourceOpen),
                                    r.addEventListener("sourceended", this._onMediaSourceEnded),
                                    r.addEventListener("sourceclose", this._onMediaSourceClose),
                                    t.src = window.URL.createObjectURL(r),
                                    this._objectUrl = t.src
                            }
                        }
                        ,
                        a.onMediaDetaching = function() {
                            l.b.log("media source detaching");
                            var e = this.mediaSource;
                            if (e) {
                                if ("open" === e.readyState)
                                    try {
                                        e.endOfStream()
                                    } catch (e) {
                                        l.b.warn("onMediaDetaching:" + e.message + " while calling endOfStream")
                                    }
                                e.removeEventListener("sourceopen", this._onMediaSourceOpen),
                                    e.removeEventListener("sourceended", this._onMediaSourceEnded),
                                    e.removeEventListener("sourceclose", this._onMediaSourceClose),
                                this.media && (this._objectUrl && window.URL.revokeObjectURL(this._objectUrl),
                                    this.media.src === this._objectUrl ? (this.media.removeAttribute("src"),
                                        this.media.load()) : l.b.warn("media.src was changed by a third party - skip cleanup")),
                                    this.mediaSource = null,
                                    this.media = null,
                                    this._objectUrl = null,
                                    this.bufferCodecEventsExpected = this._bufferCodecEventsTotal,
                                    this.pendingTracks = {},
                                    this.tracks = {},
                                    this.sourceBuffer = {},
                                    this.flushRange = [],
                                    this.segments = [],
                                    this.appended = 0
                            }
                            this.hiRadio.trigger(d.a.MEDIA_DETACHED)
                        }
                        ,
                        a.checkPendingTracks = function() {
                            var e = this.bufferCodecEventsExpected
                                , t = this.pendingTracks
                                , r = Object.keys(t).length;
                            (r && !e || 2 === r) && (this.createSourceBuffers(t),
                                this.pendingTracks = {},
                                this.doAppending())
                        }
                        ,
                        a.onBufferReset = function() {
                            var e = this.sourceBuffer;
                            for (var t in e) {
                                var r = e[t];
                                try {
                                    r && (this.mediaSource && this.mediaSource.removeSourceBuffer(r),
                                        r.removeEventListener("updateend", this._onSBUpdateEnd),
                                        r.removeEventListener("error", this._onSBUpdateError))
                                } catch (e) {}
                            }
                            this.sourceBuffer = {},
                                this.flushRange = [],
                                this.segments = [],
                                this.appended = 0
                        }
                        ,
                        a.onBufferCodecs = function(e) {
                            var t = this;
                            Object.keys(this.sourceBuffer).length || (Object.keys(e).forEach((function(r) {
                                    t.pendingTracks[r] = e[r]
                                }
                            )),
                                this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0),
                            this.mediaSource && "open" === this.mediaSource.readyState && this.checkPendingTracks())
                        }
                        ,
                        a.createSourceBuffers = function(e) {
                            var t = this.sourceBuffer
                                , r = this.mediaSource;
                            if (!r)
                                throw Error("createSourceBuffers called when mediaSource was null");
                            for (var i in e)
                                if (!t[i]) {
                                    var a = e[i];
                                    if (!a)
                                        throw Error("source buffer exists for track " + i + ", however track does not");
                                    var n = a.levelCodec || a.codec
                                        , s = a.container + ";codecs=" + n;
                                    l.b.log("creating sourceBuffer(" + s + ")");
                                    try {
                                        var u = t[i] = r.addSourceBuffer(s);
                                        u.addEventListener("updateend", this._onSBUpdateEnd),
                                            u.addEventListener("error", this._onSBUpdateError),
                                            this.tracks[i] = {
                                                buffer: u,
                                                codec: n,
                                                id: a.id,
                                                container: a.container,
                                                levelCodec: a.levelCodec
                                            }
                                    } catch (e) {
                                        l.b.error("error while trying to add sourceBuffer:" + e.message),
                                            this.hiRadio.trigger(d.a.ERROR, {
                                                type: o.b.MEDIA_ERROR,
                                                details: o.a.BUFFER_ADD_CODEC_ERROR,
                                                fatal: !1,
                                                err: e,
                                                mimeType: s
                                            })
                                    }
                                }
                            this.hiRadio.trigger(d.a.BUFFER_CREATED, {
                                tracks: this.tracks
                            })
                        }
                        ,
                        a.onBufferAppending = function(e) {
                            this._needsFlush || (this.segments ? this.segments.push(e) : this.segments = [e],
                                this.doAppending())
                        }
                        ,
                        a.onBufferEos = function(e) {
                            for (var t in this.sourceBuffer)
                                if (!e.type || e.type === t) {
                                    var r = this.sourceBuffer[t];
                                    r && !r.ended && (r.ended = !0,
                                        l.b.log(t + " sourceBuffer now EOS"))
                                }
                            this.checkEos()
                        }
                        ,
                        a.checkEos = function() {
                            var e = this.sourceBuffer
                                , t = this.mediaSource;
                            if (t && "open" === t.readyState) {
                                for (var r in e) {
                                    var i = e[r];
                                    if (i) {
                                        if (!i.ended)
                                            return;
                                        if (i.updating)
                                            return void (this._needsEos = !0)
                                    }
                                }
                                l.b.log("all media data are available, signal endOfStream() to MediaSource and stop loading fragment");
                                try {
                                    t.endOfStream()
                                } catch (e) {
                                    l.b.warn("exception while calling mediaSource.endOfStream()")
                                }
                                this._needsEos = !1
                            } else
                                this._needsEos = !1
                        }
                        ,
                        a.onBufferFlushing = function(e) {
                            e.type ? this.flushRange.push({
                                start: e.startOffset,
                                end: e.endOffset,
                                type: e.type
                            }) : (this.flushRange.push({
                                start: e.startOffset,
                                end: e.endOffset,
                                type: "video"
                            }),
                                this.flushRange.push({
                                    start: e.startOffset,
                                    end: e.endOffset,
                                    type: "audio"
                                })),
                                this.flushBufferCounter = 0,
                                this.doFlush()
                        }
                        ,
                        a.flushLiveBackBuffer = function() {
                            if (this._live) {
                                var e = this.config.liveBackBufferLength;
                                if (isFinite(e) && !(e < 0))
                                    if (this.media)
                                        for (var t = this.media.currentTime, r = this.sourceBuffer, i = Object.keys(r), a = t - Math.max(e, this._levelTargetDuration), n = i.length - 1; n >= 0; n--) {
                                            var o = i[n]
                                                , s = r[o];
                                            if (s) {
                                                var d = s.buffered;
                                                d.length > 0 && a > d.start(0) && this.removeBufferRange(o, s, 0, a)
                                            }
                                        }
                                    else
                                        l.b.error("flushLiveBackBuffer called without attaching media")
                            }
                        }
                        ,
                        a.onLevelUpdated = function(e) {
                            var t = e.details;
                            t.fragments.length > 0 && (this._levelDuration = t.totalduration + t.fragments[0].start,
                                this._levelTargetDuration = t.averagetargetduration || t.targetduration || 10,
                                this._live = t.live,
                                this.updateMediaElementDuration())
                        }
                        ,
                        a.updateMediaElementDuration = function() {
                            var e, t = this.config;
                            if (null !== this._levelDuration && this.media && this.mediaSource && this.sourceBuffer && 0 !== this.media.readyState && "open" === this.mediaSource.readyState) {
                                for (var r in this.sourceBuffer) {
                                    var i = this.sourceBuffer[r];
                                    if (i && !0 === i.updating)
                                        return
                                }
                                e = this.media.duration,
                                null === this._msDuration && (this._msDuration = this.mediaSource.duration),
                                    !0 === this._live && !0 === t.liveDurationInfinity ? (l.b.log("Media Source duration is set to Infinity"),
                                        this._msDuration = this.mediaSource.duration = 1 / 0) : (this._levelDuration > this._msDuration && this._levelDuration > e || !Object(s.a)(e)) && (l.b.log("Updating Media Source duration to " + this._levelDuration.toFixed(3)),
                                        this._msDuration = this.mediaSource.duration = this._levelDuration)
                            }
                        }
                        ,
                        a.doFlush = function() {
                            for (; this.flushRange.length; ) {
                                var e = this.flushRange[0];
                                if (!this.flushBuffer(e.start, e.end, e.type))
                                    return void (this._needsFlush = !0);
                                this.flushRange.shift(),
                                    this.flushBufferCounter = 0
                            }
                            if (0 === this.flushRange.length) {
                                this._needsFlush = !1;
                                var t = 0
                                    , r = this.sourceBuffer;
                                try {
                                    for (var i in r) {
                                        var a = r[i];
                                        a && (t += a.buffered.length)
                                    }
                                } catch (e) {
                                    l.b.error("error while accessing sourceBuffer.buffered")
                                }
                                this.appended = t,
                                    this.hiRadio.trigger(d.a.BUFFER_FLUSHED)
                            }
                        }
                        ,
                        a.doAppending = function() {
                            var e = this.config
                                , t = this.hiRadio
                                , r = this.segments
                                , i = this.sourceBuffer;
                            if (Object.keys(i).length) {
                                if (!this.media || this.media.error)
                                    return this.segments = [],
                                        void l.b.error("trying to append although a media error occured, flush segment and abort");
                                if (!this.appending) {
                                    var a = r.shift();
                                    if (a)
                                        try {
                                            var n = i[a.type];
                                            if (!n)
                                                return void this._onSBUpdateEnd();
                                            if (n.updating)
                                                return void r.unshift(a);
                                            n.ended = !1,
                                                this.parent = a.parent,
                                                n.appendBuffer(a.data),
                                                this.appendError = 0,
                                                this.appended++,
                                                this.appending = !0
                                        } catch (i) {
                                            l.b.error("error while trying to append buffer:" + i.message),
                                                r.unshift(a);
                                            var s = {
                                                type: o.b.MEDIA_ERROR,
                                                parent: a.parent,
                                                details: "",
                                                fatal: !1
                                            };
                                            22 === i.code ? (this.segments = [],
                                                s.details = o.a.BUFFER_FULL_ERROR) : (this.appendError++,
                                                s.details = o.a.BUFFER_APPEND_ERROR,
                                            this.appendError > e.appendErrorMaxRetry && (l.b.log("fail " + e.appendErrorMaxRetry + " times to append segment in sourceBuffer"),
                                                this.segments = [],
                                                s.fatal = !0)),
                                                t.trigger(d.a.ERROR, s)
                                        }
                                }
                            }
                        }
                        ,
                        a.flushBuffer = function(e, t, r) {
                            var i = this.sourceBuffer;
                            if (!Object.keys(i).length)
                                return !0;
                            var a = "null";
                            if (this.media && (a = this.media.currentTime.toFixed(3)),
                                    l.b.log("flushBuffer,pos/start/end: " + a + "/" + e + "/" + t),
                                this.flushBufferCounter >= this.appended)
                                return l.b.warn("abort flushing too many retries"),
                                    !0;
                            var n = i[r];
                            if (n) {
                                if (n.ended = !1,
                                        n.updating)
                                    return l.b.warn("cannot flush, sb updating in progress"),
                                        !1;
                                if (this.removeBufferRange(r, n, e, t))
                                    return this.flushBufferCounter++,
                                        !1
                            }
                            return l.b.log("buffer flushed"),
                                !0
                        }
                        ,
                        a.removeBufferRange = function(e, t, r, i) {
                            try {
                                for (var a = 0; a < t.buffered.length; a++) {
                                    var n = t.buffered.start(a)
                                        , o = t.buffered.end(a)
                                        , s = Math.max(n, r)
                                        , d = Math.min(o, i);
                                    if (Math.min(d, o) - s > .5) {
                                        var u = "null";
                                        return this.media && (u = this.media.currentTime.toString()),
                                            l.b.log("sb remove " + e + " [" + s + "," + d + "], of [" + n + "," + o + "], pos:" + u),
                                            t.remove(s, d),
                                            !0
                                    }
                                }
                            } catch (e) {
                                l.b.warn("removeBufferRange failed", e)
                            }
                            return !1
                        }
                        ,
                        i
                }(f);
                function Se(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                var Ae = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        return (r = e.call(this, t, d.a.FPS_DROP_LEVEL_CAPPING, d.a.MEDIA_ATTACHING, d.a.MANIFEST_PARSED, d.a.BUFFER_CODECS, d.a.MEDIA_DETACHING) || this).autoLevelCapping = Number.POSITIVE_INFINITY,
                            r.firstLevel = null,
                            r.levels = [],
                            r.media = null,
                            r.restrictedLevels = [],
                            r.timer = null,
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a, n, o, s = i.prototype;
                    return s.destroy = function() {
                        this.hiRadio.config.capLevelToPlayerSize && (this.media = null,
                            this.stopCapping())
                    }
                        ,
                        s.onFpsDropLevelCapping = function(e) {
                            i.isLevelAllowed(e.droppedLevel, this.restrictedLevels) && this.restrictedLevels.push(e.droppedLevel)
                        }
                        ,
                        s.onMediaAttaching = function(e) {
                            this.media = e.media instanceof window.HTMLVideoElement ? e.media : null
                        }
                        ,
                        s.onManifestParsed = function(e) {
                            var t = this.hiRadio;
                            this.restrictedLevels = [],
                                this.levels = e.levels,
                                this.firstLevel = e.firstLevel,
                            t.config.capLevelToPlayerSize && e.video && this.startCapping()
                        }
                        ,
                        s.onBufferCodecs = function(e) {
                            this.hiRadio.config.capLevelToPlayerSize && e.video && this.startCapping()
                        }
                        ,
                        s.onLevelsUpdated = function(e) {
                            this.levels = e.levels
                        }
                        ,
                        s.onMediaDetaching = function() {
                            this.stopCapping()
                        }
                        ,
                        s.detectPlayerSize = function() {
                            if (this.media) {
                                var e = this.levels ? this.levels.length : 0;
                                if (e) {
                                    var t = this.hiRadio;
                                    t.autoLevelCapping = this.getMaxLevel(e - 1),
                                    t.autoLevelCapping > this.autoLevelCapping && t.streamController.nextLevelSwitch(),
                                        this.autoLevelCapping = t.autoLevelCapping
                                }
                            }
                        }
                        ,
                        s.getMaxLevel = function(e) {
                            var t = this;
                            if (!this.levels)
                                return -1;
                            var r = this.levels.filter((function(r, a) {
                                    return i.isLevelAllowed(a, t.restrictedLevels) && a <= e
                                }
                            ));
                            return i.getMaxLevelByMediaSize(r, this.mediaWidth, this.mediaHeight)
                        }
                        ,
                        s.startCapping = function() {
                            this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY,
                                this.hiRadio.firstLevel = this.getMaxLevel(this.firstLevel),
                                clearInterval(this.timer),
                                this.timer = setInterval(this.detectPlayerSize.bind(this), 1e3),
                                this.detectPlayerSize())
                        }
                        ,
                        s.stopCapping = function() {
                            this.restrictedLevels = [],
                                this.firstLevel = null,
                                this.autoLevelCapping = Number.POSITIVE_INFINITY,
                            this.timer && (this.timer = clearInterval(this.timer),
                                this.timer = null)
                        }
                        ,
                        i.isLevelAllowed = function(e, t) {
                            return void 0 === t && (t = []),
                            -1 === t.indexOf(e)
                        }
                        ,
                        i.getMaxLevelByMediaSize = function(e, t, r) {
                            if (!e || e && !e.length)
                                return -1;
                            for (var i, a, n = e.length - 1, o = 0; o < e.length; o += 1) {
                                var s = e[o];
                                if ((s.width >= t || s.height >= r) && (i = s,
                                    !(a = e[o + 1]) || i.width !== a.width || i.height !== a.height)) {
                                    n = o;
                                    break
                                }
                            }
                            return n
                        }
                        ,
                        a = i,
                        o = [{
                            key: "contentScaleFactor",
                            get: function() {
                                var e = 1;
                                try {
                                    e = window.devicePixelRatio
                                } catch (e) {}
                                return e
                            }
                        }],
                    (n = [{
                        key: "mediaWidth",
                        get: function() {
                            var e, t = this.media;
                            return t && (e = t.width || t.clientWidth || t.offsetWidth,
                                e *= i.contentScaleFactor),
                                e
                        }
                    }, {
                        key: "mediaHeight",
                        get: function() {
                            var e, t = this.media;
                            return t && (e = t.height || t.clientHeight || t.offsetHeight,
                                e *= i.contentScaleFactor),
                                e
                        }
                    }]) && Se(a.prototype, n),
                    o && Se(a, o),
                        i
                }(f);
                var Le, De = window.performance, we = function(e) {
                    var t, r;
                    function i(t) {
                        return e.call(this, t, d.a.MEDIA_ATTACHING) || this
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r;
                    var a = i.prototype;
                    return a.destroy = function() {
                        this.timer && clearInterval(this.timer),
                            this.isVideoPlaybackQualityAvailable = !1
                    }
                        ,
                        a.onMediaAttaching = function(e) {
                            var t = this.hiRadio.config;
                            t.capLevelOnFPSDrop && ("function" == typeof (this.video = e.media instanceof window.HTMLVideoElement ? e.media : null).getVideoPlaybackQuality && (this.isVideoPlaybackQualityAvailable = !0),
                                clearInterval(this.timer),
                                this.timer = setInterval(this.checkFPSInterval.bind(this), t.fpsDroppedMonitoringPeriod))
                        }
                        ,
                        a.checkFPS = function(e, t, r) {
                            var i = De.now();
                            if (t) {
                                if (this.lastTime) {
                                    var a = i - this.lastTime
                                        , n = r - this.lastDroppedFrames
                                        , o = t - this.lastDecodedFrames
                                        , s = 1e3 * n / a
                                        , u = this.hiRadio;
                                    if (u.trigger(d.a.FPS_DROP, {
                                            currentDropped: n,
                                            currentDecoded: o,
                                            totalDroppedFrames: r
                                        }),
                                        s > 0 && n > u.config.fpsDroppedMonitoringThreshold * o) {
                                        var f = u.currentLevel;
                                        l.b.warn("drop FPS ratio greater than max allowed value for currentLevel: " + f),
                                        f > 0 && (-1 === u.autoLevelCapping || u.autoLevelCapping >= f) && (f -= 1,
                                            u.trigger(d.a.FPS_DROP_LEVEL_CAPPING, {
                                                level: f,
                                                droppedLevel: u.currentLevel
                                            }),
                                            u.autoLevelCapping = f,
                                            u.streamController.nextLevelSwitch())
                                    }
                                }
                                this.lastTime = i,
                                    this.lastDroppedFrames = r,
                                    this.lastDecodedFrames = t
                            }
                        }
                        ,
                        a.checkFPSInterval = function() {
                            var e = this.video;
                            if (e)
                                if (this.isVideoPlaybackQualityAvailable) {
                                    var t = e.getVideoPlaybackQuality();
                                    this.checkFPS(e, t.totalVideoFrames, t.droppedVideoFrames)
                                } else
                                    this.checkFPS(e, e.webkitDecodedFrameCount, e.webkitDroppedFrameCount)
                        }
                        ,
                        i
                }(f), Ie = window, Oe = Ie.performance, xe = Ie.XMLHttpRequest, Pe = function() {
                    function e(e) {
                        e && e.xhrSetup && (this.xhrSetup = e.xhrSetup)
                    }
                    var t = e.prototype;
                    return t.destroy = function() {
                        this.abort(),
                            this.loader = null
                    }
                        ,
                        t.abort = function() {
                            var e = this.loader;
                            e && 4 !== e.readyState && (this.stats.aborted = !0,
                                e.abort()),
                                window.clearTimeout(this.requestTimeout),
                                this.requestTimeout = null,
                                window.clearTimeout(this.retryTimeout),
                                this.retryTimeout = null
                        }
                        ,
                        t.load = function(e, t, r) {
                            this.context = e,
                                this.config = t,
                                this.callbacks = r,
                                this.stats = {
                                    trequest: Oe.now(),
                                    retry: 0
                                },
                                this.retryDelay = t.retryDelay,
                                this.loadInternal()
                        }
                        ,
                        t.loadInternal = function() {
                            var e, t = this.context;
                            e = this.loader = new xe;
                            var r = this.stats;
                            r.tfirst = 0,
                                r.loaded = 0;
                            var i = this.xhrSetup;
                            try {
                                if (i)
                                    try {
                                        i(e, t.url)
                                    } catch (r) {
                                        e.setRequestHeader("Cache-Control", "no-cache, no-store, must-revalidate"),
                                            e.setRequestHeader("Pragma", "no-cache"),
                                            e.setRequestHeader("Expires", "0"),
                                            e.open("GET", t.url, !0),
                                            i(e, t.url)
                                    }
                                e.readyState || e.open("GET", t.url, !0)
                            } catch (r) {
                                return void this.callbacks.onError({
                                    code: e.status,
                                    text: r.message
                                }, t, e)
                            }
                            t.rangeEnd && e.setRequestHeader("Range", "bytes=" + t.rangeStart + "-" + (t.rangeEnd - 1)),
                                e.onreadystatechange = this.readystatechange.bind(this),
                                e.onprogress = this.loadprogress.bind(this),
                                e.responseType = t.responseType,
                                this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout),
                                e.send()
                        }
                        ,
                        t.readystatechange = function(e) {
                            var t = e.currentTarget
                                , r = t.readyState
                                , i = this.stats
                                , a = this.context
                                , n = this.config;
                            if (!i.aborted && r >= 2)
                                if (window.clearTimeout(this.requestTimeout),
                                    0 === i.tfirst && (i.tfirst = Math.max(Oe.now(), i.trequest)),
                                    4 === r) {
                                    var o = t.status;
                                    if (o >= 200 && o < 300) {
                                        var s, d;
                                        i.tload = Math.max(i.tfirst, Oe.now()),
                                            d = "arraybuffer" === a.responseType ? (s = t.response).byteLength : (s = t.responseText).length,
                                            i.loaded = i.total = d;
                                        var u = {
                                            url: t.responseURL,
                                            data: s
                                        };
                                        this.callbacks.onSuccess(u, i, a, t)
                                    } else
                                        i.retry >= n.maxRetry || o >= 400 && o < 499 ? (l.b.error(o + " while loading " + a.url),
                                            this.callbacks.onError({
                                                code: o,
                                                text: t.statusText
                                            }, a, t)) : (l.b.warn(o + " while loading " + a.url + ", retrying in " + this.retryDelay + "..."),
                                            this.destroy(),
                                            this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                                            this.retryDelay = Math.min(2 * this.retryDelay, n.maxRetryDelay),
                                            i.retry++)
                                } else
                                    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), n.timeout)
                        }
                        ,
                        t.loadtimeout = function() {
                            l.b.warn("timeout while loading " + this.context.url),
                                this.callbacks.onTimeout(this.stats, this.context, null)
                        }
                        ,
                        t.loadprogress = function(e) {
                            var t = e.currentTarget
                                , r = this.stats;
                            r.loaded = e.loaded,
                            e.lengthComputable && (r.total = e.total);
                            var i = this.callbacks.onProgress;
                            i && i(r, this.context, null, t)
                        }
                        ,
                        e
                }();
                r(10);
                !function(e) {
                    e.WIDEVINE = "com.widevine.alpha",
                        e.PLAYREADY = "com.microsoft.playready"
                }(Le || (Le = {}));
                var ke = {
                    autoStartLoad: !0,
                    startPosition: -1,
                    defaultAudioCodec: void 0,
                    debug: !1,
                    capLevelOnFPSDrop: !1,
                    capLevelToPlayerSize: !1,
                    initialLiveManifestSize: 1,
                    maxBufferLength: 30,
                    maxBufferSize: 6e7,
                    maxBufferHole: .5,
                    lowBufferWatchdogPeriod: .5,
                    highBufferWatchdogPeriod: 3,
                    nudgeOffset: .1,
                    nudgeMaxRetry: 3,
                    maxFragLookUpTolerance: .25,
                    liveSyncDurationCount: 3,
                    liveMaxLatencyDurationCount: 1 / 0,
                    liveSyncDuration: void 0,
                    liveMaxLatencyDuration: void 0,
                    liveDurationInfinity: !1,
                    liveBackBufferLength: 1 / 0,
                    maxMaxBufferLength: 600,
                    enableWorker: !0,
                    enableSoftwareAES: !0,
                    manifestLoadingTimeOut: 1e4,
                    manifestLoadingMaxRetry: 1,
                    manifestLoadingRetryDelay: 1e3,
                    manifestLoadingMaxRetryTimeout: 64e3,
                    startLevel: void 0,
                    levelLoadingTimeOut: 1e4,
                    levelLoadingMaxRetry: 4,
                    levelLoadingRetryDelay: 1e3,
                    levelLoadingMaxRetryTimeout: 64e3,
                    fragLoadingTimeOut: 2e4,
                    fragLoadingMaxRetry: 6,
                    fragLoadingRetryDelay: 1e3,
                    fragLoadingMaxRetryTimeout: 64e3,
                    startFragPrefetch: !1,
                    fpsDroppedMonitoringPeriod: 5e3,
                    fpsDroppedMonitoringThreshold: .2,
                    appendErrorMaxRetry: 3,
                    loader: Pe,
                    fLoader: void 0,
                    pLoader: void 0,
                    xhrSetup: void 0,
                    licenseXhrSetup: void 0,
                    abrController: Re,
                    bufferController: Te,
                    capLevelController: Ae,
                    fpsController: we,
                    stretchShortVideoTrack: !1,
                    maxAudioFramesDrift: 1,
                    forceKeyFrameOnDiscontinuity: !0,
                    abrEwmaFastLive: 3,
                    abrEwmaSlowLive: 9,
                    abrEwmaFastVoD: 3,
                    abrEwmaSlowVoD: 9,
                    abrEwmaDefaultEstimate: 5e5,
                    abrBandWidthFactor: .95,
                    abrBandWidthUpFactor: .7,
                    abrMaxWithRealBitrate: !1,
                    maxStarvationDelay: 4,
                    maxLoadingDelay: 4,
                    minAutoBitrate: 0,
                    emeEnabled: !1,
                    widevineLicenseUrl: void 0,
                    requestMediaKeySystemAccessFunc: "undefined" != typeof window && window.navigator && window.navigator.requestMediaKeySystemAccess ? window.navigator.requestMediaKeySystemAccess.bind(window.navigator) : null,
                    audioTrackController: void 0,
                    audioStreamController: void 0,
                    emeController: void 0
                };
                function Ce(e, t) {
                    var r = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var i = Object.getOwnPropertySymbols(e);
                        t && (i = i.filter((function(t) {
                                return Object.getOwnPropertyDescriptor(e, t).enumerable
                            }
                        ))),
                            r.push.apply(r, i)
                    }
                    return r
                }
                function Fe(e, t, r) {
                    return t in e ? Object.defineProperty(e, t, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : e[t] = r,
                        e
                }
                function Me(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e
                }
                function Ne(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        i.enumerable = i.enumerable || !1,
                            i.configurable = !0,
                        "value"in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                function Ue(e, t, r) {
                    return t && Ne(e.prototype, t),
                    r && Ne(e, r),
                        e
                }
                r.d(t, "default", (function() {
                        return Be
                    }
                ));
                var Be = function(e) {
                    var t, r;
                    function i(t) {
                        var r;
                        void 0 === t && (t = {}),
                            (r = e.call(this) || this).config = void 0,
                            r._autoLevelCapping = void 0,
                            r.abrController = void 0,
                            r.capLevelController = void 0,
                            r.levelController = void 0,
                            r.streamController = void 0,
                            r.networkControllers = void 0,
                            r.emeController = void 0,
                            r.coreComponents = void 0,
                            r.media = null,
                            r.url = null,
                            r._audioContext = void 0,
                            r._source = void 0,
                            r._analyser = void 0,
                            r._native_src = void 0,
                            r._playlist = [],
                            r._playSequence = [],
                            r._shuffle = !1,
                            r._currentIndex = -1,
                            r._loop = !1;
                        var a = i.DefaultConfig;
                        if ((t.liveSyncDurationCount || t.liveMaxLatencyDurationCount) && (t.liveSyncDuration || t.liveMaxLatencyDuration))
                            throw new Error("Illegal hiradio.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
                        r.config = function(e) {
                            for (var t = 1; t < arguments.length; t++) {
                                var r = null != arguments[t] ? arguments[t] : {};
                                t % 2 ? Ce(r, !0).forEach((function(t) {
                                        Fe(e, t, r[t])
                                    }
                                )) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : Ce(r).forEach((function(t) {
                                        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
                                    }
                                ))
                            }
                            return e
                        }({}, a, {}, t);
                        var n = Me(r).config;
                        if (void 0 !== n.liveMaxLatencyDurationCount && n.liveMaxLatencyDurationCount <= n.liveSyncDurationCount)
                            throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');
                        if (void 0 !== n.liveMaxLatencyDuration && (void 0 === n.liveSyncDuration || n.liveMaxLatencyDuration <= n.liveSyncDuration))
                            throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');
                        Object(l.a)(n.debug),
                            r._autoLevelCapping = -1;
                        var o = r.abrController = new n.abrController(Me(r))
                            , s = new n.bufferController(Me(r))
                            , u = r.capLevelController = new n.capLevelController(Me(r))
                            , f = new n.fpsController(Me(r))
                            , h = new k(Me(r))
                            , c = new C(Me(r))
                            , p = new F(Me(r))
                            , v = new ge(Me(r))
                            , g = r.levelController = new ce(Me(r))
                            , m = new G(Me(r))
                            , y = [g, r.streamController = new ue(Me(r),m)]
                            , b = n.audioStreamController;
                        b && y.push(new b(Me(r),m)),
                            r.networkControllers = y;
                        var E = [h, c, p, o, s, u, f, v, m];
                        if (b = n.emeController) {
                            var R = new b(Me(r));
                            r.emeController = R,
                                E.push(R)
                        }
                        return r.media = new Audio,
                            r.media.parent = Me(r),
                            r.media.crossOrigin = "anonymous",
                            r.trigger(d.a.MEDIA_ATTACHING, {
                                media: r.media
                            }),
                        (window.AudioContext || window.webkitAudioContext) && (r._audioContext = new (window.AudioContext || window.webkitAudioContext),
                            r._source = r._audioContext.createMediaElementSource(r.media),
                            r._source.connect(r._audioContext.destination),
                            r._native_src = r.media.src),
                            r.media.addEventListener("pause", r.handleAudioEvent),
                            r.media.addEventListener("play", r.handleAudioEvent),
                            r.media.addEventListener("playing", r.handleAudioEvent),
                            r.media.addEventListener("ended", r.handleAudioEvent),
                            r.coreComponents = E,
                            r
                    }
                    r = e,
                        (t = i).prototype = Object.create(r.prototype),
                        t.prototype.constructor = t,
                        t.__proto__ = r,
                        i.isSupported = function() {
                            return function() {
                                var e = Y();
                                if (!e)
                                    return !1;
                                var t = SourceBuffer || window.WebKitSourceBuffer
                                    , r = e && "function" == typeof e.isTypeSupported && e.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"')
                                    , i = !t || t.prototype && "function" == typeof t.prototype.appendBuffer && "function" == typeof t.prototype.remove;
                                return !!r && !!i
                            }()
                        }
                        ,
                        Ue(i, null, [{
                            key: "version",
                            get: function() {}
                        }, {
                            key: "Events",
                            get: function() {
                                return d.a
                            }
                        }, {
                            key: "ErrorTypes",
                            get: function() {
                                return o.b
                            }
                        }, {
                            key: "ErrorDetails",
                            get: function() {
                                return o.a
                            }
                        }, {
                            key: "DefaultConfig",
                            get: function() {
                                return i.defaultConfig ? i.defaultConfig : ke
                            },
                            set: function(e) {
                                i.defaultConfig = e
                            }
                        }]);
                    var a = i.prototype;
                    return a.addEventListener = function(e, t) {
                        this.addListener(e, t)
                    }
                        ,
                        a.handleAudioEvent = function(e) {
                            switch (e.type) {
                                case "pause":
                                    this.parent.trigger(d.a.AUDIO_PAUSE);
                                    break;
                                case "play":
                                    this.parent.trigger(d.a.AUDIO_PLAY);
                                    break;
                                case "playing":
                                    this.parent.trigger(d.a.AUDIO_PLAYING);
                                    break;
                                case "ended":
                                    if(this._playSequence){
                                        !this._loop && this._currentIndex >= this._playSequence.length - 1 ? this.pause() : this.next(),
                                            this.parent.trigger(d.a.AUDIO_ENDED)
                                    }
                            }
                        }
                        ,
                        a.setVolume = function(e) {
                            (e >= 0 || e <= 1) && (this.media.volume = e)
                        }
                        ,
                        a.getVolume = function() {
                            return this.media.volume
                        }
                        ,
                        a.setPlaybackRate = function(e) {
                            this.isLiveStream() || (this.media.playbackRate = e > 0 ? e : this.media.defaultPlaybackRate)
                        }
                        ,
                        a.setDefaultPlaybackRate = function() {
                            this.media.playbackRate = this.media.defaultPlaybackRate
                        }
                        ,
                        a.getPlaybackRate = function() {
                            return this.media.playbackRate
                        }
                        ,
                        a.setMute = function(e) {
                            this.media.muted = e
                        }
                        ,
                        a.getMute = function() {
                            return this.media.muted
                        }
                        ,
                        a.setLoop = function(e) {
                            this._loop = e
                        }
                        ,
                        a.getLoop = function() {
                            return this._loop
                        }
                        ,
                        a.seek = function(e) {
                            this.isLiveStream() || (this.media.currentTime = e)
                        }
                        ,
                        a.currentTime = function() {
                            return this.media.currentTime
                        }
                        ,
                        a.duration = function() {
                            return this.media.duration
                        }
                        ,
                        a.setAutoplay = function(e) {
                            this.media.autoplay = e
                        }
                        ,
                        a.getAutoplay = function() {
                            return this.media.autoplay
                        }
                        ,
                        a.setShuffle = function(e) {
                            this._shuffle = e,
                            this._playlist.length > 0 && this.shuffle(this._shuffle)
                        }
                        ,
                        a.getShuffle = function() {
                            return this._shuffle
                        }
                        ,
                        a.isLiveStream = function() {
                            return !(this.media.src.search(/\.(mp3|m4a)$/i) > 0)
                        }
                        ,
                        a.isIE = function() {
                            return navigator.userAgent.indexOf("Trident") > 0
                        }
                        ,
                        a.isiPhone = function() {
                            return (navigator.userAgent.indexOf("iPhone") > 0 || navigator.userAgent.indexOf("iPad") > 0) && navigator.userAgent.indexOf("Safari")
                        }
                        ,
                        a.destroy = function() {
                            this.trigger(d.a.DESTROYING),
                                this.detachMedia(),
                                this.coreComponents.concat(this.networkControllers).forEach((function(e) {
                                        e.destroy()
                                    }
                                )),
                                this.url = null,
                                this.removeAllListeners(),
                                this._autoLevelCapping = -1
                        }
                        ,
                        a.attachMedia = function(e) {
                            this.media = e,
                                this.trigger(d.a.MEDIA_ATTACHING, {
                                    media: e
                                })
                        }
                        ,
                        a.bind = function(e) {
                            null != this.media && (this.media = null),
                                this.media = e,
                                this._native_src = e.src,
                                this._source = this._audioContext.createMediaElementSource(this.media),
                                this.media.crossOrigin = "anonymous",
                                this.trigger(d.a.MEDIA_ATTACHING, {
                                    media: e
                                })
                        }
                        ,
                        a.load = function(e) {
                            e.length > 0 && (this._playlist = [].concat(e),
                                this._currentIndex = 0,
                                this.shuffle(this._shuffle),
                                this._load(this._playlist[this._playSequence[this._currentIndex]]))
                        }
                        ,
                        a._load = function(e) {
                            this.pause(),
                                e.indexOf(".m3u8") <= 1 ? (this.media.src = e,
                                    this.media.load()) : (this.isIE(),
                                    this.trigger(d.a.MEDIA_ATTACHING, {
                                        media: this.media
                                    }),
                                    this.loadSource(e)),
                            this.isIE() || this._audioContext.resume()
                        }
                        ,
                        a.shuffle = function(e) {
                            this._shuffle = e,
                            null != this._playSequence && this._playSequence.length == this._playlist.length || (this._playSequence = new Array(this._playlist.length));
                            for (var t = 0; t < this._playlist.length; t++)
                                this._playSequence[t] = t;
                            if (this._shuffle) {
                                var r = this._playSequence.concat();
                                for (t = 0; t < this._playlist.length; t++) {
                                    var i = Math.floor(Math.random() * r.length);
                                    this._playSequence[t] = r[i],
                                        r.splice(i, 1)
                                }
                            }
                        }
                        ,
                        a.play = function() {
                            this.isIE(),
                                this.startLoad(),
                            this.media && this.media.play()
                        }
                        ,
                        a.pause = function() {
                            this.media && (this.isIE(),
                                this.media.pause()),
                                this.stopLoad()
                        }
                        ,
                        a.next = function() {
                            this._playlist.length > 0 && (this._currentIndex = (this._currentIndex + 1) % this._playlist.length,
                                this._load(this._playlist[this._playSequence[this._currentIndex]]),
                                this.play())
                        }
                        ,
                        a.previous = function() {
                            this._playlist.length > 0 && (this._currentIndex = (this._currentIndex + this._playlist.length - 1) % this._playlist.length,
                                this._load(this._playlist[this._playSequence[this._currentIndex]]),
                                this.play())
                        }
                        ,
                        a.append = function(e) {
                            this._playlist.push(e),
                                this._playSequence.push(this._playlist.length - 1)
                        }
                        ,
                        a.remove = function(e) {
                            var t = !1;
                            this._playSequence[this._currentIndex] == e && (this.pause(),
                                t = !0);
                            for (var r = 0; r < this._playSequence.length; r++)
                                this._playSequence[r] == e && this._playSequence.splice(r, 1);
                            this._playlist.splice(e, 1),
                            t && this.next()
                        }
                        ,
                        a.getFrequencyBinCount = function() {}
                        ,
                        a.getByteFrequencyData = function(e) {}
                        ,
                        a.detachMedia = function() {
                            this.trigger(d.a.MEDIA_DETACHING),
                                this.media = null
                        }
                        ,
                        a.loadSource = function(e) {
                            e = n.buildAbsoluteURL(window.location.href, e, {
                                alwaysNormalize: !0
                            }),
                                this.url = e,
                            this.isiPhone() && (this.media.src = e),
                                this.trigger(d.a.MANIFEST_LOADING, {
                                    url: e
                                })
                        }
                        ,
                        a.startLoad = function(e) {
                            void 0 === e && (e = -1),
                                this.networkControllers.forEach((function(t) {
                                        t.startLoad(e)
                                    }
                                ))
                        }
                        ,
                        a.stopLoad = function() {
                            this.networkControllers.forEach((function(e) {
                                    e.stopLoad()
                                }
                            ))
                        }
                        ,
                        a.swapAudioCodec = function() {
                            this.streamController.swapAudioCodec()
                        }
                        ,
                        a.recoverMediaError = function() {
                            var e = this.media;
                            this.detachMedia(),
                            e && this.attachMedia(e)
                        }
                        ,
                        Ue(i, [{
                            key: "paused",
                            get: function() {
                                return this.media.paused
                            }
                        }, {
                            key: "levels",
                            get: function() {
                                return this.levelController.levels
                            }
                        }, {
                            key: "currentLevel",
                            get: function() {
                                return this.streamController.currentLevel
                            },
                            set: function(e) {
                                this.loadLevel = e,
                                    this.streamController.immediateLevelSwitch()
                            }
                        }, {
                            key: "nextLevel",
                            get: function() {
                                return this.streamController.nextLevel
                            },
                            set: function(e) {
                                this.levelController.manualLevel = e,
                                    this.streamController.nextLevelSwitch()
                            }
                        }, {
                            key: "loadLevel",
                            get: function() {
                                return this.levelController.level
                            },
                            set: function(e) {
                                this.levelController.manualLevel = e
                            }
                        }, {
                            key: "nextLoadLevel",
                            get: function() {
                                return this.levelController.nextLoadLevel
                            },
                            set: function(e) {
                                this.levelController.nextLoadLevel = e
                            }
                        }, {
                            key: "firstLevel",
                            get: function() {
                                return Math.max(this.levelController.firstLevel, this.minAutoLevel)
                            },
                            set: function(e) {
                                this.levelController.firstLevel = e
                            }
                        }, {
                            key: "startLevel",
                            get: function() {
                                return this.levelController.startLevel
                            },
                            set: function(e) {
                                -1 !== e && (e = Math.max(e, this.minAutoLevel)),
                                    this.levelController.startLevel = e
                            }
                        }, {
                            key: "capLevelToPlayerSize",
                            set: function(e) {
                                var t = !!e;
                                t !== this.config.capLevelToPlayerSize && (t ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(),
                                    this.autoLevelCapping = -1,
                                    this.streamController.nextLevelSwitch()),
                                    this.config.capLevelToPlayerSize = t)
                            }
                        }, {
                            key: "autoLevelCapping",
                            get: function() {
                                return this._autoLevelCapping
                            },
                            set: function(e) {
                                this._autoLevelCapping = e
                            }
                        }, {
                            key: "bandwidthEstimate",
                            get: function() {
                                var e = this.abrController._bwEstimator;
                                return e ? e.getEstimate() : NaN
                            }
                        }, {
                            key: "autoLevelEnabled",
                            get: function() {
                                return -1 === this.levelController.manualLevel
                            }
                        }, {
                            key: "manualLevel",
                            get: function() {
                                return this.levelController.manualLevel
                            }
                        }, {
                            key: "minAutoLevel",
                            get: function() {
                                for (var e = this.levels, t = this.config.minAutoBitrate, r = e ? e.length : 0, i = 0; i < r; i++) {
                                    if ((e[i].realBitrate ? Math.max(e[i].realBitrate, e[i].bitrate) : e[i].bitrate) > t)
                                        return i
                                }
                                return 0
                            }
                        }, {
                            key: "maxAutoLevel",
                            get: function() {
                                var e = this.levels
                                    , t = this.autoLevelCapping;
                                return -1 === t && e && e.length ? e.length - 1 : t
                            }
                        }, {
                            key: "nextAutoLevel",
                            get: function() {
                                return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel)
                            },
                            set: function(e) {
                                this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, e)
                            }
                        }, {
                            key: "liveSyncPosition",
                            get: function() {
                                return this.streamController.liveSyncPosition
                            }
                        }]),
                        i
                }(z);
                Be.defaultConfig = void 0
            }
        ]).default
    }
));
